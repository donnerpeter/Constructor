package cons2

/**
 * @author peter
 */
class Chart {
  private LinkedHashSet<Frame> frames = []
  private LinkedList<Frame> active = []
  private List<Frame> dirty = []
  private Set<Frame> finished = []
  private Set<Frame> weak = []

  String presentable() {
    LinkedList<Frame> stack = []
    StringBuilder result = []
    for (f in frames()) {
      stack.addFirst f
      result << f.presentable(stack)
      result << "\n"
    }
    result.toString()
  }

  List<Frame> frames(boolean includeWeak = false) {
    (frames - weak) as List<Frame>
  }

  List<Frame> usages(Frame f, boolean includeWeak = false, def pattern) {
    frames(includeWeak).findAll { f in it.children && it.ping(false, pattern) }
  }

  Frame construction(Team team = new Team(), String role, int theta = -1, List<Frame> children, Construct... alternatives) {
    def frame = new Frame(this, team, role, theta, children)
    team.members << frame
    alternatives.each { frame.addAlternative(it) }
    registerFrame(frame)
  }

  List<Frame> findActive(boolean thematic, def pattern) {
    return active.findAll { it.ping(thematic, pattern) }
  }

  Frame newFrame(Team team = null, String role, Construct... alternatives) {
    if (!team) {
      def existing = active.find { it.role == role && it.adopt(true, alternatives) }
      if (existing) {
        return existing
      }
      team = new Team()
    } else if (team[role] && team[role].adopt(false, alternatives)) {
      return team[role]
    }

    def frame = new Frame(this, team, role, -1)
    team.members << frame
    alternatives.each { frame.addAlternative(it) }
    registerFrame(frame)
  }

  private Frame registerFrame(Frame frame) {
    frames << frame
    activate(frame)
    frame
  }

  void activate(Frame frame) {
    strengthen(frame)
    active.addFirst frame
    dirty += active
  }

  private Frame nextUnprocessed() {
    if (dirty) {
      return dirty.remove(0)
    }
    null
  }

  void update() {
    while (true) {
      def f = nextUnprocessed()
      if (!f) {
        return
      }
      f.activate()
    }
  }

  void wrapUp() {
    wrapUp(active as Frame[])
  }

  void wrapUp(Frame... frames) {
    Set<Frame> processed = []
    while (true) {
      def f = frames.find { !(it in processed) && !(it in finished) }
      if (!f) {
        break
      }

      if (f.wrapUp()) {
        finished << f
        update()
      }
      processed << f
    }

    active.removeAll finished
    dirty.removeAll finished
  }

  void weaken(Frame f) {
    if (!(f in weak)) {
      f.team.members.each { doWeaken it }
    }
  }

  private void doWeaken(Frame f) {
    weak << f
    active.remove f
    dirty.remove f
    f.strongUsages([]).each { weaken it }
  }

  private void strengthen(Frame frame) {
    if (frame in weak) {
      frame.team.members.each { doStrengthen frame }
    }
  }

  private void doStrengthen(Frame frame) {
    weak.remove frame
    frame.children.each { strengthen it }
  }

}
