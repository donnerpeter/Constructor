package cons2

/**
 * @author peter
 */
class Chart {
  List<Frame> frames = []
  private Map<Frame, IntRange> positions = [:]
  private List<Frame> dirty = []

  String presentable() {
    LinkedList<Frame> stack = []
    StringBuilder result = []
    for (f in frames) {
      stack.addFirst f
      result << f.aspects["sem"].presentable(stack)
      result << "\n"
    }
    result.toString()
  }

  Frame newFrame(Frame arg1, Frame argN) {
    int start = startOffset(arg1)
    int end = endOffset(argN)
    newFrame(start..end)
  }

  int endOffset(Frame f) {
    return positions[f].toInt
  }

  int startOffset(Frame f) {
    return positions[f].fromInt
  }

  Frame newFrame(Range<Integer> position) {
    def frame = new Frame(this)
    frames << frame
    positions[frame] = position
    dirty += frames
    frame
  }

  private Frame nextUnprocessed() {
    if (dirty) {
      return dirty.remove(0)
    }
    null
  }

  void update() {
    while (true) {
      def f = nextUnprocessed()
      if (!f) {
        return
      }
      f.aspects.values().each {
        it.activate f
      }
    }
  }
}
