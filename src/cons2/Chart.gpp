package cons2

/**
 * @author peter
 */
class Chart {
  LinkedHashSet<Frame> frames = []
  private LinkedList<Frame> active = []
  private List<Frame> dirty = []
  private Set<Frame> finished = []

  String presentable() {
    LinkedList<Frame> stack = []
    StringBuilder result = []
    for (f in frames) {
      stack.addFirst f
      result << f.presentable(stack)
      result << "\n"
    }
    result.toString()
  }

  Frame construction(int theta = -1, Frame... children) {
    registerFrame(new Frame(this, theta, children))
  }

  List<Frame> findActive(boolean thematic, def pattern) {
    return active.findAll { it.ping(thematic, pattern) }
  }

  Frame newFrame() {
    registerFrame(new Frame(this, -1))
  }

  private Frame registerFrame(Frame frame) {
    if (frames.contains(frame)) {
      frame = frames.find { it == frame }
    } else {
      frames << frame
    }

    activate(frame)
    frame
  }

  void activate(Frame frame) {
    active.addFirst frame
    dirty += active
  }

  private Frame nextUnprocessed() {
    if (dirty) {
      return dirty.remove(0)
    }
    null
  }

  void update() {
    while (true) {
      def f = nextUnprocessed()
      if (!f) {
        return
      }
      f.activate()
    }
  }

  void wrapUp() {
    wrapUp(active as Frame[])
  }

  void wrapUp(Frame... frames) {
    Set<Frame> processed = []
    while (true) {
      def f = frames.find { !(it in processed) && !(it in finished) }
      if (!f) {
        break
      }

      if (f.wrapUp()) {
        finished << f
      }
      processed << f
    }

    active.removeAll finished
    dirty.removeAll finished
  }
}
