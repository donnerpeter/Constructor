package cons2

/**
 * @author peter
 */
class EngRusTransfer extends Transfer {

  @Override
  Chart generate(Chart desired) {
    def eng = new Chart(new English())

    desired.frames().findAll { it.ping(false, 'love') }.each { generateSentence(it, eng) }

    return eng
  }

  private void generateSentence(Frame verb, Chart dst) {
    generateNP(dst, verb.strongUsages('state_experiencer')[0].children[1], 'nom')
    dst.newFrame(['phon', 'любит'])
    generateNP(dst, verb.strongUsages('state_theme')[0].children[1], 'acc')
  }

  private void generateNP(Chart dst, Frame noun, String caze) {
    noun.strongUsages('property_host').each { rel ->
      def adj = rel.children[0]
      if (adj.ping(false, 'beautiful')) {
        dst.newFrame(['phon', caze == 'nom' ? 'красивая' : 'красивую'])
      }
    }
    if (noun.ping(false, 'mother')) {
      dst.newFrame(['phon', 'мать'])
    } else if (noun.ping(false, 'daughter')) {
      dst.newFrame(['phon', 'дочь'])
    } else if (noun.ping(false, 'father')) {
      dst.newFrame(['phon', caze == 'nom' ? 'отец' : 'отца'])
    }
    dst.update()
  }

}
