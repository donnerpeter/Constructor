package cons2

 /**
 * @author peter
 */
class English implements Language {
  Inflection infl = new Inflection().
          wholeWord("father", ["syn", "noun"], ["sem", "father"]).
          wholeWord("mother", ["syn", "noun"], ["sem", "mother"]).
          wholeWord("beautiful", ["syn", "adj"], ["sem", "beautiful"]).
          wholeWord("daughter", ["syn", "noun"], ["sem", "daughter"]).
          wholeWord("the", ['syn', 'article']).
          suffix("s", ['syn', 'verb'])

  boolean wrapUp(Frame host, Aspect aspect) {
    true
  }

  SimpleQuery subject = ["noun", ["syn", 'subject'], ["sem", "experiencer"]]
  SimpleQuery object = ["noun", ["syn", 'object'], ["sem", "theme"]]
  SimpleQuery property_host = ["noun", [new Aspect("sem", 'property_host')] as Aspect[]]

  void aspectAppeared(Frame host, Aspect aspect) {
    if (aspect.ping('article')) {
      def article = host.chart.newFrame(new AnticipatingConstruct(["noun"], "noun"))
      host.chart.construction([article, host], ["syn", "det_noun"])
      return
    }

    if (aspect.ping('verb')) {
      subject.activate(host, true)
      return
    }

    if (aspect.ping('adj')) {
      property_host.activate host
      return
    }

    if (aspect.role == 'stem') {
      if (aspect.ping('love')) {
        host.enrich(["sem", "love"])
        return
      }
    }

    if (aspect.role == 'phon') {
      infl.analyze host, aspect
    }

  }

  void contextChanged(Frame host, Aspect aspect) {
    if (aspect.ping('verb')) {
      object.activate(host, false)
    }
  }

  void generate(Chart sem, Chart to) {
    sem.frames().findAll { it.ping('love') || it.ping('HAPPEN') }.each { generateSentence(it, to) }
  }

  private void generateSentence(Frame verb, Chart dst) {
    generateNP(dst, verb.strongUsages('experiencer')[0].children[1], true)
    dst.newFrame(['phon', verb.ping('love') ? 'loves' : 'happened'])
    def themeLink = verb.strongUsages('theme')[0]
    if (verb.ping('love')) {
      generateNP(dst, themeLink.children[1], false)
    } else {
      generatePP(dst, 'to', themeLink.children[1])
    }
    if (verb.ping('PAST')) {
      dst.newFrame(['phon', 'today'])
    }
  }

  private void generatePP(Chart dst, String prep, Frame noun) {
    dst.newFrame(['phon', prep])
    generateNP dst, noun, false
  }

  private void generateNP(Chart dst, Frame noun, boolean nom) {
    if (noun.ping('I')) {
      dst.newFrame(['phon', nom ? 'I' : 'me'])
      return;
    }

    if (noun.ping('new')) {
      dst.newFrame(['phon', 'An'])
    } else {
      dst.newFrame(['phon', 'the'])
    }
    noun.strongUsages('property_host').each { rel ->
      generateAdj(dst, rel.children[0])
    }
    if (noun.ping('mother')) {
      dst.newFrame(['phon', 'mother'])
    } else if (noun.ping('daughter')) {
      dst.newFrame(['phon', 'daughter'])
    } else if (noun.ping('father')) {
      dst.newFrame(['phon', 'father'])
    } else if (noun.ping('THING')) {
      dst.newFrame(['phon', 'thing'])
    }
    dst.update()
  }

  private def generateAdj(Chart dst, Frame adj) {
    if (adj.ping('beautiful')) {
      dst.newFrame(['phon', 'beautiful'])
    }
    else if (adj.ping('AMAZING')) {
      dst.newFrame(['phon', 'amazing'])
    }
  }

}
