package cons2

 /**
 * @author peter
 */
class English implements Language {
  Inflection infl = new Inflection().
          wholeWord("mother", ["syn", "noun"], ["sem", "mother"]).
          wholeWord("daughter", ["syn", "noun"], ["sem", "daughter"]).
          wholeWord("the", ['syn', 'article']).
          suffix("s", ['syn', 'verb'])

  boolean wrapUp(Frame host, Aspect aspect) {
    true
  }

  SimpleQuery subject = ["noun", true, ["syn", 'subject'], ["sem", "state_experiencer"]]
  SimpleQuery object = ["noun", true, ["syn", 'object'], ["sem", "state_theme"]]

  void aspectAppeared(Frame host, Aspect aspect) {
    if (aspect.ping('article')) {
      def article = host.chart.newFrame(new AnticipatingConstruct(["noun"], "noun"))
      host.chart.construction(-1, [article, host], ["syn", "det_noun"])
      return
    }

    if (aspect.ping('verb')) {
      subject.activate(host, true)
      return
    }

    if (aspect.role == 'stem') {
      if (aspect.ping('love')) {
        host.enrich(["sem", "love"])
        return
      }
    }

    if (aspect.role == 'phon') {
      infl.analyze host, aspect
    }
  }

  void contextChanged(Frame host, Aspect aspect) {
    if (aspect.ping('verb')) {
      object.activate(host, false)
    }
  }

  void analyzeWord(Chart chart, String w) {
    chart.newFrame(['phon', w])
  }

}
