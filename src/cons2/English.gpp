package cons2

 /**
 * @author peter
 */
class English implements Language {
  Inflection infl = new Inflection().
          wholeWord("father", syn:"noun", sem:"father").
          wholeWord("mother", syn:"noun", sem:"mother").
          wholeWord("beautiful", syn:"adj", sem:"beautiful").
          wholeWord("daughter", syn:"noun", sem:"daughter").
          wholeWord("the", syn:'article').
          suffix("s", syn:'verb')

  void aspectAppeared(Frame host, Aspect aspect, Update update) {
    if (aspect.ping('article')) {
      def mock = update.newFrame([], syn:"noun")
      update.newFrame([mock, host], syn:"det_noun")
      update.anticipate(mock, syn:'noun')
      return
    }

    findTheta(aspect, host, update)

    if (aspect.ping('adj')) {
      update.listen(syn:'noun') { noun, upd2 -> upd2.newFrame([host, noun], sem:'property_host') }
      return
    }

    if (aspect.role == 'stem') {
      if (aspect.ping('love')) {
        update.enrich(host, aspect, sem:"love")
        return
      }
    }

    if (aspect.role == 'phon') {
      infl.analyze host, aspect, update
    }

  }


  private def findTheta(Aspect aspect, Frame host, Update update) {
    if (aspect.ping('noun') && !host.strongUsages(syn: 'theta')) {
      def found = host.findAround(syn: 'verb') { verb ->
        update.newFrame([host, verb], syn:'theta', sem:'theme')
      }
      if (!found) {
        update.listen('syn':'verb') { verb, upd2 ->
          upd2.newFrame([host, verb], syn:'theta', sem:'experiencer')
          upd2.wrapUp host
        }
      }
    }
  }

  void generate(Chart sem, Chart to) {
    new EnglishGenerator(to).generate sem
  }


}
