package cons2

 /**
 * @author peter
 */
class English implements Language {
  Construct syn_article = ['super':['syn', 'article'],
          appeared: { host ->
            def article = host.chart.newFrame(new AnticipatingConstruct(["noun"], "noun"))
            host.chart.construction(-1, [article, host], ["syn", "det_noun"])
          }
  ]

  Inflection infl = new Inflection({new Stem(it)}).
          wholeWord("mother", ["syn", "noun"], ["sem", "mother"]).
          wholeWord("daughter", ["syn", "noun"], ["sem", "daughter"]).
          wholeWord("the", syn_article).
          suffix("s", new SynVerb())

  static class Stem extends Construct {
    String stem

    def Stem(String stem) {
      super('stem', stem)
      this.stem = stem
    }

    @Override
    void appeared(Frame host) {
      if (stem == "love") {
        host.enrich(["sem", "love"])
      }
    }

  }

  void aspectAppeared(Frame host, Construct aspect) {
    aspect.appeared host
  }

  void contextChanged(Frame host, Construct aspect) {
    aspect.contextChanged host
  }

  void analyzeWord(Chart chart, String w) {
    chart.newFrame(infl.instantiate(w))
  }

  static class SynVerb extends Construct {
    SimpleQuery subject = ["noun", true, ["syn", 'subject'], ["sem", "state_experiencer"]]
    SimpleQuery object = ["noun", true, ["syn", 'object'], ["sem", "state_theme"]]

    def SynVerb() {
      super("syn", "verb")
    }

    @Override
    void appeared(Frame host) {
      subject.activate host, true
    }

    @Override
    void contextChanged(Frame f) {
      object.activate f
    }

  }

}
