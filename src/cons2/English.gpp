package cons2

 /**
 * @author peter
 */
class English implements Language {
  Inflection infl = new Inflection().
          wholeWord("father", ["syn", "noun"], ["sem", "father"]).
          wholeWord("mother", ["syn", "noun"], ["sem", "mother"]).
          wholeWord("beautiful", ["syn", "adj"], ["sem", "beautiful"]).
          wholeWord("daughter", ["syn", "noun"], ["sem", "daughter"]).
          wholeWord("the", ['syn', 'article']).
          suffix("s", ['syn', 'verb'])

  boolean wrapUp(Frame host, Aspect aspect) {
    true
  }

  SimpleQuery subject = ["noun", true, ["syn", 'subject'], ["sem", "state_experiencer"]]
  SimpleQuery object = ["noun", true, ["syn", 'object'], ["sem", "state_theme"]]
  SimpleQuery property_host = ["noun", false, [new Aspect("sem", 'property_host')] as Aspect[]]

  void aspectAppeared(Frame host, Aspect aspect) {
    if (aspect.ping('article')) {
      def article = host.chart.newFrame(new AnticipatingConstruct(["noun"], "noun"))
      host.chart.construction(-1, [article, host], ["syn", "det_noun"])
      return
    }

    if (aspect.ping('verb')) {
      subject.activate(host, true)
      return
    }

    if (aspect.ping('adj')) {
      property_host.activate host
      return
    }

    if (aspect.role == 'stem') {
      if (aspect.ping('love')) {
        host.enrich(["sem", "love"])
        return
      }
    }

    if (aspect.role == 'phon') {
      infl.analyze host, aspect
    }

  }

  void contextChanged(Frame host, Aspect aspect) {
    if (aspect.ping('verb')) {
      object.activate(host, false)
    }
  }

  void generate(Chart sem, Chart to) {
    sem.frames().findAll { it.ping(false, 'love') }.each { generateSentence(it, to) }
  }

  private void generateSentence(Frame verb, Chart dst) {
    generateNP(dst, verb.strongUsages('state_experiencer')[0].children[1])
    dst.newFrame(['phon', 'loves'])
    generateNP(dst, verb.strongUsages('state_theme')[0].children[1])
  }

  private void generateNP(Chart dst, Frame noun) {
    dst.newFrame(['phon', 'the'])
    noun.strongUsages('property_host').each { rel ->
      def adj = rel.children[0]
      if (adj.ping(false, 'beautiful')) {
        dst.newFrame(['phon', 'beautiful'])
      }
    }
    if (noun.ping(false, 'mother')) {
      dst.newFrame(['phon', 'mother'])
    } else if (noun.ping(false, 'daughter')) {
      dst.newFrame(['phon', 'daughter'])
    } else if (noun.ping(false, 'father')) {
      dst.newFrame(['phon', 'father'])
    }
    dst.update()
  }

}
