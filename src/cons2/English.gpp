package cons2

/**
 * @author peter
 */
class English implements Language {
  void analyzeWord(Chart chart, String w) {
    chart.newFrame(['super':['phon', w], contextChanged: { Frame frame ->
      if (frame['syn']) return

      switch (w) {
        case "the":
          frame.enrich(syn_article)
          break
        case "mother":
          frame.enrich(["syn", "noun"], ["sem", "mother"])
          break
        case "loves":
          frame.enrich(new SynVerb(), ["sem", "love"])
          break
        case "daughter":
          frame.enrich(["syn", "noun"], ["sem", "daughter"])
      }
    }])

  }

  Construct syn_article = ['super':['syn', 'article'],
          appeared: { host ->
            def article = host.chart.newFrame(new AnticipatingConstruct(["noun"], "noun"))
            host.chart.construction(-1, [article, host], ["syn", "det_noun"])
          }
  ]

  static class SynVerb extends Construct {
    SimpleQuery subject = ["noun", true, ["syn", 'subject'], ["sem", "state_experiencer"]]
    SimpleQuery object = ["noun", true, ["syn", 'object'], ["sem", "state_theme"]]

    def SynVerb() {
      super("syn", "verb")
    }

    @Override
    void appeared(Frame host) {
      subject.activate host, true
    }

    @Override
    void contextChanged(Frame f) {
      object.activate f
    }

  }

}
