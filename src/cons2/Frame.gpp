package cons2

import cons2.Log.AspectEvent
import cons2.Log.FrameEvent

 /**
 * @author peter
 */
class Frame {
  Chart chart
  private final Map<String, List<Aspect>> alternatives = [:]
  private final Map<String, Aspect> chosen = [:]
  private final Set<Aspect> initialized = []
  private final Map<Aspect, Set<Aspect>> alliances = [:]
  Frame adopter
  Frame[] args

  def Frame(Chart chart, Frame... args) {
    this.chart = chart
    this.args = args
    for (arg in args) {
      assert arg != null
    }
    chart.event(new FrameEvent(this, false))
  }

  List<Frame> getChildren() {
    args.collect { it.resolve() }
  }

  Frame resolve() {
    if (adopter) {
      return adopter.resolve()
    }
    return this
  }

  void enrich(Aspect... aspects) {
    if (empty) {
      richEnrich([aspects])
      return
    }

    def role = roles.find { strongAlternatives(it) }
    def ally = strongAlternatives(role)[0]
    def appended = [ally] + (aspects as List)
    richEnrich([appended as Aspect[]])
  }

  List<Aspect> richEnrich(List<Aspect[]> aspectSets) {
    def politics = [] as Set
    Map<String, Set<Aspect>> byRole = [:]
    def added = []

    aspectSets.each { aspects ->
      if (empty) {
        def alliance = aspects as Set
        aspects.each { alliances[it] = alliance }
        politics << alliance
      } else {
        Set<Set<Aspect>> touchedAlliances = aspects.findAll { alliances[it] }.collect { alliances[it] } as Set
        assert touchedAlliances.size() == 1
        Set<Aspect> alliance = touchedAlliances.iterator().next()
        alliance.addAll(aspects as Set)
        aspects.each { alliances.get(it, alliance) }
        politics << alliance
      }

      aspects.each { aspect ->
        def role = aspect.role
        def existing = alternatives.get(role, [])
        if (!(aspect in existing)) {
          existing.add(aspect)
          added << aspect
          byRole.get(role, [] as Set) << aspect
        }
      }

    }

    byRole.each { role, values ->
      setChosen(role,  values.size() != 1 ? null : values.iterator().next())
    }
    added
  }

  void initializeAspects(Collection<Aspect> added) {
    initialized.addAll(added)
  }

  List<Frame> strongUsages(Map<String, Object> pattern) {
    chart.usages(this, false, pattern)
  }

  Frame opponent(Map<String, Object> pattern, boolean arg = true) {
    allOpponents(pattern, arg)[0]
  }

  List<Frame> allOpponents(Map<String, Object> pattern, boolean arg = true) {
    return strongUsages(pattern).findAll { it.children[arg ? 1 : 0] == (Frame) this }.collect {
      List<Frame> children = it.children
      return children[0] == (Frame)this ? children[1] : children[0]
    }
  }

  boolean findAround(Map<String, Object> pattern, Function1<Frame, Void> action) {
    Frame frame = findAllActiveAround(pattern)[0]
    if (frame) {
      action(frame)
    }
    return frame != null
  }

  List<Frame> findAllActiveAround(Map<String, Object> pattern) {
    def active = chart.findActive(pattern)
    return active - this
  }

  void chosenAs(Map<String, Object> pattern) {
    pattern.each { role, p ->
      def found = strongAlternatives(role).find { pingAspect(it, p) }
      if (found) {
        setChosen(role, found)
      }
    }

  }

  private def setChosen(String role, Aspect cxt) {
    if (chosen[role] == cxt) return

    chosen[role] = cxt
    chart.event(new AspectEvent(this, role, cxt))
  }

  private Aspect findDimension(pattern) {
    for (role in roles) {
      def found = strongAlternatives(role).find { pingAspect(it, pattern) }
      if (found) return found
    }
    return null
  }

  Aspect getAt(String role) {
    return chosen[role] 
  }

  private Collection<String> getRoles() { alternatives.keySet() }

  List<Aspect> strongAlternatives(String role) {
    return chosen[role] ? [chosen[role]] : (alternatives[role] ?: [])
  }

  boolean ping(Map<String, Object> pattern) {
    pattern.every { role, p -> strongAlternatives(role).find { pingAspect(it, p) } != null }
  }

  private boolean pingAspect(Aspect aspect, p) {
    p == null || aspect.ping(p)
  }

  @Override
  String toString() {
    "[" + chosenAspects.collect { it.role + ":" + it }.join(", ") + "]"
  }

  List<Aspect> getChosenAspects() {
    roles.collect { strongAlternatives(it) }.flatten()
  }

  List<Aspect> getInitializedAspects() {
    chosenAspects.findAll { it in initialized }
  }

  boolean isEmpty() {
    alternatives.empty
  }

  void relax() {
    if (alternatives['theta']?.size() > 1) {
      setChosen('theta', null)
      setChosen('sem', null)
    }
    chart.activate this
  }

}

