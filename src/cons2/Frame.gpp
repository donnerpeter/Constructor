package cons2

/**
 * @author peter
 */
class Frame {
  Chart chart
  private final Map<String, List<Construct>> alternatives = [:]
  private final Map<String, Construct> chosen = [:]
  String role
  Frame[] children
  private int thematic
  final Team team

  def Frame(Chart chart, Team team, String role, int thematic, Frame... args) {
    this.chart = chart
    this.team = team
    this.thematic = thematic
    this.children = args
    this.role = role
  }

  void removeAlternative(Construct construct) {
    def role = construct.role
    alternatives[role].remove construct
    chosen[role] = alternatives[role].size() != 1 ? null : construct
  }

  Frame addAlternative(Construct construct) {
    def role = construct.role
    alternatives.get(role, []) << construct
    chosen[role] = alternatives[this.role].size() != 1 ? null : construct
    this
  }

  List<Frame> strongUsages(pattern) {
    chart.usages(this, false, pattern)
  }

  Frame findAround(boolean thematic, def pattern) {
    return findAllActiveAround(thematic, pattern).find { true }
  }

  List<Frame> findAllActiveAround(boolean thematic, def pattern) {
    return chart.findActive(thematic, pattern) - this
  }

  List<Frame> getThematicChildren() {
    thematic >= 0 ? [children[thematic]] : []
  }

  void chosenAs(def pattern) {
    def found = findDimension(pattern)
    if (found) {
      chosen[found.role] = found
    }
  }

  private Construct findDimension(pattern) {
    for (role in roles) {
      def found = strongAlternatives(role).find { it.ping(pattern) }
      if (found) return found
    }
    return null
  }

  private Collection<String> getRoles() { alternatives.keySet() }

  private List<Construct> strongAlternatives(String role) {
    return chosen[role] ? [chosen[role]] : alternatives[role]
  }

  boolean ping(boolean thematic, def pattern) {
    if (thematic && strongUsages([]).any { ((Frame) this) in it.thematicChildren }) {
      return false
    }

    return findDimension(pattern) != null
  }

  @Override
  String toString() {
    strongAlternatives("sem").collect { it.toString() }.join("|")
  }

  def activate() {
    for (role in roles) {
      if (chosen[role]) {
        chosen[role].activate this
      }
    }
  }

  String presentable(LinkedList<Frame> stack) {
    toString() + children.collect { " ^" + stack.indexOf(it) }.join("")
  }

  boolean wrapUp() {
    for (role in roles) {
      if (chosen[role] && !chosen[role].wrapUp(this)) {
        return false
      }
    }
    return true
  }

  void relax() {
    chosen.clear()
    chart.activate this
  }


  boolean adopt(boolean newTeam, Construct[] constructs) {
    if (team && team != this.team) {
      return false
    }

    return roles.any { role -> chosen[role] && chosen[role].adopt(this, newTeam, constructs) }
  }
}

