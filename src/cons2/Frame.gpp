package cons2

/**
 * @author peter
 */
class Frame {
  Chart chart
  private List<Construct> alternatives = []
  private Construct chosen = null
  String role
  Frame[] children
  private int thematic
  private Team team

  def Frame(Chart chart, String role, int thematic, Frame... args) {
    this.chart = chart
    this.thematic = thematic
    this.children = args
    this.role = role
  }

  Frame joinTeam(Frame f) {
    assert !team
    team = f.team
    team.members << this
    this
  }

  Team getTeam() {
    if (!team) {
      team = new Team(this)
    }
    team
  }

  Construct addAlternative(String... nicknames) {
    def element = new Construct(nicknames)
    alternatives << element
    chosen = alternatives.size() > 1 ? null : element
    element
  }

  List<Frame> strongUsages(pattern) {
    chart.usages(this, false, pattern)
  }

  Frame findAround(boolean thematic, def pattern) {
    return findAllActiveAround(thematic, pattern).find { true }
  }

  List<Frame> findAllActiveAround(boolean thematic, def pattern) {
    return chart.findActive(thematic, pattern) - this
  }

  List<Frame> getThematicChildren() {
    thematic >= 0 ? [children[thematic]] : []
  }

  void chosenAs(def pattern) {
    chosen = findDimension(pattern)
  }

  private Construct findDimension(pattern) {
    return strongAlternatives().find { it.ping(pattern) }
  }

  private List<Construct> strongAlternatives() {
    return chosen ? [chosen] : alternatives
  }

  boolean ping(boolean thematic, def pattern) {
    if (thematic && strongUsages([]).any { ((Frame) this) in it.thematicChildren }) {
      return false
    }

    return findDimension(pattern) != null
  }

  @Override
  String toString() {
    strongAlternatives().collect { it.toString() }.join("|")
  }

  def activate() {
    if (chosen) {
      chosen.activate this
    }
  }

  String presentable(LinkedList<Frame> stack) {
    toString() + children.collect { " ^" + stack.indexOf(it) }.join("")
  }

  boolean wrapUp() {
    return !chosen || chosen.wrapUp.call(this)
  }

  void relax() {
    chosen = null
    chart.activate this
  }


}

