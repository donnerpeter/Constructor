package cons2

/**
 * @author peter
 */
class HeadConstructingQuery extends SimpleQuery {
  final LinkedHashSet<String> mockHeadNicks
  final def realHeadPattern

  def HeadConstructingQuery(pattern, boolean thematic, Construct link, LinkedHashSet<String> mockHeadNicks, def realHeadPattern) {
    super(pattern, thematic, link);
    this.mockHeadNicks = mockHeadNicks
    this.realHeadPattern = realHeadPattern
  }

  @Override
  protected Frame findArgument(Frame head) {
    def arg = super.findArgument(head)
    if (arg) {
      return arg
    }
    Construct mockSyn = [
            'super': ["syn", mockHeadNicks],
            adopt: { Frame f, Construct[] a -> return doAdopt(f, (Construct)this, a) }]
    return head.chart.newFrame(mockSyn)
  }

  private boolean doAdopt(Frame f, Construct self, Construct[] a) {
    if (a.any { it.ping(realHeadPattern) }) {
      f.removeAlternative(self)
      f.addConstructs(a)
      f.chosenAs self.nicknames
      return true
    }
    return false
  }


}
