package cons2

class Inflection {
  private Map<String, List<Aspect[]>> wholeWords = [:]
  private Map<String, Map<String, String>> suffixing = [:]

  Inflection suffix(Map<String, String> avm, String suffix) {
    suffixing[suffix] = avm
    this
  }

  Inflection wholeWord(Map<String, String> avm, String word) {
    wholeWord(word, Update.decodeAvm(avm))
  }

  Inflection wholeWord(String word, Aspect... cxts) {
    wholeWords.get(word, []) << cxts
    this
  }

  void analyze(Frame host, Aspect phonAspect, Update update) {
    def word = phonAspect.value

    def wh = wholeWords[word]
    if (wh) {
      wh.each { update.enrich(host, it) }
      return
    }

    for (suf in suffixing.keySet()) {
      if (word.endsWith(suf)) {
        def aspects = [stem:word[0..<word.length()-suf.length()]] + suffixing[suf]
        update.enrich(aspects, host)
        return
      }
    }
  }

}
