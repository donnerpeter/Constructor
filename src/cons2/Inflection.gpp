package cons2

class Inflection {
  private Map<String, Aspect[]> wholeWords = [:]
  private Map<String, Aspect> suffixing = [:]

  Inflection suffix(String suffix, Aspect synCxt) {
    suffixing[suffix] = synCxt
    this
  }

  Inflection wholeWord(String word, Aspect... cxts) {
    wholeWords[word] = cxts
    this
  }

  void analyze(Frame host, Aspect phonAspect) {
    def word = phonAspect.nicknames.iterator().next()

    def wh = wholeWords[word]
    if (wh) {
      host.enrich(wh)
      return
    }

    for (suf in suffixing.keySet()) {
      if (word.endsWith(suf)) {
        host.enrich(['stem', word[0..<word.length()-suf.length()]], suffixing[suf])
        return
      }
    }
  }

}
