package cons2

/**
 * @author peter
 */
class Log {
  final List<Event> events = []

  public void event(Event event) {
    events << event
  }

  private List<List<Event>> groupEvents() {
    def result = []

    Frame current = null
    List<Event> group = null
    for (e in events) {
      if (e.frame != current) {
        if (group) {
          result << group
        }
        current = e.frame
        group = []
      }
      group << e
    }
    if (group) {
      result << group
    }
    result
  }

  private boolean interesting(Frame f, List<List<Event>> groups) {
    groups.any { group -> group.any { event -> event.frame == f && event.role == 'sem' } }
  }

  String presentable() {
    String out = ""
    LinkedList<Frame> stack = []
    def groups = groupEvents()
    for (List<Event> group in groups) {
      group = group.findAll { !it.role || it.role == "sem" }

      if (!group) {
        continue
      }

      def frame = group[0].frame
      if (!interesting(frame, groups)) {
        continue
      }

      String line
      if (stack.indexOf(frame) >= 0) {
        line = frameReference(stack, frame)
      } else {
        assert !group[0].role
        line = "frame" + frame.children.collect { " " + frameReference(stack, it) }.join("")
        group.remove(0)
      }
      stack.addFirst frame

      if (group) {
        line += ": " + group.collect { it.role + "=" + it.newValue }.join(", ")
      }
      out += line + "\n"
    }
    out
  }

  private String frameReference(LinkedList<Frame> stack, Frame frame) {
    def idx = stack.indexOf(frame)
    if (idx < 0) {
      return "^_"
    }

    return "^" + (idx + 1)
  }

  static class Event {
    final Frame frame
    final String role
    final Construct newValue

    def Event(Frame frame) {
      this(frame, null, null)
    }

    def Event(Frame frame, String role, Construct newValue) {
      this.frame = frame;
      this.role = role;
      this.newValue = newValue;
    }

    @Override
    String toString() {
      "$frame: $role=$newValue"
    }


  }
}
