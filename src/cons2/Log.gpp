package cons2

/**
 * @author peter
 */
class Log {
  final List<Event> events = []

  public void event(Event event) {
    events << event
  }

  private Set<Frame> interestingFrames() {
    events.filter { it instanceof AspectEvent && ((AspectEvent)it).role == 'sem' && !it.frame.adopted }.collect { it.frame } as Set
  }

  private List<Event> interestingEvents() {
    def frames = interestingFrames()
    events.findAll { it.frame in frames }
  }

  private List<List<Event>> groupEvents() {
    def result = []

    Frame current = null
    List<Event> group = null
    for (e in interestingEvents()) {
      if (e.frame != current) {
        if (group) {
          result << group
        }
        current = e.frame
        group = []
      }
      group << e
    }
    if (group) {
      result << group
    }
    result
  }

  String presentable() {
    String out = ""
    LinkedList<Frame> stack = []
    def groups = groupEvents()
    for (List<Event> group in groups) {
      group = group.findAll { it instanceof FrameEvent || ((AspectEvent)it).role == "sem" }

      if (!group) {
        continue
      }

      def frame = group[0].frame
      String line
      if (stack.indexOf(frame) >= 0) {
        line = frameReference(stack, frame)
      } else {
        assert group[0] instanceof FrameEvent
        line = "frame" + frame.children.collect { " " + frameReference(stack, it) }.join("")
        group.remove(0)
      }
      stack.addFirst frame

      if (group) {
        line += ": " + group.collect { ((AspectEvent)it).role + "=" + ((AspectEvent)it).newValue }.join(", ")
      }
      out += line + "\n"
    }
    out
  }

  private String frameReference(LinkedList<Frame> stack, Frame frame) {
    def idx = stack.indexOf(frame)
    if (idx < 0) {
      return "^_"
    }

    return "^" + (idx + 1)
  }

  static abstract class Event {
    final Frame frame

    Event(Frame frame) {
      this.frame = frame
    }
  }

  static class AspectEvent extends Event {
    final String role
    final Aspect newValue

    def AspectEvent(Frame frame, String role, Aspect newValue) {
      super(frame)
      this.role = role;
      this.newValue = newValue;
    }

    @Override
    String toString() {
      "$frame: $role=$newValue"
    }

  }

  static class FrameEvent extends Event {
    final boolean weakened

    FrameEvent(Frame frame, boolean weakened) {
      super(frame)
      this.weakened = weakened
    }

    @Override
    String toString() {
      (weakened ? "-" : "+") + frame
    }

  }
}
