package cons2

/**
 * @author peter
 */
class Parser {

  Chart parse(String text) {
    def chart = new Chart()
    def words = text.split(" ")

    for (w in words) {
      if (w == "мать") {
        def frame = chart.newFrame("syn")
        frame.addAlternative("noun", "nom")
        frame.addAlternative("noun", "acc")

        chart.newFrame("sem").joinTeam(frame).addAlternative("mother")
      }
      if (w == "любит") {
        def frame = chart.newFrame("syn")
        chart.newFrame("sem").joinTeam(frame).addAlternative("love")

        def subject = new SimpleQuery("nom", "syn", "subject", true, {
          it.withAction { f ->
            if (!f.team["sem"]) {
              def state = f.children[0].team["sem"]
              def experiencer = f.children[1].team["sem"]
              if (state && experiencer) {
                f.chart.construction("sem", state, experiencer).joinTeam(f).addAlternative("state_experiencer")
              }
            }

          }
        })
        def object = new SimpleQuery("acc", "syn", "object", true, {
          it.withAction { f ->
            if (!f.team["sem"]) {
              def state = f.children[0].team["sem"]
              def theme = f.children[1].team["sem"]
              if (state && theme) {
                f.chart.construction("sem", state, theme).joinTeam(f).addAlternative("state_theme")
              }
            }

          }
        })

        frame.addAlternative("verb").withAction { Frame f ->
          subject.activate f
          object.activate f
        }.withWrapUp { Frame f ->
          if (subject.satisfied(f) && object.satisfied(f)) {
            return true
          }

          subject.weaken(f)
          object.weaken(f)

          def subjs = subject.allArgumentCandidates(f)
          def objs = object.allArgumentCandidates(f)

          if (objs.size() == 1) {
            subjs -= objs
            object.instantiate(f, objs[0])
          }
          if (subjs.size() == 1) {
            subject.instantiate(f, subjs[0])
          }

          return subject.satisfied(f) && object.satisfied(f)
        }

        if (subject.activate(frame)) {
          chart.wrapUp subject.getArg(frame)
        }
        if (object.activate(frame)) {
          chart.wrapUp object.getArg(frame)
        }

      }
      if (w == "дочь") {
        def frame = chart.newFrame("syn")
        frame.addAlternative("noun", "nom")
        frame.addAlternative("noun", "acc")

        chart.newFrame("sem").joinTeam(frame).addAlternative("daughter")
      }
      if (w == "красивая") {
        def frame = chart.newFrame("syn")
        chart.newFrame("sem").joinTeam(frame).addAlternative("beautiful")

        def adj = new SimpleQuery("nom", "syn", "adjective_noun", false, propertyHost())
        frame.addAlternative().withAction { Frame f -> adj.activate(f) }
      }
      if (w == "красивую") {
        def frame = chart.newFrame("syn")
        chart.newFrame("sem").joinTeam(frame).addAlternative("beautiful")

        def adj = new SimpleQuery("acc", "syn", "adjective_noun", false, propertyHost())
        frame.addAlternative().withAction { Frame f -> adj.activate(f) }
      }
      if (w == "отец") {
        def frame = chart.newFrame("syn")
        frame.addAlternative("noun", "nom")

        chart.newFrame("sem").joinTeam(frame).addAlternative("father")
      }
      if (w == "отца") {
        def frame = chart.newFrame("syn")
        frame.addAlternative("noun", "acc")

        chart.newFrame("sem").joinTeam(frame).addAlternative("father")
      }



      chart.update()
    }

    chart.wrapUp()


    return chart
  }

  private Function1<Construct, Void> propertyHost() {
    return {
      it.withAction { f ->
        if (!f.team["sem"]) {
          def property = f.children[0].team["sem"]
          def host = f.children[1].team["sem"]
          if (property && host) {
            f.chart.construction("sem", property, host).joinTeam(f).addAlternative("property_host")
          }
        }
      }
    }
  }


}
