package cons2

/**
 * @author peter
 */
class Parser {

  Chart parse(String text) {
    def chart = new Chart()
    def words = text.split(" ")

    for (w in words) {
      if (w == "мать") {
        def frame = chart.newFrame("syn", ["noun", "nom"], ["noun", "acc"])

        chart.newFrame("sem", ["mother"]).joinTeam(frame)
      }
      if (w == "любит") {
        def subject = new SimpleQuery("nom", "syn", true, ['super':'subject', activate:{ Frame f ->
          if (!f.team["sem"]) {
            def state = f.children[0].team["sem"]
            def experiencer = f.children[1].team["sem"]
            if (state && experiencer) {
              f.chart.construction("sem", [state, experiencer], ["state_experiencer"] as Construct).joinTeam(f)
            }
          }
        }] as Construct)
        def object = new SimpleQuery("acc", "syn", true, ['super':'object', activate:{ f ->
          if (!f.team["sem"]) {
            def state = f.children[0].team["sem"]
            def theme = f.children[1].team["sem"]
            if (state && theme) {
              f.chart.construction("sem", [state, theme], ["state_theme"] as Construct).joinTeam(f)
            }
          }
        }] as Construct)

        def syn = ['super': "verb", activate: { Frame f ->
          subject.activate f
          object.activate f
        }, wrapUp: { Frame f ->
          if (subject.satisfied(f) && object.satisfied(f)) {
            return true
          }

          subject.weaken(f)
          object.weaken(f)

          def subjs = subject.allArgumentCandidates(f)
          def objs = object.allArgumentCandidates(f)

          if (objs.size() == 1) {
            subjs -= objs
            object.instantiate(f, objs[0])
          }
          if (subjs.size() == 1) {
            subject.instantiate(f, subjs[0])
          }

          return subject.satisfied(f) && object.satisfied(f)
        }] as Construct
        def frame = chart.newFrame("syn", syn)
        chart.newFrame("sem", ["love"]).joinTeam(frame)

        if (subject.activate(frame)) {
          chart.wrapUp subject.getArg(frame)
        }
        if (object.activate(frame)) {
          chart.wrapUp object.getArg(frame)
        }

      }
      if (w == "дочь") {
        def frame = chart.newFrame("syn", ["noun", "nom"], ["noun", "acc"])

        chart.newFrame("sem", ["daughter"]).joinTeam(frame)
      }
      if (w == "красивая") {
        def adj = new SimpleQuery("nom", "syn", false, adjectiveNoun())
        def frame = chart.newFrame("syn", [activate: { Frame f -> adj.activate(f) }] as Construct)
        chart.newFrame("sem", ["beautiful"]).joinTeam(frame)
      }
      if (w == "красивую") {
        def adj = new SimpleQuery("acc", "syn", false, adjectiveNoun())
        def frame = chart.newFrame("syn", [activate: { Frame f -> adj.activate(f) }] as Construct)
        chart.newFrame("sem", ['beautiful']).joinTeam(frame)
      }
      if (w == "отец") {
        def frame = chart.newFrame("syn", ["noun", "nom"])
        chart.newFrame("sem", ["father"]).joinTeam(frame)
      }
      if (w == "отца") {
        def frame = chart.newFrame("syn", ["noun", "acc"])
        chart.newFrame("sem", ["father"]).joinTeam(frame)
      }



      chart.update()
    }

    chart.wrapUp()


    return chart
  }

  private Construct adjectiveNoun() {
    return ['super':'adjective_noun', activate:{ f ->
        if (!f.team["sem"]) {
          def property = f.children[0].team["sem"]
          def host = f.children[1].team["sem"]
          if (property && host) {
            f.chart.construction("sem", [property, host], ["property_host"]as Construct).joinTeam(f)
          }
        }
      }
    ]
  }


}
