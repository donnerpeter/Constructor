package cons2

/**
 * @author peter
 */
class Parser {

  Chart parse(String text) {
    def chart = new Chart()
    def words = text.split(" ")

    for (w in words) {
      if (w == "мать") {
        def frame = chart.newFrame()
        frame.addAspect("syn", "noun")
        frame.addAspect("case", "nom")
        frame.addAspect("case", "acc")
        frame.addAspect("sem", "mother")
      }
      if (w == "любит") {
        def frame = chart.newFrame()

        def actor = new SimpleQuery(["noun", "nom"], "sem", "state_experiencer", true)
        def theme = new SimpleQuery(["noun", "acc"], "sem", "state_theme", true)

        frame.addAspect("syn", "verb").withAction { Frame f ->
          actor.activate f
          theme.activate f
        }.withWrapUp { Frame f ->
          if (actor.satisfied(f) && theme.satisfied(f)) {
            return true
          }

          actor.relax(f)
          theme.relax(f)

          def subjs = actor.allArgumentCandidates(f)
          def objs = theme.allArgumentCandidates(f)

          if (objs.size() == 1) {
            subjs -= objs
            theme.instantiate(f, objs[0])
          }
          if (subjs.size() == 1) {
            actor.instantiate(f, subjs[0])
          }

          return actor.satisfied(f) && theme.satisfied(f)
        }
        frame.addAspect("sem", "loves")

        if (actor.activate(frame)) {
          chart.wrapUp actor.getArg(frame)
        }
        if (theme.activate(frame)) {
          chart.wrapUp theme.getArg(frame)
        }

      }
      if (w == "дочь") {
        def frame = chart.newFrame()
        frame.addAspect("syn", "noun")
        frame.addAspect("case", "nom")
        frame.addAspect("case", "acc")
        frame.addAspect("sem", "daughter")
      }
      if (w == "красивая") {
        def frame = chart.newFrame()

        frame.addAspect("sem", "beautiful").withAction { Frame f ->
          if (!f.strongUsages("property_host")) {
            def host = f.findAround(false, ["noun", "nom"])
            if (!host) {
              return
//              host = f.chart.newFrame()
//              host.addAspect("syn", "noun")
//              host.addAspect("case", "nom")
            }
            f.chart.construction(f, host).addAspect("sem", "property_host")
            host.chosenAs(["noun", "nom"])
          }
        }
      }
      if (w == "красивую") {
        def frame = chart.newFrame()
        frame.addAspect("sem", "beautiful").withAction { Frame f ->
          if (!f.strongUsages("property_host")) {
            def host = f.findAround(false, ["noun", "acc"])
            if (host) {
              f.chart.construction(f, host).addAspect("sem", "property_host")
              host.chosenAs(["noun", "acc"])
            }
          }
        }
      }
      if (w == "отец") {
        def frame = chart.newFrame()
        frame.addAspect("syn", "noun")
        frame.addAspect("case", "nom")
        frame.addAspect("sem", "father")
      }
      if (w == "отца") {
        def frame = chart.newFrame()
        frame.addAspect("syn", "noun")
        frame.addAspect("case", "acc")
        frame.addAspect("sem", "father")
      }



      chart.update()
    }

    chart.wrapUp()


    return chart
  }


}
