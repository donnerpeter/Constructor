package cons2

/**
 * @author peter
 */
class Russian implements Language {
  void analyzeWord(Chart chart, String w) {
    chart.newFrame(new Word(w))
  }

  static class Word extends Construct {
    String word

    def Word(String word) {
      super('phon', word)
      this.word = word
    }

    @Override
    void appeared(Frame frame) {
      switch (word) {
        case "мать":
          frame.enrich(["syn", "noun", "nom"], ["syn", "noun", "acc"], ["sem", "mother"])
          break
        case "любит":
          frame.enrich(new SynVerb(), ["sem", "love"])
          break
        case "дочь":
          frame.enrich(["syn", "noun", "nom"], ["syn", "noun", "acc"], ["sem", "daughter"])
          break
        case "красивая":
          frame.enrich(new SynAdjective("nom"), ["sem", "beautiful"])
          break
        case "красивую":
          frame.enrich(new SynAdjective("acc"), ["sem", "beautiful"])
          break
        case "отец":
          frame.enrich(["syn", "noun", "nom"], ["sem", "father"])
          break
        case "отца":
          frame.enrich(["syn", "noun", "acc"], ["sem", "father"])
          break
      }

    }
  }

  static class SynAdjective extends Construct {
    SimpleQuery adj
    String caze

    SynAdjective(String caze) {
      super("syn", "adj")
      adj = new SimpleQuery(caze, false, ['syn', 'adjective_noun'], ['sem', 'property_host'])
      this.caze = caze
    }

    @Override
    void contextChanged(Frame host) {
      adj.activate(host)
    }

    @Override
    void appeared(Frame host) {
      if (!adj.activate(host)) {
        host.chart.newFrame(new AnticipatingConstruct(["noun", caze], "noun"))
      }
    }

  }

  static class SynVerb extends Construct {
    SimpleQuery subject = ["nom", true, ["syn", 'subject'], ["sem", "state_experiencer"]]
    SimpleQuery object = ["acc", true, ["syn", 'object'], ["sem", "state_theme"]]

    def SynVerb() {
      super("syn", "verb")
    }

    @Override
    void contextChanged(Frame f) {
      subject.activate f
      object.activate f
    }

    @Override
    void appeared(Frame host) {
      subject.activate host, true
      object.activate host, true
    }

    @Override
    boolean wrapUp(Frame f) {
      if (subject.satisfied(f) && object.satisfied(f)) {
        return true
      }

      subject.weaken(f)
      object.weaken(f)

      def subjs = subject.allArgumentCandidates(f)
      def objs = object.allArgumentCandidates(f)

      if (objs.size() == 1) {
        subjs -= objs
        object.instantiate(f, objs[0])
      }
      if (subjs.size() == 1) {
        subject.instantiate(f, subjs[0])
      }

      return subject.satisfied(f) && object.satisfied(f)
    }


  }

}
