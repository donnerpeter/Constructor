package cons2

 /**
 * @author peter
 */
class Russian implements Language {
  Inflection infl = new Inflection().
          wholeWord("мать", ["syn", "noun", "nom"], ["syn", "noun", "acc"], ["sem", "mother"]).
          wholeWord("дочь", ["syn", "noun", "nom"], ["syn", "noun", "acc"], ["sem", "daughter"]).
          wholeWord("отец", ["syn", "noun", "nom"], ["sem", "father"]).
          wholeWord("отца", ["syn", "noun", "acc"], ["sem", "father"]).
          suffix("ит", ['syn', 'verb']).
          suffix("ая", ['syn', 'adj', 'adj_nom']).
          suffix("ую", ['syn', 'adj', 'adj_acc'])

  void aspectAppeared(Frame host, Aspect aspect) {
    if (aspect.role == 'phon') {
      infl.analyze host, aspect
      return
    }

    if (aspect.ping('adj')) {
      def caze = aspect.ping('adj_nom') ? 'nom' : 'acc'
      def adj = new SimpleQuery(caze, false, ['syn', 'adjective_noun'], ['sem', 'property_host'])
      if (!adj.activate(host)) {
        host.chart.newFrame(new AnticipatingConstruct(["noun", caze], "noun"))
      }
      return
    }

    if (aspect.ping('verb')) {
      subject.activate host, true
      object.activate host, true
      return
    }

    if (aspect.role == 'stem') {
      def stem = aspect.nicknames.iterator().next()
      if (stem == "люб") {
        host.enrich(["sem", "love"])
      }
      if (stem == "красив") {
        host.enrich(["sem", "beautiful"])
      }
    }

  }

  void contextChanged(Frame host, Aspect aspect) {
    if (aspect.ping('adj')) {
      def caze = aspect.ping('adj_nom') ? 'nom' : 'acc'
      new SimpleQuery(caze, false, ['syn', 'adjective_noun'], ['sem', 'property_host']).activate(host)
      return
    }

    if (aspect.ping('verb')) {
      subject.activate host
      object.activate host
      return
    }
  }

  boolean wrapUp(Frame host, Aspect aspect) {
    if (aspect.ping('verb')) {
      if (subject.satisfied(host) && object.satisfied(host)) {
        return true
      }

      subject.weaken(host)
      object.weaken(host)

      def subjs = subject.allArgumentCandidates(host)
      def objs = object.allArgumentCandidates(host)

      if (objs.size() == 1) {
        subjs -= objs
        object.instantiate(host, objs[0])
      }
      if (subjs.size() == 1) {
        subject.instantiate(host, subjs[0])
      }

      return subject.satisfied(host) && object.satisfied(host)

    }
    true
  }

  SimpleQuery subject = ["nom", true, ["syn", 'subject'], ["sem", "state_experiencer"]]
  SimpleQuery object = ["acc", true, ["syn", 'object'], ["sem", "state_theme"]]

  void generate(Chart sem, Chart to) {
    sem.frames().findAll { it.ping(false, 'love') }.each { generateSentence(it, to) }
  }

  private void generateSentence(Frame verb, Chart dst) {
    generateNP(dst, verb.strongUsages('state_experiencer')[0].children[1], 'nom')
    dst.newFrame(['phon', 'любит'])
    generateNP(dst, verb.strongUsages('state_theme')[0].children[1], 'acc')
  }

  private void generateNP(Chart dst, Frame noun, String caze) {
    noun.strongUsages('property_host').each { rel ->
      def adj = rel.children[0]
      if (adj.ping(false, 'beautiful')) {
        dst.newFrame(['phon', caze == 'nom' ? 'красивая' : 'красивую'])
      }
    }
    if (noun.ping(false, 'mother')) {
      dst.newFrame(['phon', 'мать'])
    } else if (noun.ping(false, 'daughter')) {
      dst.newFrame(['phon', 'дочь'])
    } else if (noun.ping(false, 'father')) {
      dst.newFrame(['phon', caze == 'nom' ? 'отец' : 'отца'])
    }
    dst.update()
  }


}
