package cons2

 /**
 * @author peter
 */
class Russian implements Language {
  Inflection infl = new Inflection({new Stem(it)}).
          wholeWord("мать", ["syn", "noun", "nom"], ["syn", "noun", "acc"], ["sem", "mother"]).
          wholeWord("дочь", ["syn", "noun", "nom"], ["syn", "noun", "acc"], ["sem", "daughter"]).
          wholeWord("отец", ["syn", "noun", "nom"], ["sem", "father"]).
          wholeWord("отца", ["syn", "noun", "acc"], ["sem", "father"]).
          suffix("ит", new SynVerb()).
          suffix("ая", new SynAdjective("nom")).
          suffix("ую", new SynAdjective("acc"))


  void analyzeWord(Chart chart, String w) {
    chart.newFrame(infl.instantiate(w))
  }

  void aspectAppeared(Frame host, Construct aspect) {
    aspect.appeared host
    
/*
    if (aspect.role == 'stem') {
      def stem = aspect.nicknames.iterator().next()
      if (stem == "люб") {
        host.enrich(["sem", "love"])
      }
      if (stem == "красив") {
        host.enrich(["sem", "beautiful"])
      }
    }
*/
  }

  void contextChanged(Frame host, Construct aspect) {
    aspect.contextChanged host
  }

  static class Stem extends Construct {
    String stem

    def Stem(String stem) {
      super('stem', stem)
      this.stem = stem
    }

    @Override
    void appeared(Frame host) {
      if (stem == "люб") {
        host.enrich(["sem", "love"])
      }
      if (stem == "красив") {
        host.enrich(["sem", "beautiful"])
      }
    }

  }

  static class SynAdjective extends Construct {
    SimpleQuery adj
    String caze

    SynAdjective(String caze) {
      super("syn", "adj")
      adj = new SimpleQuery(caze, false, ['syn', 'adjective_noun'], ['sem', 'property_host'])
      this.caze = caze
    }

    @Override
    void contextChanged(Frame host) {
      adj.activate(host)
    }

    @Override
    void appeared(Frame host) {
      if (!adj.activate(host)) {
        host.chart.newFrame(new AnticipatingConstruct(["noun", caze], "noun"))
      }
    }

  }

  static class SynVerb extends Construct {
    SimpleQuery subject = ["nom", true, ["syn", 'subject'], ["sem", "state_experiencer"]]
    SimpleQuery object = ["acc", true, ["syn", 'object'], ["sem", "state_theme"]]

    def SynVerb() {
      super("syn", "verb")
    }

    @Override
    void contextChanged(Frame f) {
      subject.activate f
      object.activate f
    }

    @Override
    void appeared(Frame host) {
      subject.activate host, true
      object.activate host, true
    }

    @Override
    boolean wrapUp(Frame f) {
      if (subject.satisfied(f) && object.satisfied(f)) {
        return true
      }

      subject.weaken(f)
      object.weaken(f)

      def subjs = subject.allArgumentCandidates(f)
      def objs = object.allArgumentCandidates(f)

      if (objs.size() == 1) {
        subjs -= objs
        object.instantiate(f, objs[0])
      }
      if (subjs.size() == 1) {
        subject.instantiate(f, subjs[0])
      }

      return subject.satisfied(f) && object.satisfied(f)
    }


  }

}
