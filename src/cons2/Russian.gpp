package cons2

/**
 * @author peter
 */
class Russian implements Language {
  void analyzeWord(Chart chart, String w) {
    chart.newFrame(['super':['phon', w], contextChanged: { Frame frame ->
      if (frame['sem']) return

      switch (w) {
        case "мать":
          frame.enrich(["syn", "noun", "nom"], ["syn", "noun", "acc"], ["sem", "mother"])
          break
        case "любит":
          SynVerb syn = new SynVerb()          
          frame.enrich(syn, ["sem", "love"])

          syn.subject.activate(frame, true)
          syn.object.activate(frame, true)
          break
        case "дочь":
          frame.enrich(["syn", "noun", "nom"], ["syn", "noun", "acc"], ["sem", "daughter"])
          break
        case "красивая":
          def adj = adjectiveNoun("nom")
          frame.enrich(['super': ['syn', 'красивая'], contextChanged: { Frame f -> adj.activate(f) }], ["sem", "beautiful"])
          break
        case "красивую":
          def adj = adjectiveNoun("acc")
          frame.enrich(['super': ['syn', 'красивую'], contextChanged: { Frame f -> adj.activate(f) }], ["sem", "beautiful"])
          break
        case "отец":
          frame.enrich(["syn", "noun", "nom"], ["sem", "father"])
          break
        case "отца":
          frame.enrich(["syn", "noun", "acc"], ["sem", "father"])
          break
      }
    }])
  }

  private SimpleQuery adjectiveNoun(String caze) {
    Construct syn = ['super': ['syn', 'adjective_noun'], contextChanged: { f ->
      if (!f["sem"]) {
        f.enrich(["sem", "property_host"])
      }
    }]
    return new HeadConstructingQuery(caze, false, syn, ["noun", caze], "noun")
  }

  static class SynVerb extends Construct {
    SimpleQuery subject = ["nom", true, ["syn", 'subject'], ["sem", "state_experiencer"]]
    SimpleQuery object = ["acc", true, ["syn", 'object'], ["sem", "state_theme"]]

    def SynVerb() {
      super("syn", "verb")
    }

    @Override
    void contextChanged(Frame f) {
      subject.activate f
      object.activate f
    }

    @Override
    boolean wrapUp(Frame f) {
      if (subject.satisfied(f) && object.satisfied(f)) {
        return true
      }

      subject.weaken(f)
      object.weaken(f)

      def subjs = subject.allArgumentCandidates(f)
      def objs = object.allArgumentCandidates(f)

      if (objs.size() == 1) {
        subjs -= objs
        object.instantiate(f, objs[0])
      }
      if (subjs.size() == 1) {
        subject.instantiate(f, subjs[0])
      }

      return subject.satisfied(f) && object.satisfied(f)
    }


  }

}
