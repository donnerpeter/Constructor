package cons2

/**
 * @author peter
 */
class Russian implements Language {
  Inflection infl = new Inflection().
          wholeWord("мать", ["syn", "noun", "nom"], ["syn", "noun", "acc"], ["sem", "mother"]).
          wholeWord("дочь", ["syn", "noun", "nom"], ["syn", "noun", "acc"], ["sem", "daughter"]).
          wholeWord("отец", ["syn", "noun", "nom"], ["sem", "father"]).
          wholeWord("отца", ["syn", "noun", "acc"], ["sem", "father"]).
          wholeWord("случай", ["syn", "noun", "nom"], ["sem", "THING"], ['discourse', 'new']).
          wholeWord("случился", ["syn", "verb"], ['sem', 'HAPPEN'], ['time', 'PAST']).
          wholeWord("со", ["syn", "prep"]).
          wholeWord("мной", ["syn", "noun", 'instr'], ['sem', 'I']).
          wholeWord("забыл", ["syn", "verb"], ['sem', 'FORGET'], ['time', 'PAST'], ['subcat', '2whq']).
          wholeWord("вдруг", ["syn", "adverb"], ['sem', 'SUDDENLY']).
          wholeWord("я", ["syn", "noun", 'nom'], ['sem', 'I']).
          wholeWord("что", ["syn", "noun", 'nom', 'wh'], ['sem', 'WHAT']).
          wholeWord("идет", ["syn", "verb", "идти"], ['sem', 'GO']).
          wholeWord("раньше", ["syn", "adverb", 'scalar'], ['sem', 'EARLIER']).
          wholeWord("или", ["syn", "conj"], ['sem', 'OR']).
          suffix("ит", ['syn', 'verb']).
          suffix("ая", ['syn', 'adj', 'adj_nom']).
          suffix("ую", ['syn', 'adj', 'adj_acc']).
          suffix("ый", ['syn', 'adj', 'adj_nom'])

  void aspectAppeared(Frame host, Aspect aspect, Update update) {
    if (aspect.role == 'phon') {
      infl.analyze host, aspect

      if (aspect.ping(':')) {
        host.findAround(syn:'verb') { verb -> verb.chart.wrapUp verb }
      }
      return
    }

    if (aspect.ping('adj')) {
      def caze = aspect.ping('adj_nom') ? 'nom' : 'acc'
      def adj = new SimpleQuery(syn:caze, ['syn', 'adjective_noun'], ['sem', 'property_host'])
      if (!adj.activate(host)) {
        def noun = update.newFrame(new AnticipatingConstruct(["noun", caze], [syn:"noun"]))
        update.construction([host, noun], ['syn', 'adjective_noun'], ['sem', 'property_host'])
      }
      return
    }

    if (aspect.ping('prep_noun')) {
      Frame noun = host.children[1]
      if (!noun.strongUsages(syn:'с+тв')) {
        noun.findAround(syn:'verb') { verb -> update.construction([verb, noun], ['syn', 'с+тв']) }
      }
    }

    if (aspect.ping('verb')) {
      subject.activate host, true
      object.activate host, true
      return
    }

    if (aspect.ping('prep')) {
      def caze = 'instr'
      def arg = update.newFrame(new AnticipatingConstruct(["noun", caze], [syn:"noun"]))
      update.construction([host, arg], ['syn', 'prep_noun'])
    }

    if (aspect.role == 'stem') {
      def stem = aspect.nicknames.iterator().next()
      if (stem == "люб") {
        update.enrich(host, ['subcat', '2acc'], ["sem", "love"])
      }
      if (stem == "красив") {
        update.enrich(host, ["sem", "beautiful"])
      }
      if (stem == "Удивительн") {
        update.enrich(host, ["sem", "AMAZING"])
      }
    }

    if (aspect.ping('subject') && !host['sem']) {
      Frame verb = host.children[0]
      update.enrich(host, ['sem', verb.ping(syn:'идти') ? 'agent' : 'experiencer'])
    }

    if (aspect.ping('verb_arg') && !host['wh_focus']) {
      Frame arg = host.children[1]
      if (arg.ping(syn:'wh')) {
        update.enrich(host, ['wh_focus', 'true'])
      }
    }

    if (aspect.ping('conj')) {
      host.findAround([:]) { left -> update.construction([host, left], ['sem', 'conj_left']) }
    }

  }

  void contextChanged(Frame host, Aspect aspect, Update update) {
    if (aspect.ping('verb')) {
      subject.activate host

      if (host.ping(subcat:'2acc')) {
        object.activate host
      }
      if (host.ping(subcat:'2whq')) {
        whComp.activate host
      }

      def stv = host.strongUsages(syn:'с+тв')[0]
      if (stv && !stv['sem']) {
        update.enrich(stv, ['sem', 'theme'])
      }

      if (aspect.ping('идти') && !host.opponent(syn:'adv_mod')) {
        host.findAround(syn:['adverb', 'scalar']) { scalar ->
          host.chart.construction([scalar, host], ['syn', 'adv_mod'], ['sem', 'scalar_end'])
          update.enrich(host, ['sem', 'COME_SCALARLY'])
          host.chosenAs sem:'COME_SCALARLY'
        }
      }

      return
    }

    if (aspect.ping('conj')) {
      new SimpleQuery([:], ['sem', 'conj_right']).activate(host)
    }

    if (aspect.ping('adverb') && !host.opponent(syn:'adv_mod')) {
      adverb.activate(host, false)
    }
  }

  boolean wrapUp(Frame host, Aspect aspect, Update update) {
    if (aspect.ping('love')) {
      if (subject.satisfied(host) && object.satisfied(host)) {
        return true
      }

      subject.weaken(host)
      object.weaken(host)

      def subjs = subject.allArgumentCandidates(host)
      def objs = object.allArgumentCandidates(host)

      if (objs.size() == 1) {
        subjs -= objs
        object.instantiate(host, objs[0])
      }
      if (subjs.size() == 1) {
        subject.instantiate(host, subjs[0])
      }

      return subject.satisfied(host) && object.satisfied(host)

    }
    true
  }

  SimpleQuery subject = [[syn:"nom"], ["syn", 'subject', 'verb_arg']]
  SimpleQuery object = [[syn:"acc"], ["syn", 'object', 'verb_arg'], ["sem", "theme"]]
  SimpleQuery whComp = [[syn:"verb"], ["syn", 'comp', 'verb_arg'], ["sem", "theme"]]
  SimpleQuery adverb = [[syn:"verb"], ["syn", 'adv_mod'], ["sem", "mode"]]

  void generate(Chart sem, Chart to) {
    sem.frames().findAll { it.ping(sem:'love') }.each { generateSentence(it, to) }
  }

  private void generateSentence(Frame verb, Chart dst) {
    generateNP(dst, verb.opponent(sem:'experiencer'), 'nom')
    dst.newFrame(['phon', 'любит'])
    generateNP(dst, verb.opponent(sem:'theme'), 'acc')
  }

  private void generateNP(Chart dst, Frame noun, String caze) {
    noun.allOpponents(sem:'property_host').each {
      if (it.ping(sem:'beautiful')) {
        dst.newFrame(['phon', caze == 'nom' ? 'красивая' : 'красивую'])
      }
    }
    if (noun.ping(sem:'mother')) {
      dst.newFrame(['phon', 'мать'])
    } else if (noun.ping(sem:'daughter')) {
      dst.newFrame(['phon', 'дочь'])
    } else if (noun.ping(sem:'father')) {
      dst.newFrame(['phon', caze == 'nom' ? 'отец' : 'отца'])
    }
    dst.update()
  }


}
