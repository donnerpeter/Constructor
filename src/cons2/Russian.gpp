package cons2

/**
 * @author peter
 */
class Russian implements Language {
  void analyzeWord(Chart chart, String w) {
    chart.newFrame(['super':['phon', w], activate: { Frame frame ->
      if (frame['sem']) return

      switch (w) {
        case "мать":
          frame.enrich(["syn", "noun", "nom"], ["syn", "noun", "acc"], ["sem", "mother"])
          break
        case "любит":
          def subject = new SimpleQuery("nom", true, ["syn", 'subject'], ["sem", "state_experiencer"])
          def object = new SimpleQuery("acc", true, ["syn", 'object'], ["sem", "state_theme"])

          Construct syn = ['super': ["syn", "verb"], activate: { Frame f ->
            subject.activate f
            object.activate f
          }, wrapUp: { Frame f ->
            if (subject.satisfied(f) && object.satisfied(f)) {
              return true
            }

            subject.weaken(f)
            object.weaken(f)

            def subjs = subject.allArgumentCandidates(f)
            def objs = object.allArgumentCandidates(f)

            if (objs.size() == 1) {
              subjs -= objs
              object.instantiate(f, objs[0])
            }
            if (subjs.size() == 1) {
              subject.instantiate(f, subjs[0])
            }

            return subject.satisfied(f) && object.satisfied(f)
          }]
          frame.enrich(syn, ["sem", "love"])

          subject.activate(frame, true)
          object.activate(frame, true)
          break
        case "дочь":
          frame.enrich(["syn", "noun", "nom"], ["syn", "noun", "acc"], ["sem", "daughter"])
          break
        case "красивая":
          def adj = adjectiveNoun("nom")
          frame.enrich(['super': ['syn', 'красивая'], activate: { Frame f -> adj.activate(f) }], ["sem", "beautiful"])
          break
        case "красивую":
          def adj = adjectiveNoun("acc")
          frame.enrich(['super': ['syn', 'красивую'], activate: { Frame f -> adj.activate(f) }], ["sem", "beautiful"])
          break
        case "отец":
          frame.enrich(["syn", "noun", "nom"], ["sem", "father"])
          break
        case "отца":
          frame.enrich(["syn", "noun", "acc"], ["sem", "father"])
          break
      }
    }])
  }

  private SimpleQuery adjectiveNoun(String caze) {
    Construct syn = ['super': ['syn', 'adjective_noun'], activate: { f ->
      if (!f["sem"]) {
        f.addAlternative(["sem", "property_host"])
      }
    }]
    return new HeadConstructingQuery(caze, false, syn, ["noun", caze], "noun")
  }

}
