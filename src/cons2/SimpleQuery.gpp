package cons2

/**
 * @author peter
 */
class SimpleQuery {
  def pattern
  boolean thematic
  Construct[] cxts

  def SimpleQuery(def pattern, boolean thematic, Construct... cxts) {
    this.pattern = pattern;
    this.thematic = thematic;
    this.cxts = cxts
  }

  boolean satisfied(Frame f) {
    !f.strongUsages(cxts[0].nicknames).empty
  }

  List<Frame> allArgumentCandidates(Frame f) {
    f.findAllActiveAround(false, pattern)
  }

  Frame getArg(Frame f) {
    def usages = f.strongUsages(cxts[0].nicknames)
    if (usages.size() == 1) {
      return usages.iterator().next().children[1]
    }
    null
  }

  boolean activate(Frame f, boolean wrapUpArg = false) {
    if (!satisfied(f)) {
      def arg = findArgument(f)
      if (arg) {
        instantiate(f, arg)
        if (wrapUpArg) {
          f.chart.wrapUp arg
        }
        return true
      }
    }
    return false
  }

  protected Frame findArgument(Frame head) {
    return head.findAround(thematic, pattern)
  }

  void instantiate(Frame self, Frame arg) {
    arg.chosenAs pattern

    def usages = self.strongUsages(cxts[0].nicknames)
    if (usages) {
      usages.each { self.chart.activate it }
      return
    }

    self.chart.construction(thematic ? 1 : -1, [self, arg], cxts)
  }

  void weaken(Frame head) {
    head.strongUsages(cxts[0].nicknames).each {
      head.chart.weaken it
      it.children.each { it.relax() }
    }
  }
}
