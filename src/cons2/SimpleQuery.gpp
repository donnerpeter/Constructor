package cons2

/**
 * @author peter
 */
class SimpleQuery {
  Map<String, Object> pattern
  Aspect[] aspects

  def SimpleQuery(Map<String, Object> pattern, Aspect... aspects) {
    this.pattern = pattern;
    this.aspects = aspects
  }

  boolean satisfied(Frame f) {
    !usagesOf(f).empty
  }

  private List<Frame> usagesOf(Frame f) {
    return f.strongUsages((aspects[0].role): aspects[0].nicknames)
  }

  List<Frame> allArgumentCandidates(Frame f) {
    f.findAllActiveAround(pattern)
  }

  Frame getArg(Frame f) {
    def usages = usagesOf(f)
    if (usages.size() == 1) {
      return usages.iterator().next().children[1]
    }
    null
  }

  boolean activate(Frame f, boolean wrapUpArg = false, Update update) {
    if (!satisfied(f)) {
      return f.findAround(pattern) { arg ->
        instantiate(f, arg, update)
        if (wrapUpArg) {
          update.wrapUp arg
        }
      }
    }
    return false
  }



  void instantiate(Frame self, Frame arg, Update update) {
    update.confirmChoice(pattern, arg)

    def usages = usagesOf(self)
    if (usages) {
      usages.each { self.chart.activate it }
      return
    }

    update.newFrame([self, arg], aspects)
  }

  void weaken(Frame head) {
    usagesOf(head).each {
      head.chart.weaken it
      it.children.each { it.relax() }
    }
  }
}
