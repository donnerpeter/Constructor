package cons2

/**
 * @author peter
 */
class Update {
  Chart chart
  private Map<Frame, Set<Aspect>> newAspects = [:]
  private Map<Frame, Set<Aspect>> justAppeared = [:]
  private Map<Frame, Map<String, Object>> confirmations = [:]
  private Set<Frame> wrapUps = []
  private Set<Frame> weakened = []


  Update(Chart chart, Map<Frame, Set<Aspect>> justAppeared = [:], Set<Frame> wrapUps = []) {
    this.chart = chart
    this.justAppeared = justAppeared
    this.wrapUps.addAll wrapUps
  }

  void enrich(Frame host, Aspect... aspects) {
    newAspects.get(host, [] as LinkedHashSet).addAll(aspects)
  }

  Frame newFrame(List<Frame> children, Aspect... aspects) {
    def frame = chart.newFrame(children)
    enrich frame, aspects
    frame
  }

  void wrapUp(Frame frame) {
    wrapUps << frame
  }

  void confirmChoice(Map<String, Object> pattern, Frame frame) {
    frame.chosenAs pattern
    confirmations.get(frame, [:]).putAll pattern
  }

  void weaken(Frame frame) {
    weakened << frame
  }

  void apply() {
    weakened.each { chart.weaken it }
    confirmations.each { frame, pattern -> frame.chosenAs(pattern) }

    if (!newAspects && !justAppeared) {
      wrapUps.each { chart.wrapUp it }
      return
    }

    def next = new Update(chart, newAspects, wrapUps)

    justAppeared.each { frame, added ->
      added.each {
        if (!frame[it.role] || frame[it.role] == it) {
          chart.language.aspectAppeared frame, it, next
        }
      }
    }

    newAspects.each { frame, aspects -> frame.enrich(aspects as Aspect[]) }

    chart.contextChanged next

    justAppeared.each { frame, added -> frame.initializeAspects added }

    next.apply()
  }

}