package cons3

/**
 * @author peter
 */
class EnglishGenerator {
  List<String> output = []

  String generate(Chart chart) {
    new SituationGenerator(chart.situations[0]).sentence()
    String result = ""
    for (w in output) {
      if (!result.empty && !(w in ['.', ','])) {
        result += " "
      }
      result += w
    }
    return result
  }

  private class SituationGenerator {
    Situation situation
    boolean hasSubject

    SituationGenerator(Situation situation) {
      this.situation = situation
    }

    private def sentence() {
      def excl = situation.f('exclamation')
      if (excl) {
        output << 'Great'
        output << 'was'
        def a = situation._assignments.find { it.frame != situation && it.value == excl }
        if (a) {
          np(a.frame, true)
        }
        return
      }

      List<Frame> allVerbs = situation.frames.findAll { it.type in ['HAPPEN', 'FORGET', 'COME_SCALARLY', 'GO_OFF', 'ASK', 'DISCOVER', 'ALSO'] }
      def verb = allVerbs[0]
      assert verb : situation.presentable()

      clause(verb)

      if (allVerbs.size() > 1) {
        output << "and"
        clause(allVerbs[1])
      }
    }

    private void clause(Frame verb) {
      def subj = verb.type in ['HAPPEN', 'COME_SCALARLY'] ? verb.f('theme') :
          verb.type in ['GO_OFF', 'ASK'] ? verb.f('agent') :
          verb.type in ['ALSO'] ? verb.f('subject') :
            verb.f('experiencer')
      if (!hasSubject) {
        assert subj : "$verb; " + situation.presentable()
        np(subj, true)
        hasSubject = true
      }


      if (verb.s('manner') == 'SUDDENLY') {
        output << 'suddenly'
      }
      if (verb.type != 'ALSO') {
        output << [HAPPEN: 'happened', FORGET: 'forgot', COME_SCALARLY: 'comes first', GO_OFF: 'went', ASK: 'asked', DISCOVER: 'discovered', CAN: "couldn't", REMEMBER:'recall'][verb.type]
      }

      def dobj = verb.type == 'ASK' ? verb.f('addressee') : verb.type == 'REMEMBER' ? verb.f('theme') : null
      if (dobj) {
        np(dobj, false)
      }

      def io = verb.type == 'HAPPEN' ? verb.f('experiencer') : verb.type == 'GO_OFF' ? verb.f('goal') : null
      if (io) {
        output << "to"
        np(io, false)
      }

      if (verb.type == 'HAPPEN') {
        output << "today"
      }

      def question = verb.f('question')
      if (question instanceof Situation) {
        output << 'about'
        def think = ((Situation) question).frames.find { it.type == 'THINK' }
        def exp = think.f('experiencer')
        if (exp?.type == 'THEY') {
          output << 'their'
        }
        output << 'opinion'
        output << 'on'
        np(think.f('topic'), false)
      }

      def theme = verb.f('theme')
      if (theme instanceof Situation) {
        if (!theme.f('questioned')) {
          output << ","
          output << "that"
        }

        new SituationGenerator((Situation)theme).sentence()
      } else if (theme && verb.type in ['CAN', 'ALSO']) {
        clause(theme)
      }

      def elaboration = situation.f('elaboration')
      if (elaboration instanceof Situation) {
        output << ","
        new SituationGenerator((Situation)elaboration).sentence()
      }

      def variants = subj?.allAssignments('variant')
      if (variants) {
        output << '-'
        output << variants.collect { (String)it.value }.join(' or ')
      }
    }

    private def np(Frame n, boolean nom) {
      if (!n) {
        output << '???'
        return
      }

      if (n.s('type') == 'ME') {
        output << (nom ? 'I' : "me")
        return
      }
      if (n.s('type') == 'THEY') {
        output << (nom ? 'they' : "them")
        return
      }

      if (n == situation.f('questioned')) {
        output << 'what'
        return
      }


      determiner(n)
      if (n.s('property') == 'AMAZING') {
        output << "amazing"
      }
      def criterion = n.f('criterion')
      if (criterion) {
        output << noun(criterion.type)
      }

      output << noun(n.type)

      if (n.type == 'AMAZE') {
        def theme = n.f('theme')
        if (theme instanceof Situation) {
          output << ','
          output << 'when'
          new SituationGenerator((Situation) theme).sentence()
        }
      }
    }

    private String determiner(Frame n) {
      def det = n.s('determiner')
      if (det == 'THIS') {
        output << 'this'
        return
      }

      if (n.type == 'AMAZE') {
        def assignments = n.allAssignments('experiencer')
        if (!assignments.empty) {
          possessive((Frame)assignments[0].value)
          if (assignments.size() > 1) {
            output << 'and'
            possessive((Frame)assignments[1].value)
          }

          return
        }

      }

      if (n.type == 'NEIGHBOURS') {
        output << 'my' //todo using the actual inferred model information
        return
      }

      if (n.allAssignments('type')[0].rheme) {
        output << 'the'
        return
      }

      output << "An"
    }

    private void possessive(Frame poss) {
      if (poss.type == 'ME') output << 'my'
      else if (poss.type == 'THEY') output << 'their'
      else output << poss.type
    }

  }

  private String noun(String type) {
    switch (type) {
      case 'THING': return 'thing'
      case 'NEIGHBOURS': return 'neighbors'
      case 'MATTER': return 'matter'
      case 'AMAZE': return 'amazement'
      case 'COUNTING': return 'counting'
      case 'ORDER': return 'order'
      default: return type
    }

  }

}
