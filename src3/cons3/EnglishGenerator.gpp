package cons3

/**
 * @author peter
 */
class EnglishGenerator {
  List<String> output = []

  String generate(Chart chart) {
    new SituationGenerator(chart.situations[0]).sentence()
    return output.join(' ')
  }

  private class SituationGenerator {
    Situation situation
    boolean hasSubject

    SituationGenerator(Situation situation) {
      this.situation = situation
    }

    private def sentence() {
      List<Frame> allVerbs = situation.frames.findAll { it.type in ['HAPPEN', 'FORGET', 'COME_SCALARLY', 'GO_OFF', 'ASK'] }
      def verb = allVerbs[0]
      assert verb : situation.presentable()

      clause(verb)

      if (allVerbs.size() > 1) {
        output << "and"
        clause(allVerbs[1])
      }
    }

    private void clause(Frame verb) {
      def subj = verb.type in ['HAPPEN', 'COME_SCALARLY'] ? verb.f('theme') :
          verb.type in ['GO_OFF', 'ASK'] ? verb.f('agent') : verb.f('experiencer')
      if (!hasSubject) {
        np(subj, true)
        hasSubject = true
      }


      if (verb.s('manner') == 'SUDDENLY') {
        output << 'suddenly'
      }
      output << [HAPPEN: 'happened', FORGET: 'forgot', COME_SCALARLY: 'comes first', GO_OFF: 'went', ASK: 'asked'][verb.type]

      def dobj = verb.type == 'ASK' ? verb.f('addressee') : null
      if (dobj) {
        np(dobj, false)
      }

      def io = verb.type == 'HAPPEN' ? verb.f('experiencer') : verb.type == 'GO_OFF' ? verb.f('goal') : null
      if (io) {
        output << "to"
        np(io, false)
      }

      if (verb.type == 'HAPPEN') {
        output << "today,"
      }

      def question = verb.f('question')
      if (question instanceof Situation) {
        output << 'about'
        def think = ((Situation) question).frames.find { it.type == 'THINK' }
        def exp = think.f('experiencer')
        if (exp?.type == 'THEY') {
          output << 'their'
        }
        output << 'opinion'
        output << 'on'
        np(think.f('topic'), false)
      }

      def theme = verb.f('theme')
      if (theme instanceof Situation) {
        new SituationGenerator((Situation)theme).sentence()
      }

      def elaboration = situation.f('elaboration')
      if (elaboration instanceof Situation) {
        new SituationGenerator((Situation)elaboration).sentence()
      }

      def variants = subj.allAssignments('variant')
      if (variants) {
        output << '-'
        output << variants.collect { (String)it.value }.join(' or ')
      }
    }

    private def np(Frame n, boolean nom) {
      if (!n) {
        output << '???'
        return
      }

      if (n.s('type') == 'ME') {
        output << (nom ? 'I' : "me")
        return
      }
      if (n.s('type') == 'THEY') {
        output << (nom ? 'they' : "them")
        return
      }

      if (n == situation.f('questioned')) {
        output << 'what'
        return
      }


      output << determiner(n)
      if (n.s('property') == 'AMAZING') {
        output << "amazing"
      }

      output << noun(n.type)
    }

    private String determiner(Frame n) {
      def det = n.s('determiner')
      if (det == 'THIS') {
        return 'this'
      }

      return n.type == 'NEIGHBOURS' ? 'my' : "An"
    }

  }

  private String noun(String type) {
    switch (type) {
      case 'THING': return 'thing'
      case 'NEIGHBOURS': return 'neighbors'
      case 'MATTER': return 'matter'
      default: return type
    }

  }

}
