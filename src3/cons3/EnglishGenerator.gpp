package cons3

/**
 * @author peter
 */
class EnglishGenerator {
  List<String> output = []
  Set<Situation> handled = []
  boolean past

  String generate(Chart chart) {
    chart.situations.each {
      if (!(it in handled) && chart.__assignments[it]) {
        new SituationGenerator(chart, it, true).sentence(true)
      }
    }

    String result = ""
    for (w in output) {
      if (!result.empty && !(w in ['.', ',', ';', ':', '\n-', "'s", '?'])) {
        result += " "
      }
      result += w
    }
    if (result.endsWith(',')) {
      result = result[0..-2]
    }

    return result
  }

  private class SituationGenerator {
    final Chart chart
    final Situation situation
    final Frame sitFrame
    boolean hasSubject
    boolean capitalize

    SituationGenerator(Chart chart, Situation situation, boolean capitalize) {
      this.chart = chart
      this.situation = situation
      this.capitalize = capitalize
      sitFrame = situation.frame(chart)
    }
    
    private void out(String word) {
      if (word == ',') {
        if (output.empty || output[-1] == ',') return
      }

      output << (capitalize ? word.capitalize() : word)
      capitalize = false
    }

    private def sentence(boolean topLevel) {
      handled << situation

      if (sitFrame.s('time') == 'PAST') {
        past = true //todo maintain a tense for the whole discourse
      }

      def butSit = (Situation) sitFrame.f('but')?.var
      if (butSit && !chart.__assignments[butSit]) {
        out 'but'
      }
      if (sitFrame.s('emphasis')) {
        out 'there'
      } else if (sitFrame.s('relTime') == 'AFTER') { //todo a generic situation time frame
        out 'then'
      } else if (sitFrame.s('relTime') == 'BEFORE') {
        out 'before'
        out ','
      } else if (sitFrame.f('relTime_after')) {
        out 'after'
        np(sitFrame.f('relTime_after'), false)
        out ','
      }

      def opinion = sitFrame.f('opinion_of')
      if (opinion) {
        opinionOf(opinion, null)
        if (!sitFrame.s('clauseEllipsis')) {
          out ','
        }
      }


      def excl = sitFrame.f('exclamation')
      if (excl) {
        out 'great'
        out 'was'
        def a = chart.allAssignments(situation).find { it.frame != sitFrame && it.value == excl }
        if (a) {
          np(a.frame, true)
        }
        clauseEnd()
        return
      }

      List<Frame> allVerbs = chart.frames(situation).findAll { it.type in ['HAPPEN', 'FORGET', 'COME_SCALARLY',
              'GO_OFF', 'ASK',
              'DISCOVER', 'ALSO', 'REMEMBER',
              'GO', 'SMILE', 'TAKE_OUT', 'SAY', 'MOVE',
              'THANK', 'RUN_OUT',
              'GET_SAD', 'SEEM', 'THINK',
              'DO', 'NEED',
              'BEGIN', 'STOP', 'COME_TO'
      ] }
      def verb = allVerbs[0]
      if (!verb) {
        def wh = sitFrame.f('wh')
        def subj
        if (wh) {
          subj = wh
          out "that's"
        } else {
          def copulaTopic = sitFrame.f('copulaTopic')
          assert copulaTopic: situation.presentable(chart)
          subj = copulaTopic
          np(copulaTopic, true)
          out 'was'
        }
        out 'on'
        def location = subj.f('location')
        np(location, false)
        return
      }

      int i = 0
      int mainVerbs = 0
      while (i < allVerbs.size()) {
        int start = i

        def bg = null
        if (allVerbs[i].s('background')) {
          bg = allVerbs[i++]
        }

        if (start > 0) {
          if (i == allVerbs.size() - 1) {
            if (mainVerbs > 1 || bg) out ","
            out "and"
          } else {
            out ","
          }
        }

        if (bg) {
          if (bg.type == 'MOVE') {
            out 'moving'
            np(bg.f('arg2'), false)
            if (bg.s('manner') == 'SLIGHTLY') {
              out 'slightly'
            }
            out 'back'
            out 'and'
            out 'forth'
          } else if (bg.type == 'THINK') {
            out ','
            out 'thinking'
            out 'carefully'
            out 'about'
            np(bg.f('theme'), false)
          } else if (bg.type == 'COME_TO') {
            out 'reaching'
            np(bg.f('goal'), false)
            if (bg.f('domain')?.type == 'COUNTING') {
              out 'in'
              out 'count'
            }
          }
          out ','
        }

        def cur = allVerbs[i++]
        if (cur) {
          mainVerbs++
          boolean last = i >= allVerbs.size()
          def shouldHaveSubject = sitFrame.s('imperative') ? cur.f('arg1') != null : !hasSubject || bg != null
          if (last) {
            clause(cur, shouldHaveSubject, topLevel)
          } else {
            clauseInner(cur, shouldHaveSubject, topLevel)
          }
        }
        def next = allVerbs[i]
        if (next) {
          if (cur.type == 'GO' && next.type == 'ASK') {
            out 'to'
            out 'consult'
            np(allVerbs[1].f('arg2'), false)
            out 'on'
            np(allVerbs[1].f('topic'), false)
            i++
          }
        }
      }


      if (butSit && chart.__assignments[butSit]) {
        def butFrame = butSit.frame(chart)
        out(butFrame.f('opinion_of') ? ';' : ',')
        out 'but'
        def generator = new SituationGenerator(chart, butSit, false)
        generator.hasSubject = butFrame.s('clauseEllipsis') != 'true'
        generator.sentence(false)
      }

      if (sitFrame.s('dot') == 'true') {
        out '.'
      } else if (sitFrame.f('questioned') && topLevel) {
        out '?'
      }
    }

    private String opinionOf(Frame opinion, String prevOpinion) {
      if (opinion.f('member')) {
        groovy.lang.Reference prev = [null] //todo alex <String>
        seq(opinion) {
          String p = prev.get()
          String next = ((SituationGenerator) this).opinionOf(it, p)
          prev.set(next)
        }
        return true
      }

      if (opinion.type == 'OPINION') {
        if (prevOpinion != 'OPINION' || opinion.f('distinguished_in')) {
          out 'in'
        }
        np(opinion, false)
      }
      else if (opinion.type == 'WORDS') {
        out 'according'
        out 'to'
        np(opinion.f('author'), false)
      }
      return opinion.type
    }

    private String aux(Frame verb, Frame subj, boolean imperative) {
      if (imperative && subj) {
        if (subj.type == 'WE') {
          return past ? 'were': 'are'
        }
        return past ? 'was': 'am'
      }
      def questioned = sitFrame.f('questioned')
      if (questioned) {
        return past ? 'did' : 'do'
      }

      return null
    }

    private Frame clauseInner(Frame verb, boolean shouldHaveSubject, boolean topLevel) {
      assert verb
      def subj = verb.f('arg1')

      def questioned = sitFrame.f('questioned')
      boolean imperative = sitFrame.s('imperative') == 'true'

      if (questioned) {
        out 'what'
      }

      if (topLevel && subj) {
        def aux = aux(verb, subj, imperative)
        if (aux) {
          out aux
        }
      }

      if (shouldHaveSubject) {
        assert subj: "$verb; " + situation.presentable(chart)
        if (hasSubject) {
          out 'she' //todo infer
        } else if (subj != questioned) {
          np(subj, true)
        }
        hasSubject = true
      }

      if (sitFrame.s('clauseEllipsis')) {
        out(past ? 'did' : 'does')
        return
      }

      if (verb.s('manner') == 'SUDDENLY') {
        out 'suddenly'
      }
      def type = verb.type
      if (type == 'SMILE') {
        out 'gave'
        out 'us'
        out 'a'
        if (verb.s('manner') == 'SADLY') {
          out 'sad'
        }
        out 'smile'
      }
      else if (type == 'COME_SCALARLY') {
        out(sitFrame.s('time') == 'PAST' ? 'went' : 'comes')
        def anchor = verb.f('anchor')
        if (verb.s('order') == 'EARLIER') {
          if (anchor) {
            out 'before'
            np(anchor, false)
          } else {
            out 'first'
          }
        } else if (verb.s('order') == 'AFTER') {
          if (anchor) {
            out 'after'
            np(anchor, false)
          } else {
            out 'next'
          }
        }
      }
      else if (type == 'SEEM') {
        out 'were'
        def theme = verb.f('theme')
        if (theme?.type == 'LACK') {
          out 'void'
          out 'of'
          np(theme.f('arg2'), false)
        } else if (theme?.type == 'MEANINGLESS') {
          out 'meaningless'
        }
      }
      else if (type != 'ALSO') {
        if (imperative) {
          if (subj) {
            out 'supposed'
          }
          out 'to'
        }

        out(mainVerb(verb))
      }

      def dobj = verb.f('arg2')
      if (dobj && dobj != questioned) {
        np(dobj, false, dobj.s('number') == null)
      }

      def mood = verb.f('mood')
      def cheerfully = mood?.type == 'JOY' && !mood.s('size')
      def simpleMood = cheerfully && chart.earlier(mood, 'type', verb, 'type')
      if (simpleMood) {
        out 'cheerfully'
      }

      def io = verb.type == 'HAPPEN' ? verb.f('experiencer') :
        verb.type in ['GO_OFF', 'GO'] ? verb.f('goal') :
          verb.type == 'ASK' ? verb.f('topic') : null
      if (io) {
        out(verb.type == 'ASK' ? 'on' : "to")
        np(io, false)
      }

      if (verb.type in ['TAKE_OUT', 'RUN_OUT']) {
        out 'out'
        out 'of'
        np(verb.f('source'), false)
      }

      if (mood && !simpleMood) {
        if (cheerfully) {
          out 'cheerfully'
        } else {
          out 'with'
          np(mood, false)
        }
      }


      if (verb.type == 'HAPPEN') {
        out "today"
      }
      if (verb.s('anchor') == 'AGAIN') {
        out 'again'
      }

      def question = verb.f('question')
      if (question?.var instanceof Situation) {
        def questSituation = (Situation) question.var
        def think = chart.frames(questSituation).find { it.type == 'THINK' }
        if (think) {
          handled << questSituation
          out 'about'
          def exp = think.f('arg1')
          if (exp?.type == 'THEY') {
            out 'their'
          }
          out 'opinion'
          out 'on'
          np(think.f('topic'), false)
        } else {
          new SituationGenerator(chart, questSituation, false).sentence(false)
        }
      }

      def theme = verb.f('theme')
      if (theme?.var instanceof Situation) {
        if (!theme.f('questioned')) {
          out ","
          out "that"
        }

        new SituationGenerator(chart, (Situation) theme.var, false).sentence(false)
      } else if (theme && verb.type in ['CAN', 'ALSO']) {
        clause(theme, false, false)
      } else if (theme && verb.type == 'BEGIN') {
        out(theme.type == 'TO_WATER' ? 'watering' : theme.type == 'DANCE' ? 'dancing' : theme.type == 'ARGUE' ? 'arguing' : 'counting')
        def dObj = theme.f('arg2')
        if (dObj) {
          np(dObj, false)
        }
      }
      return subj
    }

    private void clause(Frame verb, boolean shouldHaveSubject, boolean topLevel) {
      Frame subj = clauseInner(verb, shouldHaveSubject, topLevel)

      clauseEnd()

      def variants = subj?.f('variants')
      if (variants) {
        out '-'
        npseq(variants)
      }

      if (verb.type == 'SAY') {
        out ':'
        def message = (Situation) verb.f('message').var
        if (chart.__assignments[message]) {
          out '\n-'
          new SituationGenerator(chart, message, true).sentence(true)
        }
      }
    }

    private String mainVerb(Frame verb) {
      def type = verb.type
      def verbs = [HAPPEN: 'happened', FORGET: 'forgot', GO_OFF: 'went',
              ASK: (verb.f('topic')?.type == 'PREDICAMENT' ? 'consulted' : (past ? 'asked' : 'ask')),
              DISCOVER: 'discovered', CAN: "couldn't", RECALL: 'recall', TAKE_OUT: "took", SAY: 'said',
              REMEMBER: (past ? 'remembered' : 'remember'), GO: (past ? 'went' : 'goes'),
              RUN_OUT: 'ran', THANK: 'thanked',
              GET_SAD: 'got sad', DO: 'do', NEED:'need',
              BEGIN:'started', STOP:'stopped'
      ]
      return verbs[type]
    }

    def clauseEnd() {
      def elaboration = sitFrame.f('elaboration')
      if (elaboration?.var instanceof Situation) {
        def commaStyle = chart.frames(situation).find { it.type == 'HAPPEN'}
        out(commaStyle ? ',' : ":")
        new SituationGenerator(chart, (Situation)elaboration.var, !commaStyle).sentence(false)
      }

      def condition = sitFrame.f('condition')
      if (condition) {
        out ','
        out 'only'
        out 'if'
        def content = condition.f('whenCondition') ?: condition.f('ifCondition')
        assert content : chart.presentable()
        new SituationGenerator(chart, (Situation) content.var, false).sentence(false)
      }

      def condComp = sitFrame.f('ifCondition') ?: sitFrame.f('whenCondition')
      if (condComp) {
        out ','
        out(sitFrame.f('ifCondition') ? 'if' : 'when')
        new SituationGenerator(chart, (Situation) condComp.var, false).sentence(false)
      }

      def reason = sitFrame.f('reason')
      if (reason) {
        out 'because'
        new SituationGenerator(chart, (Situation) reason.var, false).sentence(false)
      }
    }


    def npseq(Frame _seq) {
      seq(_seq) { np(it, true, false) }
    }

    def seq(Frame seq, Function1<Frame, Void> action) {
      def members = seq.allAssignments('member')
      members.eachWithIndex { Assignment<Frame> var, int index ->
        if (index == members.size() - 1) out seq.s('conj')
        else if (index > 0) out ','
        action((Frame) var.value)
      }

    }

    private def np(Frame n, boolean nom, boolean mayHaveDeterminer = true) {
      if (!n) {
        out '???'
        return
      }

      if (n.type == 'ME') {
        out (nom ? 'I' : "me")
        return
      }
      if (n.type == 'SHE') {
        out (nom ? 'she' : "her")
        return
      }
      if (n.type == 'WE') {
        out (nom ? 'we' : "us")
        if (n.s('quantifier') == 'ALL') {
          out 'all'
        }
        return
      }
      if (n.type == 'THEY') {
        out (nom ? 'they' : "them")
        return
      }

      if (n == sitFrame.f('questioned')) { //todo a type for seq frames
        out 'what'
        return
      }

      if (n.type == 'NEXT') {
        out 'what comes next' //todo a non-hacky model for 'what comes next'
        return
      }

      if (n.s('number') == 'true' && !mayHaveDeterminer) {
        out n.type
        return
      }

      if (n.f('member')) {
        npseq(n)
        return
      }

      if (mayHaveDeterminer) {
        determiner(n, n.s('property') == 'AMAZING')
      }
      if (n.s('quality') == 'HUMBLE') {
        out "humble"
      }
      if (n.s('property') == 'AMAZING') {
        out "amazing"
      }
      if (n.s('kind') == 'COMMERCIAL') {
        out "commercial"
      }
      if (n.s('size') == 'LITTLE') {
        out "small"
      }
      if (n.s('size') == 'BIG') {
        out(n.type == 'GARDEN' ? 'big' : "great")
      }
      def criterion = n.f('criterion')
      if (criterion) {
        out noun(criterion.type)
      }

      if (n.type == 'SHOP') {
        if (n.s('name') == 'гастроном') {
          out 'grocery'
        }
        out('store')
      } else if (n.type == 'GARDEN') {
        out(n.s('name') == 'Летний сад' ? 'Summer Garden' : 'garden')
      }
      else if (n.s('number') == 'true') {
        out n.type
      }
      else {
        out noun(n.type)
      }

      def location = n.f('location')
      if (location && n != sitFrame.f('copulaTopic')) {
        out 'on'
        np(location, false)
      }

      if (n.type == 'CORNER') {
        def arg1 = n.f('arg1')
        if (arg1) {
          out 'of'
          seq(arg1) { out it.s('name') == 'знаменская' ? 'Znamenskaya' : 'Basseinaya' }
          out 'streets'
        }
      }
      if (n.type == 'OPINION') {
        def arg1 = n.f('arg1')
        if (arg1 && arg1.type != 'ME' && arg1.type != 'THEY') {
          out 'of'
          np(arg1, false)
        }
      }

      def rel = n.f('relative')
      if (rel?.var instanceof Situation) {
        out ','
        out 'the'
        out 'one'
        new SituationGenerator(chart, (Situation) rel.var, false).sentence(false)

      }
    }

    private void determiner(Frame n, boolean an) {
      def det = n.s('determiner')
      if (det == 'THIS') {
        out 'this'
        return
      }
      if (det == 'ANY') {
        out 'any'
        return
      }


      if (n.type in ['AMAZE', 'PREDICAMENT', 'NEIGHBOURS', 'MOUTH', 'NOSE', 'JAW'] && n.f('arg1')) {
        possessive(n.f('arg1'))
        return
      }
      if (n.type in ['OPINION'] && n.f('arg1')?.type in ['ME', 'THEY']) {
        possessive(n.f('arg1'))
        return
      }
      if (n.type == 'WORDS' && n.f('author')) {
        possessive(n.f('author'))
        return
      }


      if (n.type in ['JOY', 'RELIEF', 'MEANING', 'MONEY', 'TREES', 'SOME', 'OTHERS']) { //abstract
        return
      }

      if (n.type == 'OPINION' && n.f('arg1')?.type == 'OTHERS') {
        return //a hack
      }

      if (n.type in ['5', '6', '7']) { out 'a'; return }
      if (n.type == '8') { out 'an'; return }

      if (n.s('given') != 'false') {
        out 'the'
        return
      }

      out(an ? "an" : "a")
    }

    private void possessive(Frame poss) {
      if (poss.f('member')) {
        seq(poss) { possessive(it) }
        return
      }

      if (poss.type == 'ME') out 'my'
      else if (poss.type == 'WE') out 'our'
      else if (poss.type == 'THEY') out 'their'
      else if (poss.type == 'SHE') out 'her'
      else {
        np(poss, false, false)
        out "'s"
      }
    }

  }

  private String noun(String type) {
    switch (type) {
      case 'THING': return 'thing'
      case 'NEIGHBOURS': return 'neighbors'
      case 'MATTER': return 'matter'
      case 'AMAZE': return 'amazement'
      case 'COUNTING': return 'counting'
      case 'ORDER': return 'order'
      case 'CASHIER': return 'cashier'
      case 'CORNER': return 'corner'
      case 'PREDICAMENT': return 'predicament'
      case 'HAMMER': return 'hammer'
      case 'MOUTH': return 'mouth'
      case 'NOSE': return 'nose'
      case 'JAW': return 'jaw'
      case '5': return 'five'
      case '6': return 'six'
      case '7': return 'seven'
      case '8': return 'eight'
      case 'JOY': return 'joy'
      case 'RELIEF': return 'relief'
      case 'WORDS': return 'words'
      case 'MEANING': return 'meaning'
      case 'TREES': return 'trees'
      case 'MONEY': return 'money'
      case 'OPINION': return 'opinion'
      case 'SOME': return 'some'
      case 'OTHERS': return 'others'
      case 'WORK': return 'work'
      default: return type
    }

  }

}
