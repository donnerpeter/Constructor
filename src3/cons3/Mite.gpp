package cons3

/**
 * @author peter
 */
class Mite {
  final Construction cxt
  final FLinkedMap contents
  final FList<Pair<Variable, Variable>> unifications
  final Mite src1, src2

  Mite(Map contents, Construction cxt, FList<Pair<Variable, Variable>> unifications = FList.emptyList, Mite src1 = null, Mite src2 = null) {
    this.cxt = cxt
    this.contents = contents instanceof FLinkedMap ? contents : FLinkedMap.fromMap(contents)
    this.unifications = unifications
    this.src1 = src1
    this.src2 = src2
  }

  public static Map unify(Map oldArgs, Map newArgs) {
    def args = new HashMap()
    if (oldArgs) args.putAll(oldArgs)
    if (newArgs) {
      for (key in newArgs.keySet()) {
        if (oldArgs[key] instanceof Variable && !((Variable) oldArgs[key]).light) {
          continue
        }
        args[key] = newArgs[key]
      }
    }

    Collection xor = mergeXor(oldArgs, newArgs)
    if (xor) {
      args.xor = xor
    }

    return args
  }

  static Collection mergeXor(Map oldArgs, Map newArgs) {
    Set xor1 = oldArgs?.xor ?: Collections.emptySet()
    Set xor2 = newArgs?.xor ?: Collections.emptySet()
    if (!xor1 && !xor2) {
      return null
    }

    def xor = new LinkedHashSet()
    xor.addAll xor1
    xor.addAll xor2
    return xor
  }

  static boolean overwrites(Map before, Map newArgs) {
    if (before == null) {
      return false
    }
    for (arg in before.keySet().intersect(newArgs.keySet())) {
      if (arg == 'xor') continue

      def val1 = before[arg]
      def val2 = newArgs[arg]
      if (val1 != val2 && val1 != null && val2 != null && !areUnifiableVars(val1, val2)) {
        return true
      }
    }
    return false
  }

  private static boolean areUnifiableVars(val1, val2) {
    return val1 != val2 && val1 instanceof Variable && val2 instanceof Variable && (val1.light || val2.light) && val1.base != val2.base
  }

  @Override
  public String toString() {
    return "$cxt($contents)" +
            (unifications ? unifications.collect { "<$it.first=$it.second>" }.join("") : '')
  }

  boolean isSimilarTo(Mite another) {
    return cxt == another.cxt && contents.keySet() - 'xor' == another.contents.keySet() - 'xor'
  }

  Mite findSimilar(List<Mite> mites) {
    mites.find { isSimilarTo(it) }
  }

  Mite unify(Mite another) {
    def before = contents
    def newArgs = another.contents
    assert !overwrites(before, newArgs)
    def newUnifications = unifications.prependAll(another.unifications)
    for (arg in before.keySet().intersect(newArgs.keySet())) {
      def val1 = before[arg]
      def val2 = newArgs[arg]
      if (areUnifiableVars(val1, val2)) {
        def pair = new Pair(val1, val2)
        if (!(pair in newUnifications)) {
          newUnifications = newUnifications.prepend(pair)
        }
      }
    }

    return new Mite(unify(before, newArgs), cxt, newUnifications, this, another)
  }

  LinkedHashSet<Mite> getPrimaries() {
    if (atom) {
      return [this]
    }
    return src1.primaries + src2.primaries
  }

  boolean isAtom() {
    src1 == null
  }

  boolean isPartOf(Mite another) {
    return another.cxt == cxt && another.primaries.containsAll(primaries)
  }

  List<Mite> unifyWherePossible(Node state) {
    return unifyWherePossible(state.visibleMites[cxt], false, true)
  }
  List<Mite> unifyWherePossible(ParsingState state) {
    return unifyWherePossible(state.visibleMites[cxt], false, true)
  }

  List<Mite> unifyWherePossible(Collection<Mite> mites, boolean before = true, boolean includeSelf = false) {
    List<Mite> result = []
    if (includeSelf) {
      result << this
    }
    if (mites) {
      result.addAll mites.
              findAll { it.cxt == cxt && !overwrites(contents, it.contents) }.
              collect { before ? this.unify(it) : it.unify(this) }
    }
    return result
  }

  boolean isMissingHead() {
    return cxt.beingMissedAttr && !contents[cxt.beingMissedAttr] ||
           cxt.headAttr && (!contents[cxt.headAttr] || ((Variable) contents[cxt.headAttr]).light)
  }

  LinkedHashSet<Variable> allUnifiedWith(Variable var) {
    LinkedHashSet<Variable> result = [var.base]
    if (!var) return result

    for (pair in unifications) {
      if (pair.first.base == var.base) {
        result << pair.second.base
      }
      else if (pair.second.base == var.base) {
        result << pair.first.base
      }
    }
    result
  }

  Mite getLastAtom() {
    def mites = primaries as List<Mite>
    return mites[mites.size() - 1]
  }

  Mite getFirstAtom() {
    return primaries.iterator().next()
  }
}
