package cons3

import groovy.transform.TupleConstructor

/**
 * @author peter
 */
@TupleConstructor
class Node {
  static final Node EMPTY = new Node(Collections.emptyList(), Collections.emptySet())
  final List<Mite> ownMites
  final Set<Mite> _inhibited
  final Node before
  final ParsingState prevState

  Node findNode(Mite mite) {
    if (mite in ownMites) {
      return this
    }
    return before?.findNode(mite)
  }

  boolean isMoreRecentThan(Node node) {
    return node == this || before?.isMoreRecentThan(node)
  }

  LinkedHashSet<Mite> getFront() {
    if (ownMites) return ownMites as LinkedHashSet
    if (!before) return []
    return before.front - _inhibited
  }

}
