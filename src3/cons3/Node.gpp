package cons3

import groovy.transform.TupleConstructor

/**
 * @author peter
 */
@TupleConstructor
class Node {
  static final Node EMPTY = new Node(Collections.emptyList(), Collections.emptySet())
  final List<Mite> ownMites
  final Set<Mite> _inhibited
  final Node before
  final ParsingState prevState
  private Map<Construction, List<Mite>> cache

  Map<Construction, List<Mite>> getAllMites() {
    Map<Construction, List<Mite>> result = cache
    if (result != null) {
      return result
    }

    result = [:]
    LinkedHashSet<Mite> toExclude = []
    for (k in ownMites) {
      result[k.cxt] = (result[k.cxt] ?: []) + [k]
      Interceptor interceptor = k.contents.interceptor ?: new Interceptor()
      toExclude.addAll(interceptor.getHiddenMites(k, prevState))
    }
    toExclude.addAll(_inhibited)

    before?.getAllMites()?.each { c, oldMites ->
      result[c] = oldMites + (result[c] ?: [])
    }

    for (mite in toExclude) {
      def ms = result[mite.cxt]
      ms?.remove(mite)
      if (!ms) {
        result.remove(mite.cxt)
      }
    }
    cache = result
    return result
  }

  Node findNode(Mite mite) {
    if (mite in ownMites) {
      return this
    }
    return before.findNode(mite)
  }

  boolean isMoreRecentThan(Node node) {
    return node == this || before?.isMoreRecentThan(node)
  }

  LinkedHashSet<Mite> getFront() {
    if (ownMites) return ownMites as LinkedHashSet
    if (!before) return []
    return before.front - _inhibited
  }

}
