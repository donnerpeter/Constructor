package cons3

import groovy.transform.TupleConstructor

/**
 * @author peter
 */
@TupleConstructor
class Node {
  static final Node EMPTY = new Node(Collections.emptyList(), Collections.emptySet())
  final List<Mite> ownMites
  final Set<Mite> _inhibited
  final Node before
  final boolean sameLevel
  private final Map<Boolean, Map<Construction, List<Mite>>> cache = [:]

  Map<Construction, List<Mite>> getAllMites(boolean allowHeads) {
    Map<Construction, List<Mite>> result = cache[allowHeads]
    if (result != null) {
      return result
    }

    result = [:]
    for (k in ownMites) {
      if (!allowHeads && k.hasHead && k.primary) {
        continue
      }

      result[k.cxt] = (result[k.cxt] ?: []) + [k]
    }

    before?.getAllMites(!sameLevel || _inhibited)?.each { c, oldMites ->
      result[c] = oldMites + (result[c] ?: [])
    }

    for (mite in _inhibited) {
      def ms = result[mite.cxt]
      ms?.remove(mite)
      if (!ms) {
        result.remove(mite.cxt)
      }
    }
    cache[allowHeads] = result
    return result
  }

  Node findNode(Mite mite) {
    if (mite in ownMites) {
      return this
    }
    return before.findNode(mite)
  }
}
