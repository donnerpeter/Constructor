package cons3

import groovy.transform.TupleConstructor

/**
 * @author peter
 */
@TupleConstructor
class Node {
  static final Node EMPTY = new Node(Collections.emptyList(), Collections.emptySet())
  final List<Mite> ownMites
  final Set<Mite> _inhibited
  final Node before
  final ParsingState prevState
  private Map<Construction, List<Mite>> cache

  Map<Construction, List<Mite>> getVisibleMites() {
    Map<Construction, List<Mite>> result = cache
    if (result != null) {
      return result
    }

    result = [:]
    for (k in ownMites) {
      result[k.cxt] = (result[k.cxt] ?: []) + [k]
    }

    if (prevState) {
      Screen screen = new Screen(prevState, prevState.miteList as LinkedHashSet<Mite>)
      for (k in ownMites) {
        screen = k.cxt.displayAction(k, screen)
      }
      screen = screen.hide { it in _inhibited}
      for (k in screen.visibleMites) {
        result[k.cxt] = (([k] + (result[k.cxt] ?: [])) as LinkedHashSet) as List
      }
    }

    cache = result
    return result
  }

  Node findNode(Mite mite) {
    if (mite in ownMites) {
      return this
    }
    return before?.findNode(mite)
  }

  boolean isMoreRecentThan(Node node) {
    return node == this || before?.isMoreRecentThan(node)
  }

  LinkedHashSet<Mite> getFront() {
    if (ownMites) return ownMites as LinkedHashSet
    if (!before) return []
    return before.front - _inhibited
  }

}
