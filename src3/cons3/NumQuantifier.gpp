package cons3

/**
 * @author peter
 */
class NumQuantifier implements Interceptor, RussianConstructions {

  ParsingState intercept(Map<Construction, Map> contribution, ParsingState state, Function2<Map<Construction, Map>, ParsingState, ParsingState> base) {
    if (!state.constructions[numQuantifier]?.hasNoun && state.constructions[numQuantifier].num) {
      Update update = new Update([:])
      for (c in contribution.keySet()) {
        if (c == numQuantifier) continue

        def modify = c == state.constructions[numQuantifier].innerCase
        if (modify) {
          def hasNoun = contribution[c].hasNoun
          update = update.addCxt(contribution[c] - [hasNoun:hasNoun], acc)
          update = update.addCxt(dativePart, acc:contribution[c].noun).addCxt(numQuantifier, hasNoun:hasNoun)
        } else {
          update = update.addCxt(contribution[c], c)
        }
      }
      return base(update.map.reverse(), state)
    }
    return base(contribution, state)
  }

  Map<String, Object> getArgs(Construction c, ParsingState state) {
    if (c == state.constructions[numQuantifier].innerCase && state.constructions[acc]) {
      return state.constructions[acc] + [hasNoun:state.constructions[numQuantifier]?.hasNoun]
    }

    null
  }

}

