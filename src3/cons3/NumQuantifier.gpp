package cons3

/**
 * @author peter
 */
class NumQuantifier implements Interceptor, RussianConstructions {

  ParsingState intercept(List<Mite> contribution, ParsingState state, Function2<List<Mite>, ParsingState, ParsingState> base) {
    if (!state.constructions[numQuantifier]?.hasNoun && state.constructions[numQuantifier].num) {
      Update update = new Update()
      for (mite in contribution) {
        def c = mite.cxt
        if (c == numQuantifier) continue

        def modify = c == state.constructions[numQuantifier].innerCase
        if (modify) {
          def hasNoun = mite.contents.hasNoun
          update = update.addCxt(mite.contents - [hasNoun:hasNoun], acc)
          update = update.addCxt(dativePart, acc:mite.contents.noun).addCxt(numQuantifier, hasNoun:hasNoun)
        } else {
          update = update.addMites(mite)
        }
      }
      return base(update.mites.reverse(), state)
    }
    return base(contribution, state)
  }

  Map<String, Object> getArgs(Construction c, ParsingState state) {
    if (c == state.constructions[numQuantifier].innerCase && state.constructions[acc]) {
      return state.constructions[acc] + [hasNoun:state.constructions[numQuantifier]?.hasNoun]
    }

    null
  }

}

