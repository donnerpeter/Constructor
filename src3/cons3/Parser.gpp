package cons3

/**
 * @author peter
 */
class Parser {

  Chart parse(String text) {
    def chart = new Chart()
    ParsingState state = [chart.newSituation()]
    def tokenizer = new StringTokenizer(text, """ '":,.""", true)
    for (String w in tokenizer) {
      if (w != ' ') {
        state = handleWord(w, state)
      }
    }
    return chart
  }

  static class ParsingState {
    final Frame lastFrame
    final Situation situation
    final Frame subject

    ParsingState(Situation situation) {
      this(situation, null, null)
    }

    private ParsingState(Situation situation, Frame lastFrame, Frame subject) {
      assert situation
      this.situation = situation
      this.lastFrame = lastFrame
      this.subject = subject
    }

    ParsingState withFrame(Frame frame) {
      [situation, frame, subject]
    }

    ParsingState withSituation(Situation situation) {
      [situation, null, null]
    }

    ParsingState withSubject(Frame subject) {
      [situation, lastFrame, subject]
    }
  }

  ParsingState handleWord(String word, ParsingState state) {
    def situation = state.situation
    switch (word) {
      case "Удивительный":
        def frame = situation.newFrame()
        situation.assign(frame, "property", "AMAZING", true)
        return state.withFrame(frame)
      case "случай":
        situation.assign(state.lastFrame, "type", "THING", true)
        return state
      case "случился":
        def verb = situation.newFrame()
        situation.assign(verb, "type", "HAPPEN", true)
        situation.assign(situation, "time", "PAST", false)
        situation.assign(verb, "theme", state.lastFrame, true)
        return state.withFrame(verb)
      case "со":
        return state
      case "мной":
        def noun = situation.newFrame()
        situation.assign(noun, "type", "ME", false)
        situation.assign(state.lastFrame, "experiencer", noun, true)
        return state.withFrame(noun)
      case ":":
        def elaboration = situation.chart.newSituation()
        situation.assign(situation, 'elaboration', elaboration, true)
        return state.withSituation(elaboration)
      case "я":
        def noun = situation.newFrame()
        situation.assign(noun, "type", "ME", false)
        return state.withFrame(noun)
      case "вдруг":
        def verb = situation.newFrame()
        situation.assign(verb, "manner", "SUDDENLY", true)
        situation.assign(verb, "experiencer", state.lastFrame, true)
        return state.withFrame(verb)
      case "забыл":
        def verb = state.lastFrame
        situation.assign(verb, "type", "FORGET", true)
        situation.assign(situation, "time", "PAST", false)
        return state.withFrame(verb)
      case ",":
        def question = situation.chart.newSituation()
        situation.assign(state.lastFrame, 'theme', question, true)
        return state.withSituation(question)
      case "что":
        def what = situation.newFrame()
        situation.assign(situation, "questioned", what, true)
        return state.withFrame(what).withSubject(what)
      case "идет":
        def verb = situation.newFrame()
        situation.assign(verb, "type", "COME_SCALARLY", false)
        situation.assign(situation, "time", "PRESENT", false)
        situation.assign(verb, "theme", state.lastFrame, false)
        return state.withFrame(verb)
      case "раньше":
        situation.assign(state.lastFrame, 'order', 'EARLIER', false)
        return state
      case "-":
        return state.withFrame(state.subject)
      case "7":
      case "8":
        situation.assign(state.lastFrame, 'variant', word, false)
        return state
    }
    return state
  }

}