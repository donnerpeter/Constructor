package cons3

import static cons3.Construction.cxt
import static cons3.RussianConstructions.*

/**
 * @author peter
 */
class Parser { //todo alex implements cons3.RussianConstructions
  public static final ArrayList<Construction> importantForSimilarity = [nom, acc, gen, dat, instr, prep, possessive, parenthetical, nounGen, comeScalarly, poDat]
  String log = ""

  Chart parse(String text) {
    ParsingState state = new ParsingState()
    def tokenizer = new StringTokenizer(text, """ '":,.?!""", true)
    for (String w in tokenizer) {
      if (w != ' ') {
        state = handleWord(w.toLowerCase(), state)
        log += w + "\n"
        for (k in state.constructions.keySet()) {
          log += "  ${k in state.active ? '*' : ' '}$k -> ${state.constructions[k]}\n"
        }
      }
    }
    return state.chart
  }

  ParsingState conjWrap(Map<Construction, Map> constructions, ParsingState state) {
    return state.apply(constructions)
  }


  ParsingState handleWord(String word, ParsingState state) {
    Tokens t = new Tokens()
    if (Util.parseNumber(word) != null) { //todo generic noun treatment for numbers
      Variable noun = !state[doGen]?.hasNoun && state[doGen]?.noun ? state[doGen].noun : state.newVariable()
      def num = new Variable()

      def sem = numberTypeCxt(noun, word)

      List<Construction> cases = []
      if (!(state[preposition]?.prep in ['posle', 'ranshe', 'до'])) {
        cases << nom
      }
      if (state[preposition]?.prep == 'posle') {
        cases << posleGen
      } else if (state[preposition]?.prep == 'ranshe') {
        cases << ransheGen
      } else if (state[preposition]?.prep == 'до') {
        cases << doGen
      } else {
        cases << gen
      }
      cases << acc

      def qv = state[questionVariants]
      if (qv) {
        def seqVar = state.newVariable()
        state = state.apply((questionVariants):[seq:seqVar], (nom):[:])
        def update = new Update((sem):[var:noun])
        for (caze in cases) {
          update = SeqInterceptor.joinSeq(state, caze, seqVar, noun: noun, [hasNoun: true, xor: t.a], 'noun', update)
        }
        state = update.apply(state)
      } else {
        state = conjWrap(cases.collectEntries { [it, [noun:noun, hasNoun:true, xor:t.ace]] } +
                                 [(sem):[var:noun, xor:t.bd]] +
                                 [(numQuantifier):[num: num, xor:t.bc, interceptor:new NumQuantifier(), prev:state],
                                         (numberTypeCxt(num, word)):[xor:t.de, var:num]],
                         state)
      }

      return state
    }

    if (state[quotedName]?.started && !state[quotedName].name) {
      state = state.apply(quotedName, name:word)
    }

    def situation = state.situation
    switch (word) {
      case "удивительный":
        def noun = state.newVariable()
        return state.apply(adjective, nounFrame:noun, rel:'property', val:'AMAZING').apply(nom, noun:noun)
      case "знаменской": // todo a unified treatment for street names
      case "бассейной":
        def noun = state.newVariable()
        def init = { ParsingState it -> it.assign(noun, 'type', 'STREET') }
        state = conjWrap(state, (gen):[noun:noun, init:init], (adjective):[nounFrame:noun, rel:'name', val:word[0..-3]+"ая", init:init])
        return state
      case "коммерческий":
        def noun = state[acc]?.noun ?: state.newVariable()
        return state.apply(adjective, nounFrame:noun, rel:'kind', val:'COMMERCIAL').apply(acc, noun:noun)
      case "маленький":
        def noun = state[acc]?.noun ?: state.newVariable()
        return state.apply(adjective, nounFrame:noun, rel:'size', val:'LITTLE').apply(acc, noun:noun)
      case "летний":
        def noun = state[acc]?.noun ?: state.newVariable()
        return state.apply((adjective):[nounFrame:noun, rel:'timeAnchor', val:'SUMMER', xor:t.a], (acc):[noun:noun], (summerGarden):[summer:true, xor:t.a])
      case "какой-то":
        def noun = state.newVariable()
        return state.apply((adjective):[nounFrame:noun, rel:'determiner', val:'SOME'], (nom):[noun:noun])
      case "большим":
        def noun = state[instr]?.noun ?: state.newVariable()
        return state.apply(adjective, nounFrame:noun, rel:'size', val:'BIG').apply(instr, noun:noun)
      case "большой":
        def noun = state[instr]?.noun ?: state[acc]?.noun ?: state.newVariable()
        return state.apply((adjective):[nounFrame:noun, rel:'size', val:'BIG'], (instr):[noun:noun], (acc):[noun:noun])
      case "нашем":
        def we = state.newVariable()
        def possHead = state[oPrep]?.noun ?: state.newVariable()
        state = state.assign(we, 'type', 'WE')
        return state.apply(possessive, possessor:we, head:possHead)
      case "этому":
        def noun = state[poDat]?.noun ?: state.newVariable()
        return state.apply(adjective, nounFrame:noun, rel:'determiner', val:'THIS').apply(poDat, noun:noun)
      case "всякого":
        def noun = state[gen]?.noun ?: state.newVariable()
        return state.apply(adjective, nounFrame:noun, rel:'determiner', val:'ANY').apply(gen, noun:noun)
      case "скромному":
        def noun = state[poDat]?.noun ?: state.newVariable()
        return state.apply(adjective, nounFrame:noun, rel:'quality', val:'HUMBLE').apply(poDat, noun:noun)
      case "том":
        def noun = state[prep]?.noun ?: state.newVariable()
        return state.apply(adjective, nounFrame:noun, rel:'determiner', val:'THAT').apply(prep, noun:noun)
      case "случай": return noun(state, nom, 'THING') //todo случай=CASE or THING
      case "случае":
        def noun = state[prep]?.noun ?: state.newVariable()
        state = state.apply(prep, noun: noun, hasNoun:true) { ParsingState it ->it.assign(noun, 'type', 'CASE') }
        return state.apply(conditionComp, head:noun) //todo one noun frame - several cases
      case "удивление": return noun(state, nom, 'AMAZE')
      case "поводу": return noun(state, dat, 'MATTER')
      case "недоумении": return noun(state, prep, 'PREDICAMENT')
      case "рта": return noun(state, gen, 'MOUTH')
      case "смысла": return noun(state, gen, 'MEANING')
      case "молоточек": return noun(state, acc, 'HAMMER')
      case "радостью": return noun(state, instr, 'JOY')
      case "облегчением": return noun(state, instr, 'RELIEF')
      case "улицы": return noun(state, gen, 'STREET')
      case "скамейки": return noun(state, gen, 'BENCH')
      case "ребенок": return noun(state, nom, 'CHILD')
      case "углу":  //todo plain noun
        def noun = state[prep]?.noun ?: state.newVariable()
        state = state.apply(prep, noun: noun, hasNoun:true) {ParsingState it -> it.assign(noun, 'type', 'CORNER') }
        return state.apply(gen, head:noun) //todo one noun frame - several cases
      case "магазин":
        def noun = state[acc]?.noun ?: state.newVariable()
        def init = {ParsingState it -> it.assign(noun, 'type', 'SHOP') }
        Update update = new Update([:])
        if (!state[preposition]?.hasNoun) {
          update = update.addCxt(nom, noun:noun, hasNoun:true, init:init, xor:t.a)
        }
        update = update.addCxt(acc, noun:noun, hasNoun:true, init:init, xor:t.a)
        update = update.addCxt(naPrep, head:noun)
        update = update.addCxt(quotedName, noun:noun)
        update = update.addCxt(relativeClause, noun:noun, save:state)
        return update.apply(state.satisfied(relativeClause))
      case "сад":
        def noun = state[acc]?.noun ?: state.newVariable()
        def init = {ParsingState it -> it.assign(noun, 'type', 'GARDEN') }
        state = state.apply((nom):[noun:noun, hasNoun:true, init:init, xor:t.a], (acc):[noun:noun, hasNoun:true, init:init, xor:t.a], (summerGarden):[garden:noun])
        state = state.apply(naPrep, head:noun)
        state = state.satisfied(relativeClause).apply(relativeClause, noun:noun, save:state)
        return state //todo one noun frame - several cases
      case "сада": return noun(state, gen, 'GARDEN')
      case "магазина":
        def noun = state[gen]?.noun ?: state.newVariable()
        state = state.apply(gen, noun: noun, hasNoun:true) {ParsingState it -> it.assign(noun, 'type', 'SHOP') }
        state = state.apply(naPrep, head:noun)
        state = state.apply(quotedName, noun:noun).satisfied(relativeClause).apply(relativeClause, noun:noun, save:state)
        return state //todo one noun frame - several cases
      case "мнению":
        if (state.situation.frame(state.chart).f('opinion_of') && !state[seq]?.conj) {
          def next = new Situation()
          state = state.assign(situation, 'but', next).withSituation(next).apply(prevHistory, history:state)
        }
        def noun = state[poDat]?.noun && !state[poDat]?.hasNoun ? state[poDat].noun : state.newVariable()
        state = state.assign(noun, 'type', 'OPINION')
        return conjWrap(state, (nounGen):[head:noun], (possessive):[head:noun], (poDat):[noun:noun, hasNoun:true],
                           (parenthetical):[:]) // todo common constructions in по-моему & по моему мнению
      case "словам":
        def noun = state[poDat]?.noun ?: state.newVariable()
        def init = {ParsingState it -> it.assign(noun, 'type', 'WORDS') }
        state = state.apply((poDat):[noun:noun, hasNoun:true, init:init],
                            (nounGen):[head:noun, init:init],
                            (possessive):[head:noun, init:init])
        return state
      case "счастию":
        def noun = state[poDat]?.noun ?: state.newVariable()
        return state.assign(noun, 'type', 'LUCK').apply((poDat):[noun:noun, hasNoun:true])
      case "случился":
        Variable verb = state.newVariable()
        state = state.assign(verb, 'type', 'HAPPEN').assign(situation, 'time', 'PAST')
        return state.apply(sInstr, head:verb).apply(nom, head:verb)
      case 'со':
      case 'с':
        def noun = state.newVariable()
        return state.apply((preposition):[prep:'с', interceptor:new Preposition(state)], (sInstr):[noun:noun, xor:t.b], (sGen):[noun:noun, xor:t.b])
      case 'по':
        return state.inhibit(nounGen).apply((preposition):[prep:'по', interceptor:new Preposition(state)], (poDat):[noun:new Variable(), repeated:(state[seq] != null)])
      case 'о': return state.apply((preposition):[prep:'о', interceptor:new Preposition(state)], (oPrep):[noun:new Variable()])
      case 'к': return state.apply((preposition):[prep:'к', interceptor:new Preposition(state)], (kDat):[noun:new Variable()])
      case 'до':
        return state.apply((preposition):[prep:'до', interceptor:new Preposition(state)], (doGen):[noun:new Variable()])
      case 'в':
        def noun = state.newVariable()
        return state.apply((preposition):[prep:'в', interceptor:new Preposition(state)], (vAcc):[noun:noun, xor:t.b], (vPrep):[noun:noun, xor:t.b])
      case 'из':
      case 'изо': return state.apply((preposition):[prep:'из', interceptor:new Preposition(state)], (izGen):[noun:new Variable()])
      case 'на': return state.apply((preposition):[prep:'на', interceptor:new Preposition(state)], (naPrep):[noun:new Variable()])
      case "мной": return noun(state, instr, 'ME')
      case ":":
        if (state[directSpeech]) {
          //todo construction handling of elaboration and direct speech
          return state.apply(directSpeech, hasColon:true)
        }

        def elaboration = new Situation()
        state = state.assign(situation, 'elaboration', elaboration)
        return state.withSituation(elaboration)
      case "я": return noun(state, nom, 'ME')
      case "мне": return noun(state, dat, 'ME')
      case "мы": return noun(state, nom, 'WE')
      case "нам": return noun(state, dat, 'WE')
      case "мое":
        def me = state.newVariable()
        return conjWrap(state, (possessive):[possessor:me, init:{ ParsingState it ->it.assign(me, 'type', 'ME') }])
      case "моему":
        def me = state.newVariable()
        return conjWrap(state, (possessive):[possessor:me, init:{ ParsingState it ->it.assign(me, 'type', 'ME') }])
      case "и": return state.apply(seq, conj:'and', interceptor:new SeqInterceptor(state, 'and'))
      case "или": return state.apply(seq, conj:'or', interceptor:new SeqInterceptor(state, 'or'))
      case "а":
      case "но":
        def next = new Situation()
        return state.assign(situation, 'but', next).withSituation(next).apply(prevHistory, history:state)
      case "тут":
        return state.assign(situation, 'emphasis', 'true')
      case "потом":
        Update update = new Update((comeScalarly):[order:'AFTER', xor: t.a], (nom):[:])
        if (state[comeScalarly]?.order) {
          state = state.inhibit(comeScalarly)
        } else {
          update = update.addCxt(relTime, relTime:'AFTER', xor:t.a)
        }
        return conjWrap(update.map.reverse(), state)
      case "все":
        return state.assign(state[nom].noun, 'quantifier', 'ALL')
      case "дальше":
        def adv = state.newVariable()
        return state.apply((comeScalarly):[order:'AFTER', xor: t.a],  (advObj):[adv: adv, xor:t.a, init:{ ParsingState it ->it.assign(adv, 'type', 'NEXT') }])
      case "их":
        def they = state.newVariable()
        def init = {ParsingState st -> st.assign(they, 'type', 'THEY') }
        return conjWrap(state, (possessive):[possessor:they, init:init, xor:t.a], (acc):[noun:they, hasNoun:true, init:init, xor:t.a])
      case "они": return pronoun(state, nom, 'THEY')
      case "соседям": return noun(state, dat, 'NEIGHBOURS')
      case "кассиршу": return noun(state, acc, 'CASHIER')
      case "кассирша": return noun(state, nom, 'CASHIER') //todo кассир
      case "кассирши": return noun(state, nounGen, 'CASHIER')
      case "одних": return noun(state, nounGen, 'SOME')
      case "других": return noun(state, nounGen, 'OTHERS')
      case "деревья": return noun(state, acc, 'TREES')
      case "деньги": return noun(state, acc, 'MONEY')
      case "ее":
      case "её":
        def she = state.newVariable()
        def init = {ParsingState st -> st.assign(she, 'type', 'SHE') }
        return conjWrap(state, (possessive):[possessor:she, init:init], (acc):[noun:she, hasNoun:true, init:init])
      case "носом": return noun(state, instr, 'NOSE')
      case "пальцев": return noun(state, gen, 'FINGERS')
      case "пальца": return noun(state, gen, 'FINGERS')
      case "челюсти":
        Variable noun = state[gen]?.noun && !state[gen].hasNoun ? state[gen].noun : new Variable()
        return conjWrap(state, (gen):[noun: noun, hasNoun:true], (acc):[noun:noun, hasNoun:true], (dativePart):[acc: noun], (typeCxt(noun, 'JAWS')):[var:noun], (numQuantifier):[noun:noun])
      case "челюстью": return noun(state, instr, 'JAW')
      case "челюсть":
        def noun = new Variable()
        return conjWrap(state, (acc):[noun: noun, hasNoun:true], (dativePart):[acc: noun], (typeCxt(noun, 'JAW')):[var:noun])
      case "семь":
        def noun = new Variable()
        def num = new Variable()
        return state.inhibit(numQuantifier).
                apply((nom):[noun: noun, xor:t.ac], (acc):[noun: noun, xor:t.ac], (typeCxt(noun, '7')):[xor:t.bd, var:noun],
                      (numQuantifier):[num: num, xor:t.b, interceptor:new NumQuantifier(), prev:state], (typeCxt(num, '7')):[xor:t.cd, var:num])
      case "семи": return noun(state, gen, '7')
      case "восемь":
        def noun = new Variable()
        def num = new Variable()
        return state.inhibit(numQuantifier).
                apply((nom):[noun: noun, xor:t.ae], (acc):[noun: noun, xor:t.ae], (typeCxt(noun, '8')):[xor:t.bd, var:noun],
                      (numQuantifier):[num: num, xor:t.be, interceptor:new NumQuantifier(), prev:state], (typeCxt(num, '8')):[xor:t.d, var:num])
      case "восьми": return noun(state, gen, '8')
      case "два":
        def noun = new Variable()
        def num = new Variable()
        return state.inhibit(numQuantifier).
                apply((nom):[noun: noun, xor:t.ae], (acc):[noun: noun, xor:t.ae], (typeCxt(noun, '2')):[xor:t.bd, var:noun],
                      (numQuantifier):[num: num, xor:t.be, interceptor:new NumQuantifier(), prev:state], (typeCxt(num, '2')):[xor:t.d, var:num])
      case "порядок":
        def noun = state.newVariable()
        state = state.apply(acc, noun: noun, hasNoun:true) { ParsingState it ->it.assign(noun, 'type', 'ORDER') }
        return state.apply(nounGen, head:noun) //todo one noun frame - several cases
      case "слова":
        def noun = state[acc]?.hasNoun ? state.newVariable() : state[acc]?.noun ?: state.newVariable()
        def init = {ParsingState it -> it.assign(noun, 'type', 'WORDS') }
        Update update = new Update((acc):[noun:noun, hasNoun:true, init:init, xor:t.a],
                                   (nounGen):[head:noun, init:init],
                                   (possessive):[head:noun, init:init])
        if (!state[preposition]) {
          update = update.addCxt(nom, noun:noun, hasNoun:true, init:init, xor:t.a)
        }
        state = update.apply(state)
        return state
      case "счета": return noun(state, nounGen, 'COUNTING')
      case "счете": return noun(state, prep, 'COUNTING')
      case "работы":
        state = noun(state, gen, 'WORK')
        state = state.apply(absTime, noun:state[posleGen].noun)
        return state
      case "вдруг": return state.apply(adverb, adv:'SUDDENLY')
      case "опять":
        if (state[nom]) {
          def verb = state.newVariable()
          return state.assign(verb, 'anchor', 'AGAIN').apply(nom, head:verb)
        }
        return state
      case "слегка": return state.apply(adverb, adv:'SLIGHTLY')
      case "долго": return state.apply(adverb, adv:'LONG')
      case "грустно": return state.apply(adverb, adv:'SADLY')
      case "тоже":
        def alsoVar = state.newVariable()
        def subj = state.newVariable()
        state = state.assign(alsoVar, 'type', 'ALSO')
        state = state.assign(alsoVar, 'arg1', subj)
        return state.apply(also, also:alsoVar, subj:subj)
      case "не":
        return state.apply(negation)
      case "забыл":
        if (state[nom]) {
          Variable verb = state[nom].head ?: state.newVariable()
          state = state.assign(verb, 'type', 'FORGET').assign(situation, 'time', 'PAST')
          return state.apply(question, head:verb).apply(nom, head:verb).apply(adverb, head:verb)
        }
        return state
      case "забыли":
        Variable verb = state.newVariable()
        state = state.assign(verb, 'type', 'FORGET').assign(situation, 'time', 'PAST')
        def subj = state.newVariable()
        return state.apply(advObj, head:verb).apply(acc, head:verb).apply(nom, noun:subj, head:verb) { ParsingState it ->it.assign(subj, 'type', 'THEY') }
      case "помнят":
        Variable verb = state.newVariable()
        state = state.assign(verb, 'type', 'REMEMBER').assign(situation, 'time', 'PRESENT')
        state = state.apply(acc, head:verb)
        if (!state[nom]) {
          def subj = state.newVariable()
          state = state.apply(nom, noun:subj) { ParsingState it ->it.assign(subj, 'type', 'THEY') }
        }
        return state.apply(nom, head:verb)
      case "могут":
        def verb = state.newVariable()
        def also = state[also]
        def subj = null
        if (also) {
          subj = also.subj
          state = state.assign(also.also, 'theme', verb)
        }
        if (state[negation] != null) {
          state = state.assign(verb, 'negated', 'true')
        }
        if (!subj) {
          subj = state.newVariable()
        }
        state = state.assign(verb, 'type', 'CAN').assign(situation, 'time', 'PRESENT')
        state = state.assign(subj, 'type', 'THEY')
        return state.apply(control, subj:subj, head:verb)
      case 'стали':
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'BEGIN').assign(situation, 'time', 'PAST')
        return conjWrap(state.inhibit(preposition), (control):[subj:state[nom], head:verb], (nom):[head:verb])
      case 'начали':
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'BEGIN').assign(situation, 'time', 'PAST')
        return conjWrap(state.inhibit(preposition), (control):[subj:state[nom], head:verb], (nom):[head:verb])
      case 'свалился':
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'FALL').assign(situation, 'time', 'PAST')
        return conjWrap(state, (nom):[head:verb], (sGen):[head:verb], (poDat):[head:verb])
      case 'сломал':
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'BREAK').assign(situation, 'time', 'PAST')
        return conjWrap(state, (nom):[head:verb], (acc):[head:verb], (dat):[head:verb], (dativePart):[head:verb])
      case "отправился":
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'GO_OFF').assign(situation, 'time', 'PAST')
        return conjWrap(state, (kDat):[head:verb], (nom):[head:verb])
      case "пошли":
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'GO').assign(situation, 'time', 'PAST')
        return conjWrap(state, (nom):[head:verb], (vAcc):[head:verb])
      case "спорили":
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'ARGUE').assign(situation, 'time', 'PAST')
        return conjWrap(state, (nom):[head:verb], (adverb):[head:verb])
      case "обнаружили":
        def verb = new Variable()
        state = state.assign(verb, 'type', 'DISCOVER').assign(situation, 'time', 'PAST').inhibit(relativeClause) //todo generic suppress for context-freeness
        return state.satisfied(declComp).apply(declComp, head:verb).apply(nom, head:verb).apply(adverb, head:verb)
      case "улыбнулась":
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'SMILE').assign(situation, 'time', 'PAST')
        return conjWrap(state, (nom):[head:verb], (adverb):[head:verb])
      case "сказала":
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'SAY').assign(situation, 'time', 'PAST')
        return conjWrap(state, (nom):[head:verb], (directSpeech):[head:verb])
      case "вынула":
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'TAKE_OUT').assign(situation, 'time', 'PAST')
        return conjWrap(state, (nom):[head:verb], (acc):[head:verb], (izGen):[head:verb])
      case "показались":
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'SEEM').assign(situation, 'time', 'PAST')
        return conjWrap(state, (nom):[head:verb], (dat):[head:verb], (participleArg):[head:verb])
      case "подвигав":
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'MOVE').assign(verb, 'background', 'perfect')
        return conjWrap(state, (instr):[head:verb], (adverb):[head:verb])
      case "подвигала":
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'MOVE')
        return conjWrap(state, (instr):[head:verb], (adverb):[head:verb])
      case "дойдя":
        def verb = state[instr]?.head ?: state.newVariable()
        state = state.assign(verb, 'type', 'COME_TO').assign(verb, 'background', 'perfect')
        return conjWrap(state, (vPrep):[head:verb], (doGen):[head:verb])
      case "вдумываясь":
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'THINK').assign(verb, 'background', 'present')
        return conjWrap(state, (vAcc):[head:verb])
      case "вспомнить":
        def verb = state.newVariable()
        return infinitive(state, verb, 'RECALL', [(acc):[head:verb]])
      case "делать":
        def verb = state.newVariable()
        return infinitive(state, verb, 'DO', [(acc):[head:verb]])
      case "спорить":
        def verb = state.newVariable()
        return infinitive(state, verb, 'ARGUE', [:])
      case "считать":
        def verb = state.newVariable()
        return infinitive(state, verb, 'COUNT', [(acc):[head:verb]])
      case "поливать":
        def verb = state.newVariable()
        return infinitive(state, verb, 'TO_WATER', [(acc):[head:verb]])
      case "танцевать":
        def verb = state.newVariable()
        return infinitive(state, verb, 'DANCE', [:])
      case "нужно":
        def verb = state.newVariable()
        return state.assign(verb, 'type', 'NEED').apply((acc):[head:verb], (dat):[head:verb, infinitive:true])
      case "спросить":
        def verb = state.newVariable()
        return infinitive(state, verb, 'ASK', [(acc):[head:verb]])
      case "думают":
        if (state[nom]) {
          def verb = state.newVariable()
          state = state.assign(verb, 'type', 'THINK').assign(situation, 'time', 'PRESENT')
          return state.apply(poDat, head:verb).apply(nom, head:verb).apply(acc, head:verb)
        }
        return state
      case "спросил":
      case "спросили":
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'ASK').assign(situation, 'time', 'PAST')
        return conjWrap(state.inhibit(preposition), (acc):[head:verb], (nom):[head:verb], (question):[head:verb], (oPrep):[head:verb])
      case "делал":
      case "делали":
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'DO').assign(situation, 'time', 'PAST')
        return conjWrap(state, (acc):[head:verb], (nom):[head:verb])
      case "поблагодарили":
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'THANK').assign(situation, 'time', 'PAST')
        return conjWrap(state, (acc):[head:verb], (nom):[head:verb])
      case "выбежали":
        def verb = state.newVariable()
        state = state.assign(verb, 'type', 'RUN_OUT').assign(situation, 'time', 'PAST')
        return conjWrap(state, (izGen):[head:verb], (nom):[head:verb], (sInstr):[head:verb])
      case "приуныли":
        def verb = state[nom]?.head ?: state.newVariable()
        state = state.assign(verb, 'type', 'GET_SAD').assign(situation, 'time', 'PAST')
        return conjWrap(state, (nom):[head:verb], (reasonComp):[head:situation], (relTime):[head:state.situation])
      case "остановились":
        def verb = state[nom]?.head ?: state.newVariable()
        state = state.assign(verb, 'type', 'STOP').assign(situation, 'time', 'PAST')
        return conjWrap(state, (nom):[head:verb])
      case ",":
        if (state[nestedClause]) {
          return state.withSituation((Situation)state[nestedClause].parent).clearConstructions().restore((ParsingState) state[nestedClause].save).satisfied(nestedClause)
        }
        Update update = new Update((declComp):[hasComma:true],
                                   (conditionComp):[hasComma:true],
                                   (reasonComp):[hasComma:true],
                                   (question):[hasComma:true],
                                   (relativeClause):[hasComma:true, parentSituation:situation],
                                   (prevHistory):[history:state],
                                   (seq):[interceptor:new SeqInterceptor(state, null)])
        if (state[parenthetical]?.hasComma) {
          state = state.satisfied(parenthetical)
        } else {
          update = update.addCxt(parenthetical, hasComma:true)
        }
        return update.apply(state)
      case "если":
        return state.apply(conditionComp, wh:'if')
      case "когда":
        return state.apply(conditionComp, wh:'when')
      case "Что":
      case "что":
        def noun = state.newVariable()
        state = state.apply(question, questioned:noun)
        if (!state[declComp]) {
          //todo generic noun treatment for что
          state = state.apply((nom):[noun:noun, hasNoun:true, xor:t.a], (acc):[noun:noun, hasNoun:true, xor:t.a])
        }
        state = state.apply(declComp, complementizer:'that')
        if (state[relativeClause]?.hasComma) {
          def wh = new Variable()
          state = state.apply(relativeClause, wh:wh).apply(naPrep, head:wh) //todo pp copula
        }
        return state
      case "идет":
      case "идёт":
        def verb = new Variable()
        state = state.assign(situation, 'time', 'PRESENT')
        def goes = cxt('идёт') { ParsingState st, Map args -> st.assign(args.verb, 'type', 'GO') }
        return state.inhibit(preposition, numQuantifier).apply((comeScalarly):[verb:verb, xor:t.ab], (goes):[verb:verb, xor:t.a],
                                                (vAcc):[head:verb, xor:t.b], (vPrep):[head:verb], (nom):[head:verb],
                                                (posleGen):[head:verb], (ransheGen):[head:verb],
                                                (conditionComp):[head:situation], (absTime):[head:situation])
      case "следовало":
        Variable verb = state.newVariable()
        state = state.assign(situation, 'time', 'PAST')
        return state.inhibit(preposition, numQuantifier).apply((nom):[head:verb], (comeScalarly):[verb:verb], (posleGen):[head:verb], (relTime):[head:situation])
      case "раньше":
        return state.apply((comeScalarly):[order:'EARLIER', xor:t.a], (preposition):[prep:'ranshe', interceptor:new Preposition(state)], (relTime):[relTime:'BEFORE', xor:t.a])
      case "после":
        return state.apply((comeScalarly):[order:'AFTER', xor:t.a], (preposition):[prep:'posle', interceptor:new Preposition(state)], (absTime):[rel:'AFTER', xor:t.a])
      case "-":
        if (state[directSpeech]) {
          return state.apply(directSpeech, hasDash:true)
        }
        if (state[question]?.questioned) {
          state = state.clearConstructions().apply(questionVariants, questioned:state[question].questioned)
        }
        if (state[prevHistory]) {
          def mapping = [:]
          FList<Contribution> old = ((ParsingState) state[prevHistory].history).history
          def modern = state.history[0..state.history.size - old.size]
          def lcs = Util.lcs(old, modern, { Contribution a, Contribution b -> areSimilar(a.apps, b.apps) } as Function2)
          if (lcs) {
            lcs.each { Contribution contribution ->
              contribution.apps.values().each { val ->
                if (val instanceof Variable && !mapping[val]) {
                  mapping[val] = new Variable()
                }
              }
            }
            def commonStart = old.indexOf(lcs[0])
            if (commonStart) {
              FList<Contribution> remaining = FList.fromList(old[0..commonStart-1])
              state = state.clearConstructions().apply(clauseEllipsis, remaining:remaining, mapping: mapping, interceptor:new EllipsisInterceptor())
            }
          }
        }
        return state
      case ".":
        return state.assign(state.situation, 'dot', 'true').withSituation(new Situation())
      case 'каково':
        def degree = state.newVariable()
        state = state.assign(situation, 'exclamation', degree)
        return state.apply(shortAdjCopula, pred:degree, situation:state.situation)
      case 'бы':
        return state.assign(situation, 'mood', 'subjunctive')
      case 'был':
        def subj = state[nom]?.noun ?: state.newVariable()
        state = state.assign(situation, 'time', 'PAST').assign(situation, 'copulaTopic', subj)
        return state.apply(naPrep, head: subj).apply(nom, noun:subj)
      case 'было':
        state = state.assign(situation, 'time', 'PAST')
        return state.apply(conditionComp, head:situation)
      case 'так':
        return state.apply(reasonComp, active:true)
      case 'обе':
        def num = new Variable()
        return state.inhibit(numQuantifier).assign(num, 'type', 'BOTH').apply((numQuantifier):[num:num, interceptor:new NumQuantifier(), prev:state])
      case 'себе':
        def noun = state[nom]?.noun ?: new Variable()
        return state.apply((nom):[noun:noun], (dat):[noun:noun], (dativePart):[dat:noun])
      case 'по-моему':
        def opinion = new Variable()
        def me = new Variable()
        return state.assign(state.situation, 'opinion_of', opinion).assign(opinion, 'type', 'OPINION').assign(opinion, 'arg1', me).assign(me, 'type', 'ME').apply(parenthetical)
      case '?': return state.apply(question, comp:situation)
      case '"':
        if (state[quotedName]) {
          if (state[quotedName].started) {
            state = state.apply(quotedName, finished:true)
          } else {
            state = state.apply(quotedName, started:true)
          }
        }
        return state
      case 'лишенными':
        def lack = state.newVariable()
        state = state.assign(lack, 'type', 'LACK')
        return state.apply(participleArg, participle:lack).apply(gen, head:lack)
      case 'бессмысленными':
        def part = state.newVariable()
        state = state.assign(part, 'type', 'MEANINGLESS')
        return state.apply(participleArg, participle:part)
      case '6-ти':
      case 'шести':
        return noun(state, gen, '6')
      case '5-ти':
        return noun(state, gen, '5')
    }
    return state
  }

  private Construction numberTypeCxt(Variable var, String word) {
    return cxt("sem_number_${var}_$word") { ParsingState st, Map args -> st.assign(args.var, 'type', word).assign(args.var, 'number', 'true') }
  }

  static boolean areSimilar(Map<Construction, Map> c1, Map<Construction, Map> c2) {
    def common = Util.intersect(c1.keySet(), c2.keySet())
    common = Util.intersect(common, importantForSimilarity)
    def condition = { Construction cxt -> (c1[cxt].keySet() - 'init' - 'xor') == (c2[cxt].keySet() - 'init' - 'xor') }
    common = common.findAll(condition)

    if (common.size() == 1 && possessive in common && c1[possessive].head) {
      return false
    }

    if (numQuantifier in c1 && numQuantifier in c2 && !condition(numQuantifier)) {
      return false
    }

    return common.size() > 0
  }

  private ParsingState infinitive(ParsingState state, Variable verb, String type, LinkedHashMap<Construction, LinkedHashMap<String, Object>> args) {
    if (state[question]) {
      state = state.apply((question): [mainVerb: verb, imperative: true])
    }
    return state.assign(verb, 'type', type).apply(args + [(dat): [head: verb, infinitive: true], (control): [slave: verb]])
  }

  private ParsingState noun(ParsingState state, Construction caze, String type) {
    return noun(state, caze) { ParsingState st, Variable n -> st.assign(n, 'type', type) }
  }
  private ParsingState noun(ParsingState state, Construction caze, Closure init) {
    state = state.satisfied(relativeClause)

    Update update = _nounBase(state, caze, init)

    def noun = update.map[caze].noun
    if (state[possessive]) {
      update = update.addCxt(possessive, head: noun)
    }

    update = update.addCxt(quotedName, noun:noun).addCxt(numQuantifier, noun:noun)

    return conjWrap(update.map.reverse(), state)
  }
  private ParsingState pronoun(ParsingState state, Construction caze, String type) {
    state = state.satisfied(relativeClause)

    Update update = _nounBase(state, caze, { ParsingState st, Variable n -> st.assign(n, 'type', type) })

    return conjWrap(update.map.reverse(), state)
  }

  private Update _nounBase(ParsingState state, Construction caze, Closure init) {
    Variable noun = state[caze]?.noun && !state[caze].hasNoun ? state[caze]?.noun : new Variable()

    if (noun.frame(state.chart).f('member')) { //todo number agreement
      noun = noun.frame(state.chart).f('member').var
    }

    Update update = new Update([:])

    if (caze == nom) {
      update = update.addCxt(shortAdjCopula, noun:noun)
    }

    update = update.addCxt(caze, noun:noun, hasNoun:true, init:{ init(it, noun) })

    update = update.addCxt(relativeClause, noun:noun, save:state)
    return update
  }


  private Construction typeCxt(Variable var, String type) {
    return cxt("type_${var}_$type") { st, a -> st.assign(a.var, 'type', type) }
  }

}

