package cons3

import static cons3.Construction.cxt
import static cons3.RussianConstructions.*

/**
 * @author peter
 */
class Parser { //todo alex implements cons3.RussianConstructions
  String log = ""

  Chart parse(String text) {
    ParsingState state = new ParsingState()
    def tokenizer = new StringTokenizer(text, """ '":,.?!""", true)
    for (String w in tokenizer) {
      if (w != ' ') {
        state = handleWord(w.toLowerCase(), state)
        log += w + "\n" + state.presentable()
      }
    }
    return state.chart
  }

  ParsingState handleWord(String word, ParsingState state) {
    Tokens t = new Tokens()
    Variable var = new Variable()
    if (Util.parseNumber(word) != null) { //todo generic noun treatment for numbers
      Variable noun = var
      def num = new Variable()

      def sem = numberTypeCxt(noun, word)

      List<Construction> cases = [nom, acc, gen]

      def qv = state[questionVariants]
      if (qv) {
        def seqVar = new Variable()
        state = state.apply((questionVariants):[seq:seqVar], (nom):[:])
        def update = new Update(sem(var:noun))
        for (caze in cases) {
          update = SeqInterceptor.joinSeq([noun:noun, xor:t.a], state, caze, seqVar, [:], 'noun', update)
        }
        state = update.apply(state)
      } else {
        state = state.inhibit(numQuantifier).apply(cases.collectEntries { [it, [noun:noun, xor:t.a]] } +
                         [(sem):[var:noun, xor:t.bd],
                                 (numQuantifier):[num: num, xor:t.b, noun:noun.lightVar, outerNoun:noun, interceptor:new NumQuantifier(), prev:state, innerCase:(word == '1' ? acc : gen)],
                                 (numberTypeCxt(num, word)):[xor:t.d, var:num],
                                 (dativePart):[acc:noun]])
      }

      return state
    }

    if (state[quotedName]?.started && !state[quotedName].name) {
      state = state.apply(quotedName, name:word)
    }

    switch (word) {
      case "удивительный": return adj(state, nom, 'property', 'AMAZING')
      case "васи":
        state = unoun(gen, var, null, (varCxt(name:'Вася')):[var:var], (absTime):[noun:var]).apply(state)
        return state //todo posleGen should generate absTime automatically
      case "знаменской": // todo a unified treatment for street names
      case "бассейной":
        return (commonCase(gen, var.lightVar) + [(varCxt(type:'STREET')):[var:var], (adjective):[nounFrame:var, rel:'name', val:word[0..-3]+"ая"]]).apply(state)
      case "коммерческий": return adj(state, acc, 'kind', 'COMMERCIAL')
      case "маленький": return adj(state, acc, 'size', 'LITTLE')
      case "летний":
        return state.apply((adjective):[nounFrame:var.lightVar, rel:'timeAnchor', val:'SUMMER', xor:t.a], (acc):[noun:var.lightVar], (summerGarden):[summer:true, xor:t.a])
      case "какой-то": return adj(state, nom, 'determiner', 'SOME')
      case "большим": return adj(state, instr, 'size', 'BIG')
      case "большой":
        return state.apply((adjective):[nounFrame:var.lightVar, rel:'size', val:'BIG'], (instr):[noun:var.lightVar], (acc):[noun:var.lightVar])
      case "нашем":
        state = state.assign(var, 'type', 'WE')
        return state.apply((possessive):[possessor:var])
      case "своим":
        return state.apply((reflexiveHolder):[noun:var.lightVar], (possessive):[possessor:var])
      case "этому": return adj(state, dat, 'determiner', 'THIS')
      case "всякого": return adj(state, gen, 'determiner', 'ANY')
      case "скромному": return adj(state, dat, 'quality', 'HUMBLE')
      case "том": return adj(state, prep, 'determiner', 'THAT')
      case "случай": return noun(state, nom, 'THING') //todo случай=CASE or THING
      case "случае": return unoun(prep, var, 'CASE', (conditionComp):[head:var]).apply(state)
      case "удивление": return noun(state, nom, 'AMAZE')
      case "поводу": return noun(state, dat, 'MATTER')
      case "недоумении": return noun(state, prep, 'PREDICAMENT')
      case "рта": return noun(state, gen, 'MOUTH')
      case "смысла": return unoun(gen, var, 'MEANING').apply(state)
      case "молоточек": return noun(state, acc, 'HAMMER')
      case "радостью": return noun(state, instr, 'JOY')
      case "облегчением": return noun(state, instr, 'RELIEF')
      //case "улицы": return noun(state, gen, 'STREET') todo улицы in conj
      case "скамейки": return noun(state, gen, 'BENCH')
      case "ребенок": return noun(state, nom, 'CHILD')
      case "углу":  //todo plain noun
        return state.apply((typeCxt('CORNER')):[var:var], (prep):[noun:var], (gen):[head:var]) //todo one noun frame - several cases
      case "магазин":
        Update update = new Update()
        update = update.addCxt(typeCxt('SHOP'), var:var)
        update = update + [(nom):[noun:var, xor:t.a], (acc):[noun:var, xor:t.a]]
        update = update + [(naPrep):[head:var], (quotedName):[noun:var], (relativeClause):[noun:var, save:state]]
        return update.apply(state.satisfied(relativeClause))
      case "сад":
        state = state.apply((typeCxt('GARDEN')):[var:var],
                (nom):[noun:var, xor:t.a], (acc):[noun:var, xor:t.a],
                (summerGarden):[garden:var], (naPrep):[head:var])
        state = state.satisfied(relativeClause).apply(relativeClause, noun:var, save:state)
        return state //todo one noun frame - several cases
      case "сада": return noun(state, gen, 'GARDEN')
      case "магазина":
        return state.apply((typeCxt('SHOP')):[var:var], (gen):[noun:var],
                (naPrep):[head:var], (quotedName):[noun:var]).satisfied(relativeClause).
                apply((relativeClause):[noun:var, save:state])
      case "мнению":
        state = state.assign(var, 'type', 'OPINION')
        return state.apply((gen):[head:var, xor:t.a], (possessive):[head:var, xor:t.a], (dat):[noun:var],
                           (parenthetical):[:]) // todo common constructions in по-моему & по моему мнению
      case "словам":
        return state.apply((typeCxt('WORDS')):[var:var], (dat):[noun:var],
                            (gen):[head:var], (possessive):[head:var])
      case "счастию":
        return state.assign(var, 'type', 'LUCK').apply((dat):[noun:var])
      case "случился":
        return finiteVerb(state, var, 'HAPPEN', 'PAST', (sInstr):[head:var], (nom):[head:var])
      case 'со':
      case 'с':
        return state.apply((preposition):[prep:'с'], (sInstr):[xor:t.b], (sGen):[xor:t.b])
      case 'по':
        return state.inhibit(gen, numQuantifier).apply((preposition):[prep:'по'], (poDat):[:])
      case 'о': return state.apply((preposition):[prep:'о'], (oPrep):[:])
      case 'к': return state.apply((preposition):[prep:'к'], (kDat):[:])
      case 'у': return state.apply((preposition):[prep:'у'], (uGen):[:])
      case 'до':
        return state.apply((preposition):[prep:'до'], (doGen):[:])
      case 'от':
        return state.apply((preposition):[prep:'от'], (otGen):[:])
      case 'в':
        return state.apply((preposition):[prep:'в'], (vAcc):[xor:t.b], (vPrep):[xor:t.b])
      case 'из':
      case 'изо': return state.apply((preposition):[prep:'из'], (izGen):[:])
      case 'на': return state.inhibit(adjective).apply((preposition):[prep:'на'], (naPrep):[:])
      case "мной": return noun(state, instr, 'ME')
      case "меня": return noun(state, gen, 'ME')
      case ":":
        if (state[directSpeech]) {
          //todo construction handling of elaboration and direct speech
          return state.apply(directSpeech, hasColon:true)
        }

        return state.clearConstructions().apply((elaboration):[head:state[verbHolder].head])
      case "я": return pronoun(state, nom, 'ME')
      case "мы": return noun(state, nom, 'WE') // todo we pronoun
      case "нам": return upronoun(dat, var, 'WE').apply(state)
      case "нас": return pronoun(state, acc, 'WE')
      case "мое": return state.apply((typeCxt('ME')):[var:var], (possessive):[possessor:var])
      case "моему": return state.apply((typeCxt('ME')):[var:var], (possessive):[possessor:var])
      case "нашего": return state.apply((typeCxt('WE')):[var:var], (possessive):[possessor:var])
      case "и": return state.apply((seq):[conj:'and'])
      case "или": return state.apply((seq):[conj:'or'])
      case "а":
      case "но":
        return state.apply((seq):[conj:'but', butWord:word])
      case "тут":
        return state.assign(var.lightVar, 'emphasis', 'true').apply((verbHolder):[head:var.lightVar])
      case "потом":
        Update update = new Update(comeScalarly(order:'AFTER', xor: t.a), nom([:]))
        if (state[comeScalarly]?.order) {
          state = state.inhibit(comeScalarly)
        } else {
          update = update.addCxt(relTime, relTime:'AFTER', xor:t.a)
        }
        return update.apply(state)
      case "все":
        return state.assign(state[nom].noun, 'quantifier', 'ALL')
      case "дальше":
        return state.apply((comeScalarly):[order:'AFTER', xor: t.ab], (typeCxt('NEXT')):[var:var, xor:t.b], (advObj):[adv:var, xor:t.a])
      case "их":
        return state.apply((typeCxt('THEY')):[var:var], (possessive):[possessor:var, xor:t.a], (acc):[noun:var, xor:t.a])
      case "его":
        return state.apply((typeCxt('HE')):[var:var], (possessive):[possessor:var, xor:t.a], (acc):[noun:var, xor:t.a])
      case "он": return pronoun(state, nom, 'HE')
      case "она": return pronoun(state, nom, 'SHE')
      case "они": return pronoun(state, nom, 'THEY')
      case "соседям": return noun(state, dat, 'NEIGHBOURS')
      case "арбуз": return noun(state, nom, 'WATER_MELON')
      case "кассир": return unoun(nom, var, null, (varCxt(type:'CASHIER', gender:'masc')):[var:var]).apply(state)
      case "кассиршу": return noun(state, acc, 'CASHIER')
      case "кассирша": return unoun(nom, var, null, (varCxt(type:'CASHIER', gender:'fem')):[var:var]).apply(state)
      case "кассирши": return unoun(gen, var, 'CASHIER').apply(state)
      case "одних": return unoun(gen, var, 'SOME').apply(state)
      case "других": return unoun(gen, var, 'OTHERS').apply(state)
      case "деревья": return noun(state, acc, 'TREES')
      case "деньги": return noun(state, acc, 'MONEY')
      case "спора": return noun(state, gen, 'ARGUE')
      case "ее":
      case "её":
        return state.apply((typeCxt('SHE')):[var:var], (possessive):[possessor:var], (acc):[noun:var])
      case "носом": return noun(state, instr, 'NOSE')
      case "пальцев": return noun(state, gen, 'FINGERS')
      case "пальца": return noun(state, gen, 'FINGERS')
      case "палец": return noun(state, acc, 'FINGER')
      case "домам": return noun(state, dat, 'HOMES')
      case "комнатам": return noun(state, dat, 'ROOMS')
      case "квартирам": return noun(state, dat, 'APARTMENTS')
      case "офисам": return noun(state, dat, 'OFFICES')
      case "челюсти":
        return state.apply((gen):[noun:var, xor:t.ab], (acc):[noun:var, xor:t.a], (typeCxt('JAWS')):[var:var])
      case "челюстью": return noun(state, instr, 'JAW')
      case "челюсть":
        return state.apply((acc):[noun:var], (dativePart):[acc:var], (typeCxt('JAW')):[var:var])
      case "семь": return numeral(state, t, '7')
      case "семи": return noun(state, gen, '7')
      case "восемь": return numeral(state, t, '8')
      case "восьми": return noun(state, gen, '8')
      case "два": return numeral(state, t, '2')
      case "три": return numeral(state, t, '3')
      case "один": return numeral(state, t, '1')
      case "порядок":
        return state.apply((typeCxt('ORDER')):[var:var], (acc):[noun:var], (gen):[head:var])
      case "слова":
        Update update = new Update((typeCxt('WORDS'))(var:var), acc(noun:var, xor:t.a),
                                   gen(head:var), possessive(head:var))
        if (!state[preposition]) {
          update = update.addCxt(nom, noun:var, xor:t.a)
        }
        state = update.apply(state)
        return state
      case "счета": return unoun(gen, var, 'COUNTING').apply(state)
      case "счете": return noun(state, prep, 'COUNTING')
      case "работы":
        state = noun(state, gen, 'WORK')
        return state.apply(absTime, noun:state[posleGen].noun)
      case "вдруг": return state.apply((adverb):[adv:'SUDDENLY'])
      case "опять":
        return state.assign(var.lightVar, 'anchor', 'AGAIN').apply((verbHolder):[head:var.lightVar])
      case "слегка": return state.apply(adverb, adv:'SLIGHTLY')
      case "долго": return state.apply(adverb, adv:'LONG')
      case "грустно": return state.apply(adverb, adv:'SADLY')
      case "просто": return state.apply(adverb, adv:'JUST')
      case "тоже":
        return state.apply(also, hasAlso:true)
      case "не":
        return state.apply(negation)
      case "забыл":
      case "забыла":
      case "забыли":
        return finiteVerb(state.inhibit(declOrQuestionComp), var, 'FORGET', 'PAST',
                (nom):[head:var, agr:(word == 'забыли' ? 'pl' : word == 'забыла' ? 'fem' : 'masc')], (adverb):[head:var], (elaboration):[elaboration:var],
                (advObj):[head:var, xor:t.a], (acc):[head:var, xor:t.a], (declOrQuestionComp):[head:var, xor:t.a])
      case "помнят":
      case "помнит":
        return finiteVerb(state, var, 'REMEMBER', 'PRESENT',
                (nom):[head:var, agr:(word == 'помнят' ? '3pl' : '3sg')], (verbHolder):[head:var], (acc):[head:var])
      case "может":
      case "могут":
        def agr = word == 'могут' ? '3pl' : '3sg'
        boolean hasSubj = state[nom]?.noun && SeqInterceptor.agree(state[nom].agr, agr)
        def subj = hasSubj ? state[nom].noun : new Variable()
        return finiteVerb(state, var, 'CAN', 'PRESENT', (control):[subj:subj, head:var], (nom):[noun:subj, agr:agr, head:var])
      case 'стали':
      case 'начали':
        return finiteVerb(state.inhibit(preposition), var, 'BEGIN', 'PAST', (control):[head:var], (nom):[head:var])
      case 'свалился':
        return finiteVerb(state, var, 'FALL', 'PAST', (nom):[head:var, agr:'masc'], (sGen):[head:var], (poDat):[head:var])
      case 'сломал':
      case 'сломала':
        return finiteVerb(state, var, 'BREAK', 'PAST', (nom):[head:var, agr: (word == 'сломал' ? 'masc' : 'fem')], (acc):[head:var], (dat):[head:var], (dativePart):[head:var])
      case "отвлекло":
        return finiteVerb(state, var, 'DISTRACT', 'PAST', (otGen):[head:var], (nom):[head:var], (acc):[head:var])
      case "отправился":
        return finiteVerb(state, var, 'GO_OFF', 'PAST', (kDat):[head:var], (nom):[head:var])
      case "пошли":
        return finiteVerb(state, var, 'GO', 'PAST', (nom):[head:var], (vAcc):[head:var])
      case "спорили":
        return finiteVerb(state, var, 'ARGUE', 'PAST', (nom):[head:var, agr:'pl'], (adverb):[head:var])
      case "обнаружил":
      case "обнаружила":
      case "обнаружили":
        return finiteVerb(state, var, 'DISCOVER', 'PAST', (declOrQuestionComp):[head:var], (nom):[head:var], (adverb):[head:var])
      case "улыбнулась":
        return finiteVerb(state, var, 'SMILE', 'PAST', (nom):[head:var], (adverb):[head:var])
      case "сказал":
      case "сказала":
        return finiteVerb(state, var, 'SAY', 'PAST', (nom):[head:var], (dat):[head:var],
                (directSpeech):[head:var, xor:t.a], (declOrQuestionComp):[head:var, xor:t.a])
      case "вынул":
      case "вынула":
        return finiteVerb(state, var, 'TAKE_OUT', 'PAST', (nom):[head:var], (acc):[head:var], (izGen):[head:var])
      case "показались":
        return finiteVerb(state, var, 'SEEM', 'PAST', (nom):[head:var], (dat):[head:var], (participleArg):[head:var])
      case "подвигав":
        state = state.assign(var, 'type', 'MOVE').assign(var, 'background', 'perfect')
        return state.apply((instr):[head:var], (adverb):[head:var])
      case "подвигала":
        return finiteVerb(state, var, 'MOVE', 'PAST', (instr):[head:var], (adverb):[head:var], (nom):[head:var])
      case "дойдя":
        state = state.assign(var, 'type', 'COME_TO').assign(var, 'background', 'perfect')
        return state.apply((vPrep):[head:var], (doGen):[head:var])
      case "вдумываясь":
        state = state.assign(var, 'type', 'THINK').assign(var, 'background', 'present')
        return state.apply((vAcc):[head:var])
      case "вспомнить":
        return infinitive(state, var, 'RECALL', [(acc):[head:var]])
      case "делать":
        return infinitive(state, var, 'DO', [(acc):[head:var]])
      case "спорить":
        return infinitive(state, var, 'ARGUE', [:])
      case "считать":
        return infinitive(state, var, 'COUNT', [(acc):[head:var]])
      case "поливать":
        return infinitive(state, var, 'TO_WATER', [(acc):[head:var]])
      case "танцевать":
        return infinitive(state, var, 'DANCE', [:])
      case "нужно":
        return state.assign(var, 'type', 'NEED').apply((acc):[head:var], (datSubj):[head:var], (adverbPred):[adverb:var],
                (verbHolder):[head:var], (question):[content:var])
      case "спросить":
        return infinitive(state, var, 'ASK', [(acc):[head:var]])
      case "думают":
        return finiteVerb(state, var, 'THINK', 'PRESENT', (poDat):[head:var], (nom):[head:var], (acc):[head:var])
      case "сидят":
        return finiteVerb(state, var, 'SIT', 'PRESENT', (nom):[head:var], (adverb):[head:var])
      case "спросил":
      case "спросили":
        return finiteVerb(state, var, 'ASK', 'PAST', (acc):[head:var], (nom):[head:var],
                (declOrQuestionComp):[head:var], (oPrep):[head:var])
      case "делал":
      case "делали":
        return finiteVerb(state, var, 'DO', 'PAST', (acc):[head:var], (nom):[head:var])
      case "поблагодарили":
        return finiteVerb(state, var, 'THANK', 'PAST', (acc):[head:var], (nom):[head:var])
      case "разошлись":
        return finiteVerb(state, var, 'DISPERSE', 'PAST', (poDat):[head:var], (nom):[head:var])
      case "выбежали":
        return finiteVerb(state, var, 'RUN_OUT', 'PAST', (izGen):[head:var], (nom):[head:var], (sInstr):[head:var])
      case "приуныли":
        return finiteVerb(state, var, 'GET_SAD', 'PAST', (nom):[head:var], (reasonComp):[head:var])
      case "остановились":
        return finiteVerb(state, var, 'STOP', 'PAST', (nom):[head:var])
      case ",":
        if (state[nestedClause]) {
          return state.withSituation((Situation)state[nestedClause].parent).clearConstructions().restore((ParsingState) state[nestedClause].save)
        }
        Update update = new Update(conditionComp(hasComma:true),
                reasonComp(hasComma:true),
                declOrQuestionComp(hasComma:true),
                relativeClause(hasComma:true, parentSituation:state.situation),
                prevHistory(history:state))
        if (!state[seq]?.conj) {
          state = state.inhibit(seq)
          update = update.addCxt(seq, conj:null)
        }
        if (state[poDat]?.head && ((Variable) state[poDat]?.noun)?.hard) {
          state = state.inhibit(poDat)
        }
        return update.apply(state.inhibit(numQuantifier))
      case "если":
        return state.apply((conditionComp):[wh:'if'])
      case "когда":
        return state.apply((conditionComp):[wh:'when'])
      case "это":
        return state.apply((nom):[noun:var, xor:t.a], (acc):[noun:var, xor:t.a], (typeCxt('THAT')):[var:var])
      case "что":
        if (state[relativeClause]?.hasComma && state[relativeClause]?.noun) {
          return state.apply(relativeClause, wh:var).apply(naPrep, head:var, copula:new Variable()) //todo pp copula
        }

        def comp = new Variable()
        state = state.apply((declOrQuestionComp):[comp:comp])

        Update update = new Update(acc(noun:var, xor:t.a), nom(noun:var, xor:t.a, agr:'3sg'))
        update = update + [
                (typeCxt('wh')):[var:var, xor:t.f], (question):[questioned:var, frame:comp, xor:t.e], (modality):[questioned:var, xor:t.d]]
        update = update + [(complementizer):[xor:t.adef, frame:comp]]
        if (!state[seq]?.conj) {
          state = state.clearConstructions()
        }
        state = update.apply(state)
        return state
      case "идет":
      case "идёт":
        state = state.assign(var, 'time', 'PRESENT')
        return state.inhibit(preposition, numQuantifier).apply((comeScalarly):[verb:var, xor:t.ab], (typeCxt('GO')):[var:var, xor:t.a],
                (vAcc):[head:var, xor:t.b], (vPrep):[head:var], (nom):[head:var],
                (poDat):[head:var], (verbHolder): [head:var],
                (posleGen):[head:var], (ransheGen):[head:var],
                (conditionComp):[head:var], (absTime):[head:var],
                (complementizer):[content:var, xor:t.c], (question):[content:var, xor:t.c])
      case "следовало":
        state = state.assign(var, 'time', 'PAST')
        return state.inhibit(preposition, numQuantifier).apply((nom):[head:var],
                (comeScalarly):[verb:var],
                (posleGen):[head:var], (relTime):[head:var], (poDat):[head:var], (verbHolder):[head:var], (elaboration):[elaboration:var])
      case "раньше":
        return state.apply((comeScalarly):[order:'EARLIER', xor:t.a], (preposition):[prep:'ranshe'], (relTime):[relTime:'BEFORE', xor:t.a], (ransheGen):[:])
      case "после":
        return state.apply((comeScalarly):[order:'AFTER', xor:t.a], (absTime):[rel:'AFTER', xor:t.a], (preposition):[prep:'posle'], (posleGen):[:])
      case "-":
        if (state[directSpeech]) {
          return state.apply(directSpeech, hasDash:true)
        }
        if (state[question]?.questioned) {
          state = state.clearConstructions().apply((questionVariants):[questioned:state[question].questioned], (verbHolder):[head:state[verbHolder]?.head])
        }
        if (state[prevHistory]) {
          state = state.apply((clauseEllipsis):[interceptor:new EllipsisInterceptor((ParsingState) state[prevHistory].history, state)])
        }
        return state
      case ".":
        return state.assign(state[verbHolder]?.head ?: var, 'dot', 'true').withSituation(new Situation())
      case 'каково':
        return state.assign(var, 'type', 'wh').apply(shortAdj, copula: new Variable(), value:var)
      case 'бы':
        return state.apply((subjunctive):[subjunctive:true])
      case 'был':
        def subj = new Variable().lightVar
        state = state.assign(var, 'time', 'PAST')
        return state.apply((naPrep):[head: subj, copula:var], (nom):[noun:subj], (verbHolder):[head:var], (uGen):[head:subj, copula:var])
      case 'есть':
        def subj = new Variable().lightVar
        state = state.assign(var, 'time', 'PRESENT')
        return state.apply((naPrep):[head: subj, copula:var], (nom):[noun:subj], (verbHolder):[head:var], (uGen):[head:subj, copula:var])
      case 'было':
        return state.apply((conditionComp):[head:state[shortAdj]?.copula], (shortAdj):[time:'PAST'], (timedModality):[time:'PAST'], (adverbPred):[time:'PAST'])
      case 'так':
        return state.apply(reasonComp, active:true)
      case 'обе':
        def num = new Variable()
        return state.inhibit(numQuantifier).assign(num, 'type', 'BOTH').apply((acc):[noun:var],
                (numQuantifier):[num:num, interceptor:new NumQuantifier(), prev:state, noun:var.lightVar, innerCase:gen, outerNoun:var])
      case 'себе':
        return upronoun(dat, var, null, (reflexiveHolder):[noun:var.lightVar]).apply(state)
      case 'мне':
        return upronoun(dat, var, 'ME').apply(state)
      case 'по-моему':
        def opinion = var
        def me = new Variable()
        def verb = new Variable().lightVar
        return state.assign(verb, 'opinion_of', opinion).assign(opinion, 'type', 'OPINION').assign(opinion, 'arg1', me).assign(me, 'type', 'ME').
                apply((verbHolder):[head:verb], (parenthetical):[:])
      case '?': return state.apply((question):[:])
      case '"':
        if (state[quotedName]) {
          if (state[quotedName].started) {
            state = state.apply(quotedName, finished:true)
          } else {
            state = state.apply(quotedName, started:true)
          }
        }
        return state
      case 'лишенными':
        state = state.assign(var, 'type', 'LACK')
        return state.apply((participleArg):[participle:var], (gen):[head:var])
      case 'бессмысленными':
        state = state.assign(var, 'type', 'MEANINGLESS')
        return state.apply(participleArg, participle:var)
      case '6-ти':
      case 'шести':
        return unoun(gen, var, '6').apply(state)
      case '5-ти':
        return unoun(gen, var, '5').apply(state)
    }
    return state
  }

  ParsingState adj(ParsingState state, Construction caze, String rel, String val) {
    def noun = new Variable().lightVar
    return state.apply((adjective):[nounFrame:noun, rel:rel, val:val], (caze):[noun:noun])
  }

  Construction nounHolder(Construction caze) {
    [(nom):nomHolder, (gen):genHolder, (acc):accHolder, (dat):datHolder, (instr):(instrHolder), (prep):prepHolder].get(caze)
  }

  ParsingState numeral(ParsingState state, Tokens t, String number) {
    def noun = new Variable()
    def num = new Variable()
    return state.inhibit(numQuantifier).
            apply((nom):[noun:noun, xor:t.ae], (acc):[noun:noun, xor:t.ae],
                    (typeCxt(number)):[xor:t.bd, var:noun], (dativePart):[acc:noun],
                    (numQuantifier):[num:num, xor:t.b, noun:noun.lightVar, outerNoun:noun,
                            interceptor:new NumQuantifier(), prev:state, innerCase:(number == '1' ? acc : gen)],
                    (typeCxt(number)):[xor:t.d, var:num])
  }

  private Construction numberTypeCxt(Variable var, String word) {
    return cxt("sem_number_${var}_$word") { ParsingState st, Map args -> st.assign(args.var, 'type', word).assign(args.var, 'number', 'true') }
  }

  private ParsingState infinitive(ParsingState state, Variable verb, String type, Map<Construction, Map> args) {
    def mod = new Variable()
    return state.inhibit(verbHolder).assign(verb, 'type', type).apply(args +
            [(datSubj):[head: verb], (control): [slave: verb],
                    (question): [content:mod], (modality):[modality:mod, infinitive:verb], (timedModality):[modality:mod],
                    (verbHolder):[head:verb]])
  }

  private ParsingState finiteVerb(Map<Construction, Map> args, ParsingState state, Variable verb, String type, String tense) {
    if (state[negation] != null) {
      state = state.assign(verb, 'negated', 'true')
    }
    Tokens t = new Tokens()
    return state.inhibit(preposition, relativeClause, numQuantifier).
            assign(verb, 'type', type).assign(verb, 'time', tense).
            apply(args + [(subjunctive):[head:verb], (verbHolder):[head:verb], (relTime):[head:verb], (also):[head: verb],
                    (complementizer):[content:verb, xor:t.a], (question):[content:verb, xor:t.a], (verbEmphasis):[verb:verb]])
  }

  private ParsingState noun(ParsingState state, Construction caze, String type) {
    Variable noun = new Variable()
    return unoun(caze, noun, null, (typeCxt(type)):[var:noun]).apply(state)
  }

  private Update unoun(Map<Construction, Map> mites = [:], Construction caze, Variable noun, String type) {
    def update = upronoun(mites, caze, noun, type)
    update + [(possessive):[head:noun], (quotedName):[noun:noun], (numQuantifier):[noun:noun]]
  }
  private Update upronoun(Map<Construction, Map> mites = [:], Construction caze, Variable var, String type) {
    Update update = new Update()
    if (type) {
      update = update.addCxt(typeCxt(type), var:var)
    }
    return update + mites + commonCase(caze, var)
  }

  private Update commonCase(Construction caze, Variable var) {
    Update update = new Update()
    if (caze == nom) {
      update = update.addCxt(shortAdj, noun:var).addCxt(reflexiveHolder, noun:var)
    }
    if (caze == dat) {
      update = update.addCxt(datSubj, noun:var).addCxt(dativePart, dat:var)
    }
    update = update.addCxt(caze, noun:var, xor:new Tokens().a)
    update
  }

  private ParsingState pronoun(ParsingState state, Construction caze, String type) {
    def var = new Variable()
    return upronoun(caze, var, null, (typeCxt(type)):[var:var]).apply(state)
  }

  private Construction typeCxt(String type) {
    return varCxt(type:type)
  }

  private Construction varCxt(Map<String, String> attrs) {
    return cxt("var_${attrs.collect { k, v -> k + "_" + v}.join("_")}") { st, a ->
      for (attr in attrs.keySet()) {
        st = st.assign(a.var, attr, attrs[attr])
      }
      st
    }
  }

}