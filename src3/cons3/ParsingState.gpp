package cons3

/**
 * @author peter
 */
class ParsingState {
  final Chart chart
  final Situation situation
  final Node node
  private final FLinkedMap<Mite, Integer> miteGenerations
  final FList<Contribution> history
  private final Set<Mite> active
  private final int currentGeneration

  ParsingState() {
    this(chart: new Chart(), situation: new Situation(), 
            node: Node.EMPTY,
            history: FList.emptyList, active: Collections.emptySet(), currentGeneration:0, miteGenerations:FLinkedMap.emptyMap)
  }

  ParsingState(Map map) {
    chart = map.chart
    situation = map.situation
    node = map.node
    history = map.history
    currentGeneration = map.currentGeneration
    assert (map.active instanceof LinkedHashSet) || !(map.active instanceof HashSet)
    assert (map.groups instanceof LinkedHashSet) || !(map.groups instanceof HashSet)
    active = Collections.unmodifiableSet((Set)map.active)
    miteGenerations = map.miteGenerations
  }

  Map<Construction, List<Mite>> getVisibleMites() {
    return node.getAllMites()
  }

  ParsingState getBeforeThisChange() {
    if (history.empty) {
      return new ParsingState()
    }
    return history[0].before.apply(history[0])
  }

  ParsingState apply(Contribution contribution) {
    return inhibit(contribution.inhibited as Construction[]).apply(contribution.apps)
  }

  private ParsingState clone(Map update) {
    Map current = [chart:chart, situation:situation, node:node, history:history, active:active, currentGeneration:currentGeneration, miteGenerations:miteGenerations]
    current.putAll(update)
    return new ParsingState(current)
  }

  static boolean areUnifiableVars(val1, val2) {
    return val1 != val2 && val1 instanceof Variable && val2 instanceof Variable && (val1.light || val2.light) && val1.base != val2.base
  }

  ParsingState withSituation(Situation situation) { clearConstructions().clone(situation:situation) }

  ParsingState assign(def var, String property, def value) {
    clone(chart: chart.assign(((Variable)var).base, situation, property, value instanceof Variable ? value.base : value, currentGeneration))
  }
  
  Map getAt(Construction c) {
    def allMites = visibleMites[c]
    if (allMites == null) {
      return null
    }

    for (Mite mite in allMites) {
      if (mite in active) {
        return mite.contents
      }
    }

    Map value = [:]
    for (part in allMites.reverse()) {
      if (!overwrites(value, part.contents)) {
        value = unify(value, part.contents)
      }
    }
    value
  }

  ParsingState apply(Map newArgs = [:], Construction name) {
    return apply((name): newArgs)
  }

  static boolean overwrites(Map before, Map newArgs) {
    if (before == null) {
      return false
    }
    for (arg in before.keySet().intersect(newArgs.keySet())) {
      if (arg == 'xor') continue

      def val1 = before[arg]
      def val2 = newArgs[arg]
      if (val1 != val2 && val1 != null && val2 != null && !areUnifiableVars(val1, val2)) {
        return true
      }
    }
    return false
  }

  ParsingState augmentWith(Mite mite) {
    def victim = active.find { it.cxt == mite.cxt }

    def fat = victim ? victim.unify(mite) : mite
    return clone(node:new Node(node.ownMites + [fat] as List, node._inhibited, node.before, node.prevState),
            active:(active as LinkedHashSet) - victim + fat,
            miteGenerations:miteGenerations.putValue(fat, currentGeneration))
  }

  private ParsingState addCxt(Node node) {
    def newMiteGenerations = miteGenerations
    for (mite in node.ownMites) {
      newMiteGenerations = newMiteGenerations.putValue(mite, currentGeneration)
    }

    return clone(node:node, miteGenerations:newMiteGenerations)
  }

  public static Map unify(Map oldArgs, Map newArgs) {
    def args = new HashMap()
    if (oldArgs) args.putAll(oldArgs)
    if (newArgs) {
      for (key in newArgs.keySet()) {
        if (oldArgs[key] instanceof Variable && !((Variable) oldArgs[key]).light) {
          continue
        }
        args[key] = newArgs[key]
      }
    } 

    Collection xor = mergeXor(oldArgs, newArgs)
    if (xor) {
      args.xor = xor
    }

    return args
  }

  static Collection mergeXor(Map oldArgs, Map newArgs) {
    Set xor1 = oldArgs?.xor ?: Collections.emptySet()
    Set xor2 = newArgs?.xor ?: Collections.emptySet()
    if (!xor1 && !xor2) {
      return null
    }

    def xor = new LinkedHashSet()
    xor.addAll xor1
    xor.addAll xor2
    return xor
  }

  ParsingState inhibit(Construction... cxts) {
    if (!cxts) return this

    LinkedHashSet<Construction> toRemove = cxts as LinkedHashSet
    toRemove.retainAll(visibleMites.keySet())

    def state = this
    for (c in toRemove) {
      state = state.removeConstruction(c)
    }

    return state.clone(history: history + new Contribution(this, FList.emptyList, FList.fromList(cxts as List)))
  }

  ParsingState satisfied(Construction name) {
    return removeConstruction(name)
  }

  private ParsingState removeConstruction(Construction name) {
    LinkedHashSet<Mite> newActive = new LinkedHashSet<Mite>(active)
    Set<Mite> toRemove = new LinkedHashSet<Mite>(visibleMites[name] ?: [])
    if (!toRemove) {
      return this
    }

    newActive.removeAll(toRemove)
    return clone(node: new Node(Collections.emptyList(), toRemove, node, this), active:newActive)
  }

  ParsingState startMeta(Variable meta) {
    return clone(chart: chart.startMeta(meta))
  }
  ParsingState finishMeta(Variable meta) {
    return clone(chart: chart.finishMeta(meta))
  }

  private Mite nextInterceptor(Construction start) {
    def mites = visibleMites
    List<Construction> cs = mites.keySet() as List
    def index = cs.indexOf(start)
    if (index >= 0 || !start) {
      def tail = cs.subList(index + 1, cs.size())
      for (cxt in tail) {
        def mite = mites[cxt].reverse().find { it.contents.interceptor }
        if (mite) {
          return mite
        }
      }
    }
    return null
  }

  private Function2<List<Mite>, ParsingState, ParsingState> nextApplier(Construction start) {
    def interceptor = nextInterceptor(start)
    if (interceptor) {
      return { c, s -> ((Interceptor) interceptor.contents.interceptor).intercept(c, s, { c1, s1 ->
        s1.nextApplier(interceptor.cxt).call(c1, s1)
      }) }
    }
    return { c, s -> baseApply(s, c, true) }
  }

  ParsingState apply(Map<Construction, Map> constructions) {
    apply((constructions.keySet() as List<Construction>).collect { it(constructions[it]) } as List)
  }
  ParsingState apply(List<Mite> constructions) {
    if (!constructions) return this

    def applier = nextApplier(null)
    applier(constructions as List<Mite>, this).clone(history: history + new Contribution(this, FList.fromList(constructions).reverse(), FList.emptyList))
  }

  private static ParsingState baseApply(ParsingState state, List<Mite> update, boolean tryAlternatives) {
    Set oldXors = state.activeXors

    LinkedHashSet<Mite> toAsk = state.visibleMites.values().flatten() as LinkedHashSet
    LinkedHashSet<Mite> fullUpdate = update as LinkedHashSet
    for (Mite mite in toAsk) {
      Interceptor interceptor = mite.contents.interceptor ?: new Interceptor()
      fullUpdate.addAll interceptor.enrichUpdate(mite, update, state)
    }
    state = state.addCxt(new Node(fullUpdate as List<Mite>, Collections.emptySet(), state.node, state))

    LinkedHashSet<Mite> preferred = Util.intersect(state.visibleMites.values().collect { it.reverse() }.flatten(), fullUpdate)
    def newActive = suggestActive(state, preferred)
    state = state.activate(newActive)

    for (cxt in state.visibleMites.keySet()) {
      if (!(cxt in state.visibleMites)) continue

      def toAdd = state.visibleMites[cxt].reverse()[0]
      if (toAdd && !(toAdd in state.active)) {
        state = tryAlternative(state, toAdd, oldXors)
      }
    }

    return state.clone(currentGeneration:state.currentGeneration + 1)
  }

  private static ParsingState tryAlternative(ParsingState state, Mite toAdd, Set oldXors) {
    def anotherActive = suggestActive(state, [toAdd])
    def alternative = state.activate(anotherActive)
    if (alternative.dominates(state, oldXors)) {
      return alternative
    }
    return state
  }

  private static LinkedHashSet<Mite> suggestActive(ParsingState state, Collection<Mite> updated) {
    Set<Mite> checked = []
    LinkedHashSet<Mite> newActive = []

    LinkedHashSet<Mite> preferred = rearrangeUpdatedMites(state, updated)
    for (mite in preferred) {
      if (checked.add(mite) && !mite.findContradictors(newActive)) {
        newActive << mite
      }
    }

    List<Mite> all = state.visibleMites.values().collect { it.reverse() }.flatten() as List<Mite>
    for (mite in state.active) {
      if (mite.findContradictors(newActive)) {
        Mite replacement = all.find { cnd -> !cnd.atom && cnd.contradicts(mite) && !cnd.findContradictors(newActive) }
        if (replacement) {
          newActive << replacement
        }
      }
    }

    for (mite in (state.active as LinkedHashSet<Mite>) + all) {
      if (checked.add(mite) && !mite.findContradictors(newActive)) {
        newActive << mite
      }
    }
    return newActive
  }

  public static LinkedHashSet<Mite> rearrangeUpdatedMites(ParsingState state, Collection<Mite> updated) {
    LinkedHashSet<Mite> preferred = []
    LinkedHashSet<Mite> dispreferred = []
    for (mite in state.active) {
      preferred.addAll(updated.findAll { mite.isPartOf(it) })
      for (contr in mite.findContradictors(updated)) {
        if (!contr.atom) {
          dispreferred << contr.src2
        }
      }
    }

    preferred.addAll(updated)
    preferred.removeAll(dispreferred)
    preferred.addAll(updated)
    return preferred
  }

  private ParsingState activate(LinkedHashSet<Mite> newActive) {
    def toRemove = new LinkedHashSet<Mite>(active)
    toRemove.removeAll(newActive)
    toRemove.retainAll(visibleMites.values().flatten())
    def toApply = new LinkedHashSet<Mite>()
    visibleMites.values().each {
      toApply.addAll(it.findAll { it in newActive && !(it in active) })
    }
    toRemove = toRemove.findAll { m1 ->
      def m2 = toApply.find { m1.cxt == it.cxt }
      return !m2 || Util.intersects(m1.primaries, m2.primaries)
    }

    def state = clone(active: newActive)
    state = state.undoChanges(toRemove)
    state = state.clone(chart:addNewUnifications(state, toApply))

    boolean changed = true
    while (changed) {
      changed = false
      for (mite in toApply) {
        if (mite in state.active && mite.contents && mite.cxt.isExecutable([mite])) {
          def prev = state
          state = prev.doApply(mite)
          if (prev.chart != state.chart) {
            changed = true
            break
          }
        }
      }
    }
    state
  }

  private static Chart addNewUnifications(ParsingState state, LinkedHashSet<Mite> toApply) {
    def ch = state.chart
    for (mite in toApply) {
      ch = ch.startMeta(mite)
      for (pair in mite.unifications) {
        ch = ch.addUnificationConstraint(pair.first.base, pair.second.base)
      }
      ch = ch.finishMeta(mite)
    }
    return ch
  }

  private ParsingState undoChanges(Collection<Mite> toRemove) {
    ParsingState state = this
    for (mite in toRemove) {
      state = state.clone(chart:state.chart.removeDifference(mite))
    }
    return state
  }

  private Set getActiveXors() { active.collect { it.contents.xor ?: [] }.flatten() as Set }

  private boolean dominates(ParsingState other, Set oldXors) {
    if ((active.size() < other.active.size() || (oldXors - activeXors).size() < (oldXors - other.activeXors).size()) &&
        !other.dominatesSemantically(this)) {
      return true
    }

    return dominatesSemantically(other)
  }

  private boolean dominatesSemantically(ParsingState other) {
    def humanActions = ['GO', 'BREAK', 'CAN', 'REMEMBER', 'FORGET']
    def verbs = humanActions + ['COME_SCALARLY', 'fact', 'question']
    for (verb in chart.frames.findAll { it.type in verbs }) {
      def alternative = verb.unifiedVar.frame(other.chart)
      if (!alternative) continue

      if (verb.type in humanActions ||
          verb.type == 'COME_SCALARLY' && verb.f('anchor')?.canBeHuman() && alternative.type == 'COME_SCALARLY' && alternative.f('anchor')?.canBeHuman()) {
        boolean meHuman = !verb.f('arg1')?.definitelyNonHuman()
        def otherHuman = !alternative.f('arg1')?.definitelyNonHuman()
        if (meHuman != otherHuman) {
          return meHuman
        }
      }

      if (verb.type && verb.type != 'fact' && !alternative.type) {
        return true
      }

      if (verb.type == 'GO' && alternative.type == 'COME_SCALARLY' && alternative.f('anchor')?.canBeHuman()) {
        return true
      }

      if (((Frame) verb?.definedAttributeValue('arg1'))?.definedAttributeValue('type') &&
          !((Frame) alternative?.definedAttributeValue('arg1'))?.definedAttributeValue('type')) {
        return true
      }

      if (verb.type == 'FORGET' && verb.f('arg2') && !alternative.f('arg2')) {
        return true
      }

      if (verb.type == 'question' && alternative.type == 'fact') {
        def controller = alternative.findClauseController()
        if (!controller || controller.type == 'ASK') {
          return true
        }
      }

    }

    return false
  }

  private ParsingState doApply(Mite mite) {
    ParsingState next = clone(currentGeneration:miteGenerations[mite], chart:chart.startMeta(mite))
    next = mite.cxt.action.call(next, mite.contents)
    return next.clone(currentGeneration:currentGeneration, chart:next.chart.finishMeta(mite))
  }


  ParsingState clearConstructions() {
    return inhibit(visibleMites.keySet() as Construction[])
  }

  ParsingState restore(ParsingState saved) {
    clone(node: saved.node, active:saved.active)
  }

  String presentable() {
    def log = ""
    def mites = visibleMites
    for (k in mites.keySet()) {
      log += "    $k: " + mites[k].collect {
        (it in active ? '*' : '') +
        new LinkedHashMap(it.contents.reverse()) +
        (it.unifications ? ';' + it.unifications.collect { "<$it.first=$it.second>" }.join("") : '')
      }.join(" ") +"\n"
    }
    return log
  }

  List<Mite> everythingAbout(Variable variable) {
    return visibleMites.values().flatten().findAll { Mite mite -> variable in mite.contents.values() } as List<Mite>
  }
}