package cons3

/**
 * @author peter
 */
class ParsingState {
  static final Closure noInit = { it }

  final Chart chart
  final Situation situation
  final Map<Construction, Map> constructions
  final FList<Contribution> history

  ParsingState(Map map) {
    chart = map.chart
    situation = map.situation
    constructions = Collections.unmodifiableMap((Map)map.constructions)
    history = map.history
  }

  private ParsingState clone(Map update) {
    Map current = [chart:chart, situation:situation, constructions:constructions, history:history]
    current.putAll(update)
    return new ParsingState(current)
  }

  ParsingState withSituation(Situation situation) { clearConstructions().clone(situation:situation) }

  Variable newVariable() {
    new Variable()
  }

  ParsingState assign(Variable var, String property, def value) {
    clone(chart: chart.assign(var, situation, property, value))
  }

  Map getAt(Construction construction) {
    constructions[construction]
  }

  ParsingState apply(Map newArgs = [:], Construction name, Closure init = null) {
    def args = newArgs
    if (!args.init && init) {
      args.init = init
    }
    return apply((name): args)
  }

  private boolean overwrites(Construction name, Map newArgs) {
    def oldArgs = constructions[name]
    if (!oldArgs) {
      return true
    }
    for (arg in oldArgs.keySet().intersect(newArgs.keySet())) {
      if (arg != 'init' && arg != 'xor' && oldArgs[arg] != newArgs[arg] && oldArgs[arg]) {
        return true
      }
    }
    return false
  }

  private ParsingState addCtx(Map newArgs, Construction name) {
    return clone(constructions: constructions + [(name): unify(constructions[name], newArgs)])
  }

  static Map unify(Map oldArgs, Map newArgs) {
    def args = oldArgs ? oldArgs + newArgs : newArgs
    def merged = mergeInits((Closure) oldArgs?.init, (Closure) newArgs.init)
    if (merged) {
      args += [init:merged]
    }

    Collection xor = mergeXor(oldArgs, newArgs)
    if (xor) {
      args += [xor:xor]
    }

    return Collections.unmodifiableMap(args)
  }

  static Collection mergeXor(Map oldArgs, Map newArgs) {
    Set xor1 = oldArgs?.xor
    Set xor2 = newArgs?.xor
    def xor = (xor1 ?: Collections.emptySet()) + (xor2 ?: Collections.emptySet())
    if (!xor) {
      xor = null
    }
    return xor
  }

  static Closure mergeInits(Closure oldInit, Closure newInit) {
    return newInit && oldInit ? { ParsingState state -> newInit(oldInit(state)) } : newInit ?: oldInit
  }

  ParsingState inhibit(Construction... cxts) {
    Set<Construction> remaining = constructions.keySet() as LinkedHashSet
    Set<Construction> toRemove = cxts as LinkedHashSet
    toRemove.retainAll(constructions.keySet())
    remaining.removeAll(toRemove)

    def freed = [] as LinkedHashSet
    remaining.each {
      for (c in toRemove) {
        if (contradict(it, c)) {
          freed << it
        }
      }
    }

    def state = this
    for (c in toRemove) {
      state = state.removeConstruction(c)
    }
   return state.applyAll(freed)
  }

  ParsingState satisfied(Construction name) {
    return removeConstruction(name)
  }

  private ParsingState removeConstruction(Construction name) {
    def newConstructions = new HashMap(constructions)
    newConstructions.remove(name)
    return clone(constructions: newConstructions)
  }

  ParsingState apply(Map<Construction, Map<String, Object>> constructions) {
    Set<Construction> fresh = [] as LinkedHashSet
    Set<Construction> old = [] as LinkedHashSet
    Set<Construction> replaced = [] as LinkedHashSet
    for (cxt in constructions.keySet()) {
      if (this.constructions[cxt]) {
        if (overwrites(cxt, constructions[cxt])) {
          replaced << cxt
        } else {
          old << cxt
        }
      } else {
        fresh << cxt
      }
    }
    def result = clone(history: history + new Contribution(this, FLinkedMap.fromMap(constructions))).inhibit(replaced as Construction[])

    for (cxt in constructions.keySet()) {
      result = result.addCtx(constructions[cxt], cxt)
    }

    Set<Construction> bornDead = [] as LinkedHashSet
    for (cxt1 in (fresh + replaced)) {
      for (cxt2 in old) {
        if (result.contradict(cxt1, cxt2)) {
          bornDead << cxt1
        }
      }
    }
    result = result.inhibit(bornDead as Construction[])

    def cs = constructions.keySet() as LinkedHashSet
    cs.retainAll(result.constructions.keySet())
    result = result.applyAll(cs)
    return result
  }

  private ParsingState applyAll(LinkedHashSet<Construction> names) {
    Set<Construction> hanging = [] as LinkedHashSet
    names.each { name1 ->
      names.each { name2 ->
        if (contradict(name1, name2)) {
          hanging << name1
          hanging << name2
        }
      }
    }

    ParsingState result = this
    LinkedHashSet<Construction> others = (constructions.keySet() as LinkedHashSet) - names
    for (name1 in names) {
      for (name2 in others) {
        if (contradict(name1, name2)) {
          result = result.inhibit(name2)
        }
      }
    }

    for (cxt in names) {
      if (!(cxt in hanging)) {
        if (result[cxt]) {
          result = result.doApply(cxt)
        }
      }
    }

    for (cxt1 in hanging) {
      for (cxt2 in hanging) {
        if (cxt1 != cxt2 && result[cxt1] && result[cxt2]) {
          def alt1 = result.apply(cxt1)
          def alt2 = result.apply(cxt2)
          if (alt1.morePlausible(alt2)) {
            result = result.inhibit(cxt2)
          }
          else if (alt2.morePlausible(alt1)) {
            result = result.inhibit(cxt1)
          }
        }
      }
    }

    return result
  }

  boolean morePlausible(ParsingState than) {
    if (than.constructions.keySet().find { it.name == 'nom' } && than.chart.frames(than.situation).find { it.type in ['COME_SCALARLY', 'FORGET'] }?.f('arg1')) {
      return true //todo prohibit two nom's in one situation
    }

    return false
  }

  ParsingState doApply(Construction cxt) {
    def args = constructions[cxt]
    Closure init = args.init ?: noInit
    args = args - [init:args.init]
    def next = this
    next = (ParsingState)init(next)
    return cxt.action.call(next, args)
  }


  ParsingState clearConstructions() {
    return clone(constructions: [:])
  }

  ParsingState restore(Map saved) {
    clone(constructions: saved + this.constructions)
  }

  boolean contradict(Construction c1, Construction c2) {
    if (c1 == c2) return false

    assert this[c1] != null : c1
    assert this[c2] != null : c2

    Set xor1 = this[c1].xor
    Set xor2 = this[c2].xor
    if (xor1 && xor2 && xor1.intersect(xor2)) {
      return true
    }

    return false
  }
}
