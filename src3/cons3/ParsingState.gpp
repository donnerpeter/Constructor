package cons3

/**
 * @author peter
 */
class ParsingState {
  final Chart chart
  final Situation situation
  final FLinkedMap<Construction, List<Mite>> mites
  final Merger constructions = new Merger()
  final FLinkedMap<Mite, Integer> miteGenerations
  final FList<Contribution> history
  final Set<Mite> active
  final int currentGeneration

  ParsingState() {
    this(chart: new Chart(), situation: new Situation(), 
            mites: FLinkedMap.emptyMap,
            history: FList.emptyList, active: Collections.emptySet(), currentGeneration:0, miteGenerations:FLinkedMap.emptyMap)
  }

  ParsingState(Map map) {
    chart = map.chart
    situation = map.situation
    mites = map.mites
    history = map.history
    currentGeneration = map.currentGeneration
    assert (map.active instanceof LinkedHashSet) || !(map.active instanceof HashSet)
    assert (map.groups instanceof LinkedHashSet) || !(map.groups instanceof HashSet)
    active = Collections.unmodifiableSet((Set)map.active)
    miteGenerations = map.miteGenerations
  }
  
  class Merger {
    Map getAt(Construction c) {
      def allMites = mites[c]
      if (allMites == null) {
        return null
      }

      for (Mite mite in allMites) {
        if (mite in active) {
          return mite.contents
        }
      }

      Map value = [:]
      for (part in allMites.reverse()) {
        if (!overwrites(value, part.contents)) {
          value = unify(value, part.contents)
        }
      }
      value
    }
  }

  ParsingState getBeforeThisChange() {
    if (history.empty) {
      return new ParsingState()
    }
    return history[0].before.apply(history[0])
  }

  ParsingState apply(Contribution contribution) {
    return inhibit(contribution.inhibited as Construction[]).apply(contribution.apps)
  }

  private ParsingState clone(Map update) {
    Map current = [chart:chart, situation:situation, mites:mites, history:history, active:active, currentGeneration:currentGeneration, miteGenerations:miteGenerations]
    current.putAll(update)
    return new ParsingState(current)
  }

  static boolean areUnifiableVars(val1, val2) {
    return val1 != val2 && val1 instanceof Variable && val2 instanceof Variable && (val1.light || val2.light)
  }

  ParsingState withSituation(Situation situation) { clearConstructions().clone(situation:situation) }

  ParsingState assign(def var, String property, def value) {
    clone(chart: chart.assign(((Variable)var).base, situation, property, value instanceof Variable ? value.base : value, currentGeneration))
  }
  
  Map getAt(Construction construction) {
    def mite = nextInterceptor(null)
    if (mite) {
      def interceptor = (Interceptor) mite.contents.interceptor
      def args = interceptor.getArgs(construction, this)
      if (args != null) {
        return args
      }
      
    }
    
    constructions[construction]
  }

  ParsingState apply(Map newArgs = [:], Construction name) {
    return apply((name): newArgs)
  }

  static boolean overwrites(Map before, Map newArgs) {
    if (before == null) {
      return false
    }
    for (arg in before.keySet().intersect(newArgs.keySet())) {
      if (arg == 'xor') continue

      def val1 = before[arg]
      def val2 = newArgs[arg]
      if (val1 != val2 && val1 != null && val2 != null && !areUnifiableVars(val1, val2)) {
        return true
      }
    }
    return false
  }

  ParsingState augmentWith(Mite mite) {
    def victim = active.find { it.cxt == mite.cxt }

    def fat = victim ? victim.unify(mite) : mite
    return clone(mites:mites + [(mite.cxt):(mites[mite.cxt] ?: []) + fat],
            active:(active as LinkedHashSet) - victim + fat,
            miteGenerations:miteGenerations.putValue(fat, currentGeneration))
  }

  ParsingState addCxt(boolean activate, Mite... mites) {
    def newMiteGenerations = miteGenerations
    for (mite in mites) {
      newMiteGenerations = newMiteGenerations.putValue(mite, currentGeneration)
    }

    FLinkedMap<Construction, List<Mite>> newMites = this.mites
    for (mite in mites) {
      newMites = newMites + [(mite.cxt):(newMites[mite.cxt] ?: []) + mite]
    }

    Set<Mite> newActive = active
    if (activate) {
      newActive = (active as LinkedHashSet) + (mites as Set)
    }
    return clone(mites:newMites, active:newActive, miteGenerations:newMiteGenerations)
  }

  public static Map unify(Map oldArgs, Map newArgs) {
    def args = new HashMap()
    if (oldArgs) args.putAll(oldArgs)
    if (newArgs) args.putAll(newArgs)

    Collection xor = mergeXor(oldArgs, newArgs)
    if (xor) {
      args.xor = xor
    }

    return args
  }

  static Collection mergeXor(Map oldArgs, Map newArgs) {
    Set xor1 = oldArgs?.xor ?: Collections.emptySet()
    Set xor2 = newArgs?.xor ?: Collections.emptySet()
    if (!xor1 && !xor2) {
      return null
    }

    def xor = new LinkedHashSet()
    xor.addAll xor1
    xor.addAll xor2
    return xor
  }

  ParsingState inhibit(Construction... cxts) {
    if (!cxts) return this

    LinkedHashSet<Construction> toRemove = cxts as LinkedHashSet
    toRemove.retainAll(mites.keySet())

    def state = this
    for (c in toRemove) {
      state = state.removeConstruction(c)
    }

    return state.clone(history: history + new Contribution(this, FList.emptyList, FList.fromList(cxts as List)))
  }

  ParsingState satisfied(Construction name) {
    return removeConstruction(name)
  }

  private ParsingState removeConstruction(Construction name) {
    LinkedHashSet<Mite> newActive = new LinkedHashSet<Mite>(active)
    def toRemove = mites[name] ?: []
    newActive.removeAll(toRemove)
    return clone(mites: mites.removeKey(name), active:newActive)
  }

  ParsingState startMeta(Variable meta) {
    return clone(chart: chart.startMeta(meta))
  }
  ParsingState finishMeta(Variable meta) {
    return clone(chart: chart.finishMeta(meta))
  }

  private Mite nextInterceptor(Construction start) {
    def cs = mites.keyList()
    def index = cs.indexOf(start)
    if (index >= 0 || !start) {
      def tail = cs.subList(index + 1, cs.size())
      for (cxt in tail) {
        def mite = mites[cxt].reverse().find { it.contents.interceptor }
        if (mite) {
          return mite
        }
      }
    }
    return null
  }

  private Function2<List<Mite>, ParsingState, ParsingState> nextApplier(Construction start) {
    def interceptor = nextInterceptor(start)
    if (interceptor) {
      return { c, s -> ((Interceptor) interceptor.contents.interceptor).intercept(c, s, { c1, s1 ->
        s1.nextApplier(interceptor.cxt).call(c1, s1)
      }) }
    }
    return { c, s -> baseApply(s, c, true) }
  }

  ParsingState apply(Map<Construction, Map> constructions) {
    apply((constructions.keySet() as List<Construction>).collect { it(constructions[it]) } as List)
  }
  ParsingState apply(List<Mite> constructions) {
    if (!constructions) return this

    def applier = nextApplier(null)
    applier(constructions as List<Mite>, this).clone(history: history + new Contribution(this, FList.fromList(constructions).reverse(), FList.emptyList))
  }

  private static ParsingState baseApply(ParsingState state, List<Mite> update, boolean tryAlternatives) {
    List<Mite> newMites = []
    Map<Mite, Mite> inheritors = [:]
    for (mite in update.reverse()) {
      def c = mite.cxt
      def existing = state.mites[c]
      if (mite.contents && !existing?.find { !it.contradicts(mite) && it.unify(mite) == it } || !existing) {
        newMites << mite
        existing?.each {
          if (!it.contradicts(mite)) {
            def union = it.unify(mite)
            newMites << union
            if (it in state.active) {
              inheritors[it] = union
            }
          }
        }
      }
    }

    state = state.addCxt(false, newMites as Mite[])
    
    LinkedHashSet<Mite> toConsider = [] 

    for (mite in state.active) {
      def next = inheritors[mite]
      if (next) {
        toConsider << next
      }
    }

    for (mite in update) {
      toConsider += state.mites[mite.cxt].reverse()[0]
    }

    def newActive = suggestActive(state, toConsider)
    state = state.activate(newActive)

    for (cxt in state.mites.keySet()) {
      if (!(cxt in state.mites)) continue

      def toAdd = state.mites[cxt].reverse()[0]
      if (toAdd && !(toAdd in state.active)) {
        state = tryAlternative(state, toAdd)
      }
    }

    return state.clone(currentGeneration: state.currentGeneration + 1)
  }

  private static ParsingState tryAlternative(ParsingState state, Mite toAdd) {
    def anotherActive = suggestActive(state, [toAdd])
    def alternative = state.activate(anotherActive)
    if (alternative.dominates(state)) {
      return alternative
    }
    return state
  }

  private static LinkedHashSet<Mite> suggestActive(ParsingState state, Collection<Mite> preferred) {
    LinkedHashSet<Mite> newActive = []
    for (mite in preferred) {
      if (!mite.findContradictors(newActive)) {
        newActive << mite
      }
    }

    List<Mite> all = state.mites.values().collect { it.reverse() }.flatten()
    LinkedHashSet<Mite> active = Util.intersect(all, state.active)
    for (mite in active) {
      if (mite.findContradictors(newActive)) {
        List<Mite> candidates = all.findAll { cnd -> cnd.contradicts(mite) && !cnd.findContradictors(newActive) }
        def best = candidates.find { b -> active.every { b.cxt != it.cxt } }
        best = best ?: candidates.find { b -> active.any { b.cxt == it.cxt && !overwrites(it.contents, b.contents) } }
        best = best ?: candidates[0]
        if (best) {
          newActive << best
        }
      }
    }

    for (mite in active) {
      if (!mite.findContradictors(newActive)) {
        newActive << mite
      }
    }

    for (mite in all) {
      if (!mite.findContradictors(newActive)) {
        newActive << mite
      }
    }
    return newActive
  }

  private ParsingState activate(LinkedHashSet<Mite> newActive) {
    def toRemove = new LinkedHashSet<Mite>(active)
    toRemove.removeAll(newActive)
    def toApply = new LinkedHashSet<Mite>()
    mites.values().each {
      toApply.addAll(it.findAll { it in newActive && !(it in active) })
    }

    def state = clone(active: newActive)
    for (mite in toRemove) {
      if (mite.findContradictors(toApply).find { mite.cxt != it.cxt }) {
        state = state.clone(chart:state.chart.removeDifference(mite)).doApply(mite.cxt)
      }
    }
    for (mite in toApply) {
      if (state.mites[mite.cxt]) {
        state = state.doApply(mite.cxt)
      }
    }
    state
  }
  

  private boolean dominates(ParsingState other) {
    if (active.size() < other.active.size() && !other.dominatesSemantically(this)) {
      return true
    }

    return dominatesSemantically(other)
  }

  private boolean dominatesSemantically(ParsingState other) {
    def humanActions = ['GO', 'BREAK', 'CAN', 'REMEMBER', 'FORGET']
    def verbs = humanActions + ['COME_SCALARLY', 'fact', 'question']
    for (verb in chart.frames.findAll { it.type in verbs }) {
      def alternative = verb.var.frame(other.chart)
      if (!alternative) continue

      if (verb.type in humanActions) {
        boolean meHuman = !verb.f('arg1')?.definitelyNonHuman()
        if (meHuman != !alternative.f('arg1')?.definitelyNonHuman()) {
          return meHuman
        }
      }

      if (verb.type && verb.type != 'fact' && !alternative.type) {
        return true
      }

      if (verb.type == 'GO' && alternative.type == 'COME_SCALARLY' && alternative.f('anchor')?.canBeHuman()) {
        return true
      }

      if (((Frame) verb?.definedAttributeValue('arg1'))?.definedAttributeValue('type') &&
          !((Frame) alternative?.definedAttributeValue('arg1'))?.definedAttributeValue('type')) {
        return true
      }

      if (verb.type == 'FORGET' && verb.f('arg2') && !alternative.f('arg2')) {
        return true
      }

      if (verb.type == 'question' && alternative.type == 'fact') {
        def controller = alternative.findClauseController()
        if (!controller || controller.type == 'ASK') {
          return true
        }
      }

    }

    return false
  }

  private ParsingState doApply(Construction cxt) {
    Mite mite = mites[cxt].find { it in active }
    if (!mite) return this

    def ch = chart.startMeta(mite)
    for (pair in mite.unifications) {
      ch = ch.addUnificationConstraint(pair.first.base, pair.second.base)
    }
    ParsingState next = clone(currentGeneration:miteGenerations[mite], chart:ch)
    if (mite.contents && cxt.isExecutable([mite])) {
      next = cxt.action.call(next, mite.contents)
    }
    return next.clone(currentGeneration:currentGeneration, chart:next.chart.finishMeta(mite))
  }


  ParsingState clearConstructions() {
    return inhibit(mites.keyList() as Construction[])
  }

  ParsingState restore(ParsingState saved) {
    LinkedHashSet<Mite> newActive = new LinkedHashSet<Mite>(saved.active)
    newActive.addAll(active)
    for (c in saved.mites.keyList()) {
      if (c in this.mites) {
        newActive.removeAll(saved.mites[c])
      }
    }
    clone(mites: saved.mites + this.mites, active:newActive)
  }

}