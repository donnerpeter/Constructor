package cons3

/**
 * @author peter
 */
class ParsingState {
  static final ParsingState EMPTY = new ParsingState()
  final Chart chart
  final Node node
  private final FLinkedMap<Mite, Integer> miteGenerations
  final FList<Contribution> history
  final Network network
  private final int currentGeneration

  ParsingState() {
    this(chart: new Chart(),
            node: Node.EMPTY,
            history: FList.emptyList, network: new Network([:], [:], []), currentGeneration:0, miteGenerations:FLinkedMap.emptyMap, byXor:Collections.emptyMap())
  }

  ParsingState(Map map) {
    chart = map.chart
    node = map.node
    history = map.history
    currentGeneration = map.currentGeneration
    assert (map.active instanceof LinkedHashSet) || !(map.active instanceof HashSet)
    assert (map.groups instanceof LinkedHashSet) || !(map.groups instanceof HashSet)
    network = map.network
    miteGenerations = map.miteGenerations
  }

  List<Mite> getMiteList() {
    return visibleMites.values().collect { it.reverse() }.flatten() as List
  }

  Map<Construction, List<Mite>> getVisibleMites() {
    return node.visibleMites
  }

  private ParsingState clone(Map update) {
    Map current = [chart:chart, node:node, history:history, network:network, currentGeneration:currentGeneration, miteGenerations:miteGenerations]
    current.putAll(update)
    return current == update ? this : new ParsingState(current)
  }


  ParsingState assign(def var, String property, def value) {
    clone(chart: chart.assign(((Variable)var).base, property, value instanceof Variable ? value.base : value, currentGeneration))
  }

  ParsingState advanceSection() {
    clone(chart: chart.advanceSection())
  }

  Map getAt(Construction c) {
    def allMites = visibleMites[c]
    if (allMites == null) {
      return null
    }

    for (Mite mite in allMites.reverse()) {
      if (network.isChosen(mite)) {
        return mite.contents
      }
    }

    Map value = [:]
    for (part in allMites.reverse()) {
      if (!Mite.overwrites(value, part.contents)) {
        value = Mite.unify(value, part.contents)
      }
    }
    value
  }

  ParsingState apply(Map newArgs = [:], Construction name) {
    return apply((name): newArgs)
  }

  private ParsingState addCxt(Node node) {
    def newMiteGenerations = miteGenerations
    for (mite in node.ownMites) {
      newMiteGenerations = newMiteGenerations.putValue(mite, currentGeneration)
    }

    return clone(node:node, miteGenerations:newMiteGenerations, network:network.addMites(node.ownMites as LinkedHashSet))
  }

  ParsingState startMeta(Variable meta) {
    return clone(chart: chart.startMeta(meta))
  }
  ParsingState finishMeta(Variable meta) {
    return clone(chart: chart.finishMeta(meta))
  }

  private Mite nextInterceptor(Construction start) {
    def mites = visibleMites
    List<Construction> cs = mites.keySet() as List
    def index = cs.indexOf(start)
    if (index >= 0 || !start) {
      def tail = cs.subList(index + 1, cs.size())
      for (cxt in tail) {
        def mite = mites[cxt].reverse().find { it.contents.interceptor }
        if (mite) {
          return mite
        }
      }
    }
    return null
  }

  private Function2<List<Mite>, ParsingState, ParsingState> nextApplier(Construction start) {
    def interceptor = nextInterceptor(start)
    if (interceptor) {
      return { c, s -> ((Interceptor) interceptor.contents.interceptor).intercept(c, s, { c1, s1 ->
        s1.nextApplier(interceptor.cxt).call(c1, s1)
      }) }
    }
    return { c, s -> baseApply(s, c) }
  }

  ParsingState apply(Map<Construction, Map> constructions) {
    apply((constructions.keySet() as List<Construction>).collect { it(constructions[it]) } as List)
  }
  ParsingState apply(List<Mite> constructions) {
    if (!constructions) return this

    def applier = nextApplier(null)
    applier(constructions as List<Mite>, this).clone(history: history + new Contribution(this, FList.fromList(constructions).reverse(), FList.emptyList))
  }

  private static ParsingState baseApply(ParsingState state, List<Mite> update) {
    LinkedHashSet<Mite> fullUpdate = enrichUpdate(update, state)
    assert fullUpdate
    state = state.addCxt(new Node(fullUpdate as List<Mite>, Collections.emptySet(), state.node, state))

    def newActive = state.network.choose(fullUpdate)
    state = state.activate(newActive)

    for (cxt in state.visibleMites.keySet()) {
      if (!(cxt in state.visibleMites)) continue

      List<Mite> toCheck = (fullUpdate as List<Mite>).findAll { it.cxt == cxt }
      def last = state.visibleMites[cxt].reverse()[0]
      if (last) {
        toCheck << last
      }

      for (toAdd in toCheck.reverse()) {
        if (!state.network.isChosen(toAdd)) {
          state = tryAlternative(state, toAdd)
        }
      }
    }

    return state.clone(currentGeneration:state.currentGeneration + 1)
  }

  private static LinkedHashSet<Mite> enrichUpdate(List<Mite> update, ParsingState state) {
    LinkedHashSet<Mite> fullUpdate = update as LinkedHashSet
    Mite via = null
    while (state) {
      ParsingState bestPrev = state.node.prevState
      List<Mite> filtered = update
      boolean hasEmpty = false
      Mite nextVia = null
      for (mite in state.node.ownMites) {
        fullUpdate.addAll((mite.cxt.enrichAction(mite, update, state) as List<Mite>).reverse())

        def prevState = mite.cxt.showPrev(mite, state.node.prevState, via)
        hasEmpty |= prevState == EMPTY
        if (prevState && prevState != EMPTY && (bestPrev == null || bestPrev.node.isMoreRecentThan(prevState.node))) {
          bestPrev = prevState
          nextVia = mite
          filtered = update.findAll { mite.cxt.filterUpdate(mite, it) }
        }
      }
      if (hasEmpty && bestPrev == state.node.prevState) {
        break
      }
      state = bestPrev
      update = filtered
      via = nextVia
    }
    fullUpdate
  }

  private static ParsingState tryAlternative(ParsingState state, Mite toAdd) {
    def anotherActive = state.network.choose([toAdd])
    def alternative = state.activate(anotherActive)
    try {
      if (alternative.dominates(state)) {
        return alternative
      }
    } catch (Throwable e) {
      println alternative.chart.presentable() + "\n\n"
      println alternative.presentable() + "\n\n"
      throw e
    }
    return state
  }

  private ParsingState activate(Network newActive) {
    def toRemove = Util.minus(network._chosen, newActive._chosen)
    LinkedHashSet<Mite> toApply = Util.minus(newActive._chosen, network._chosen)
    toApply = Util.intersect(toApply, node.ownMites) + toApply + Util.intersect(miteList, newActive._chosen)

    def state = clone(network:newActive)
    state = state.undoChanges(toRemove)
    state = state.clone(chart:addNewUnifications(state, toApply))

    boolean changed = true
    while (changed) {
      changed = false
      for (mite in toApply) {
        if (state.network.isChosen(mite) && mite.contents && mite.cxt.isExecutable([mite])) {
          def prev = state
          state = prev.doApply(mite)
          if (prev.chart != state.chart) {
            changed = true
            break
          }
        }
      }
    }
    state
  }

  private static Chart addNewUnifications(ParsingState state, LinkedHashSet<Mite> toApply) {
    def ch = state.chart
    for (mite in toApply) {
      ch = ch.startMeta(mite)
      for (pair in mite.unifications) {
        ch = ch.addUnificationConstraint(pair.first.base, pair.second.base)
      }
      ch = ch.finishMeta(mite)
    }
    return ch
  }

  private ParsingState undoChanges(Collection<Mite> toRemove) {
    ParsingState state = this
    for (mite in toRemove) {
      state = state.clone(chart:state.chart.removeDifference(mite))
    }
    return state
  }

  private boolean dominates(ParsingState other) {
    if (network.unsatisfiedDaughters.size() < other.network.unsatisfiedDaughters.size() &&
        !other.dominatesSemantically(this)) {
      return true
    }

    return dominatesSemantically(other)
  }

  private boolean dominatesSemantically(ParsingState other) {
    def humanActions = ['GO', 'BREAK', 'CAN', 'REMEMBER', 'FORGET']
    def verbs = humanActions + ['COME_SCALARLY', 'fact', 'question']
    for (frame in chart.frames) {
      def alternative = frame.unifiedVar.frame(other.chart)
      if (frame.f('member') && alternative.flatten().every { it.type != null } && !frame.flatten().every { it.type != null }) {
        return false
      }
      if (!frame.type && alternative.type && frame.f('quantifier')?.type) {
        return false
      }
    }
    for (verb in chart.frames.findAll { it.type in verbs }) {
      def alternative = verb.unifiedVar.frame(other.chart)

      if (verb.type in humanActions ||
          verb.type == 'COME_SCALARLY' && verb.f('anchor')?.canBeHuman() && alternative.type == 'COME_SCALARLY' && alternative.f('anchor')?.canBeHuman()) {
        boolean meHuman = !verb.f('arg1')?.definitelyNonHuman()
        def otherHuman = !alternative.f('arg1')?.definitelyNonHuman()
        if (meHuman != otherHuman) {
          return meHuman
        }
      }

      if (verb.type == 'COME_SCALARLY' && verb.f('anchor')?.definitelyNonHuman() && verb.f('arg1')?.definitelyNonHuman() && alternative.type == 'GO') {
        return true
      }

      if (verb.type && verb.type != 'fact' && !alternative.type) {
        return true
      }

      if (verb.type == 'GO' && alternative.type == 'COME_SCALARLY' && alternative.f('anchor')?.canBeHuman()) {
        return true
      }

      if (((Frame) verb?.definedAttributeValue('arg1'))?.definedAttributeValue('type') &&
          !((Frame) alternative?.definedAttributeValue('arg1'))?.definedAttributeValue('type')) {
        return true
      }

      if (verb.type == 'FORGET' && verb.f('arg2') && !alternative.f('arg2')) {
        return true
      }

      if (verb.type == 'question' && alternative.type == 'fact') {
        def controller = alternative.findClauseController()
        if (!controller || controller.type == 'ASK') {
          return true
        }
      }

    }

    return false
  }

  private ParsingState doApply(Mite mite) {
    ParsingState next = clone(currentGeneration:miteGenerations[mite]?:currentGeneration, chart:chart.startMeta(mite))
    next = mite.cxt.action.call(next, mite.contents)
    return next.clone(currentGeneration:currentGeneration, chart:next.chart.finishMeta(mite))
  }

  String presentable() {
    def log = ""
    def mites = visibleMites
    log += " - - uni: " + chart.__unifications.keySet().collect { "${it.iterator().next()}=" + (it as List)[1] }.join(", ") + "\n"
    for (k in mites.keySet()) {
      log += "    $k: " + mites[k].collect {
        (network.isChosen(it) ? '*' : '') +
        new LinkedHashMap(it.contents.reverse()) +
        (it.unifications ? ';' + it.unifications.collect { "<$it.first=$it.second>" }.join("") : '')
      }.join(" ") +"\n"
    }
    return log
  }

  ParsingState findState(Mite mite, String attr) {
    findState(mite.primaries.find { it.contents[attr] })
  }
  ParsingState findState(Mite mite) {
    if (mite in node.ownMites) {
      return this
    }
    return prevState?.findState(mite)
  }

  ParsingState getPrevState() {
    return node.prevState
  }
}