package cons3

import groovy.transform.TupleConstructor

/**
 * @author peter
 */
@TupleConstructor
class SeqInterceptor extends Interceptor implements RussianConstructions {
  ParsingState before

  SeqInterceptor(ParsingState before) {
    this.before = before
  }

  @Override
  Collection<Mite> enrichUpdate(Mite self, List<Mite> constructions, ParsingState state) {
    def plainMerge = super.enrichUpdate(self, constructions.findAll { self.contents.conj || it.cxt == seq && !it.contents.conj } as List, state)
    if (state[seq]?.precedent == null && state[seq]?.rollback) {
      return plainMerge
    }

    List<Mite> result = []

    Map<Pair<Variable, Variable>, Variable> seqs = [:]

    ParsingState rollback = null

    String conj = state[seq]?.conj
    for (mite in constructions) {
      if (mite.cxt in [nom] && constructions.any { it.cxt in [nomSubject]}) {
        continue
      }

      Mite oldMite = before.visibleMites[mite.cxt]?.reverse()?.getAt(0)
      if (oldMite != null) {
        def nextRollback = before.node.findNode(oldMite).prevState
        def newUpdate = merge(state, mite.cxt, oldMite?.contents, mite.contents, result, seqs, declOrQuestionComp in constructions, nextRollback)
        if (newUpdate) {
          rollback = nextRollback
        }
      }
    }

    if (rollback != null) {
      seqs.each { pair, multi ->
        result.add(0, seq(conj:conj, interceptor:new SeqInterceptor(state), rollback:rollback,
                multi:multi, second:pair.second, first:(multi == pair.first ? null : pair.first), id:self.contents.id))

      }

    }
    return plainMerge + result
  }

  private boolean merge(ParsingState state, Construction cxt, Map oldArgs, Map newArgs, List<Mite> update, Map<Pair<Variable, Variable>, Variable> seqs, boolean clauseLevel, ParsingState beforeState) {
    String conj = state[seq]?.conj
    if (oldArgs != null) {
      if (cxt == elaboration && before[cxt]?.head && oldArgs.elaboration && newArgs.elaboration) {
        return doMerge(state, cxt, oldArgs, newArgs, 'elaboration', update, seqs, beforeState)
      }
      if (cxt == complementizer && oldArgs.content && newArgs.content && before[cxt]?.frame && before[cxt].content) {
        return doMerge(state, cxt, oldArgs, newArgs, 'content', update, seqs, beforeState)
      }
      if (cxt == declOrQuestionComp && !before[cxt]?.head && oldArgs.comp && newArgs.comp && oldArgs.comp != state[cxt]?.head) {
        return doMerge(state, cxt, oldArgs, newArgs, 'comp', update, seqs, beforeState)
      }
      if (cxt in [nomSubject]) {
        if (before[cxt]?.noun) {
          newArgs += [noun:before[cxt].noun]
          update.addAll new Mite(reflexiveHolder, noun:before[cxt].noun).unifyWherePossible(beforeState)
        }
        if (conj == 'but') {
          Variable second = newArgs.head
          Variable first = oldArgs.head
          joinedVar(seqs, first, second)
          update.addAll new Mite(newArgs, nom).unifyWherePossible(beforeState)
          return true
        }
        return doMerge(state, cxt, oldArgs, newArgs, 'head', update, seqs, beforeState)
      }

      if (clauseLevel) return false

      if (cxt in [nom, acc, gen, dat, poDat] && oldArgs.noun && newArgs.noun && conj != 'but') {
        return doMerge(state, cxt, oldArgs, newArgs, 'noun', update, seqs, beforeState)
      }
      if (cxt in [preposition] && oldArgs.prep == newArgs.prep) {
        update.addAll new Mite(newArgs + [repeated:true], cxt).unifyWherePossible(beforeState)
        return true
      }
      if (cxt in [gen] && oldArgs.head && newArgs.head && !newArgs.noun) {
        return doMerge(state, cxt, oldArgs, newArgs, 'head', update, seqs, beforeState)
      }
      if (cxt == possessive && oldArgs.possessor && newArgs.possessor) {
        return doMerge(state, cxt, oldArgs, newArgs, 'possessor', update, seqs, beforeState)
      }
      if (cxt == possessive && oldArgs.head && newArgs.head) {
        return doMerge(state, cxt, oldArgs, newArgs, 'head', update, seqs, beforeState)
      }
    }

    return false
  }


  private boolean doMerge(ParsingState state, Construction cxt, Map oldArgs, Map newArgs, String prop, List<Mite> update, Map<Pair<Variable, Variable>, Variable> seqs, ParsingState beforeState) {
    Variable first = (Variable) oldArgs[prop]
    Variable second = newArgs[prop]
    Variable multi = first.frame(state.chart).f('member') ? first : null
    if (multi) {
      def oldConj = multi.frame(state.chart).s('conj')
      if (!oldConj || oldConj == state[seq]?.conj) {
        def pair = new Pair(multi, second)
        if (!seqs[pair]) {
          seqs[pair] = multi
        }
      }
    } else {
      multi = joinedVar(seqs, first, second)
      if (first.light && second.light) {
        multi = multi.lightVar
      }
    }
    update.addAll cxt(newArgs + [(prop):multi, xor:ParsingState.mergeXor(oldArgs, newArgs)]).unifyWherePossible(beforeState)
    return true
  }

  private Variable joinedVar(Map<Pair<Variable, Variable>, Variable> seqs, Variable first, second) {
    Variable multi = seqs[new Pair(first, second)] ?: new Variable("$first&$second")
    seqs[new Pair(first, second)] = multi
    return multi
  }

  @Override
  public String toString() {
    return "SeqInterceptor{" + "before=" + before + '}';
  }
}
