package cons3

/**
 * @author peter
 */

class Chart {
  private final List<Situation> situations = []

  Situation newSituation() {
    def result = new Situation(this)
    situations << result
    return result
  }

  String presentable() {
    situations.collect { it.presentable() }.join("\n--\n")
  }
}

class Situation extends Frame {
  final Chart chart
  private final List<Frame> frames = []
  private final List<Assignment> assignments = []
  private final Set<Assignment> constraints = []

  Situation(Chart chart) {
    super("this")
    this.chart = chart
  }

  Frame newFrame() {
    def result = new Frame(String.valueOf((char)(frames.size() + (int)'A'.charAt(0))))
    frames << result
    return result
  }

  void assign(Frame frame, String property, String value, boolean rheme) {
    _assign(new StringAssignment(frame, property, value), rheme)
  }

  void assign(Frame frame, String property, Frame value, boolean rheme) {
    _assign(new FrameAssignment(frame, property, value), rheme)
  }

  private def _assign(Assignment assignment, boolean rheme) {
    assignments << assignment
    if (!rheme) {
      constraints << assignment
    }
  }

  String presentable() {
    assignments.collect { def eq ->
      return "$eq.frame.$eq.property${eq in constraints ? "==" : ":="}$eq.value"
    }.join("\n")
  }

}

class Frame {
  private String id

  Frame(String id) {
    this.id = id
  }

  String toString() {
    return id
  }


}

class Assignment<T> {
  final Frame frame
  final String property
  final T value

  Assignment(Frame frame, String property, T value) {
    this.frame = frame
    this.property = property
    this.value = value
  }

}

class StringAssignment extends Assignment<String> {

  StringAssignment(Frame frame, String property, String value) {
    super(frame, property, value)
  }

}

class FrameAssignment extends Assignment<Frame> {

  FrameAssignment(Frame frame, String property, Frame value) {
    super(frame, property, value)
  }

}