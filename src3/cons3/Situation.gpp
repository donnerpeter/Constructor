package cons3

/**
 * @author peter
 */

class Situation extends Variable {

  String presentable(Chart chart) {
    Map<Variable, String> naming = [:]

    (chart.vars(this).collect { chart.getUnifiedVar(it) } as LinkedHashSet<Variable>).eachWithIndex { Variable var, int i ->
      naming[var] = String.valueOf((char)(i + (int)'A'.charAt(0)))
    }
    chart.vars(this).each {
      naming[it] = naming[chart.getUnifiedVar(it)]
    }
    chart.situations.eachWithIndex { Situation sit, int i ->
      naming[sit] = "#${i + 1}"
    }

    Set<Variable> prevMetas = []
    LinkedHashSet<String> lines = []
    for (eq in chart.getActiveAssignments(this)) {
      Set<Variable> metas = chart.__metas[eq].findAll { it instanceof Variable } as Set
      for (finished in (prevMetas - metas)) {
        lines << "</${naming[finished]}>"
      }
      for (started in (metas - prevMetas)) {
        lines << "<${naming[started]}>"
      }
      prevMetas = metas
      lines << "${naming[eq.frame]}.$eq.property=${ eq.value instanceof String ? eq.value : naming[(Variable)eq.value]}"
    }
    for (finished in prevMetas) {
      lines << "</${naming[finished]}>"
    }
    return lines.join("\n")
  }

}

class Variable {
  static int counter = 0

  final String id
  final Variable base
  private final Variable lightVar

  Variable() {
    id = ((this instanceof Situation) ? 'Sit' : 'Var') + counter++
    base = this
    lightVar = new Variable(this)
  }

  Variable(String comment) {
    id = "Var${counter++}[$comment]"
    base = this
    lightVar = new Variable(this)
  }

  private Variable(Variable base) {
    id = base.id + "_light"
    this.base = base
    lightVar = null
  }

  Variable getLightVar() {
    assert !light
    lightVar
  }

  boolean isLight() {
    return base != this
  }

  String toString() {
    return "$id"
  }

  Frame frame(Chart chart) {
    new Frame(this, chart.__vars[this], chart)
  }

}

