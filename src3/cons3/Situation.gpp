package cons3

/**
 * @author peter
 */

class Chart {
  final List<Situation> situations = []
  final Map<Situation, List<Frame>> frames = [:]

  Situation newSituation() {
    def result = new Situation('#' + (situations.size() + 1), this)
    situations << result
    frames[result] = []
    return result
  }

  Frame newFrame(Situation situation) {
    def result = new Frame(String.valueOf((char)(frames[situation].size() + (int)'A'.charAt(0))), situation)
    frames[situation] << result
    return result
  }

  String presentable() {
    situations.collect { it.presentable() }.join("\n--\n")
  }
}

class Situation extends Frame {
  final Chart chart
  final List<Assignment> _assignments = []
  final Set<Assignment> _constraints = []

  Situation(String id, Chart chart) {
    super(id, null)
    this.chart = chart
  }

  List<Frame> getFrames() {
    return chart.frames[this]
  }

  Frame newFrame() {
    return chart.newFrame(this)
  }

  void assign(Frame frame, String property, String value, boolean rheme) {
    _assign(new StringAssignment(frame, property, value), rheme)
  }

  void assign(Frame frame, String property, Frame value, boolean rheme) {
    _assign(new FrameAssignment(frame, property, value), rheme)
  }

  private def _assign(Assignment assignment, boolean rheme) {
    _assignments << assignment
    if (!rheme) {
      _constraints << assignment
    }
  }

  String presentable() {
    _assignments.collect { def eq ->
      return "${eq.frame == (Situation) this ? 'this' : eq.frame.id}.$eq.property${eq in _constraints ? "==" : ":="}${eq.stringValue()}"
    }.join("\n")
  }

}

class Frame {
  final String id
  final Situation situation

  Frame(String id, Situation situation) {
    this.id = id
    this.situation = situation ?: (Situation) this
  }

  String toString() {
    return "$id: ${situation._assignments.findAll { it.frame == (Frame) this }}"
  }

  Frame f(String attr) {
    def asg = allAssignments(attr)[0]
    asg instanceof FrameAssignment ? asg.value : null
  }

  String s(String attr) {
    def asg = allAssignments(attr)[0]
    asg instanceof StringAssignment ? asg.value : null
  }

  String getType() { s('type') }

  List<Assignment> allAssignments(String attr) {
    return situation._assignments.findAll { it.frame == (Frame) this && it.property == attr }
  }
}

abstract class Assignment<T> {
  final Frame frame
  final String property
  final T value

  Assignment(Frame frame, String property, T value) {
    assert frame
    assert property
    this.frame = frame
    this.property = property
    this.value = value
  }

  @Override
  String toString() {
    return "$frame.id.$property=${stringValue()}"
  }

  abstract String stringValue();

  boolean isRheme() {
    this in frame.situation._constraints
  }

}

class StringAssignment extends Assignment<String> {

  StringAssignment(Frame frame, String property, String value) {
    super(frame, property, value)
  }

  @Override
  String stringValue() {
    value
  }

}

class FrameAssignment extends Assignment<Frame> {

  FrameAssignment(Frame frame, String property, Frame value) {
    super(frame, property, value)
  }

  @Override
  String stringValue() {
    value.id
  }

}