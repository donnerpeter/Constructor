package cons3

/**
 * @author peter
 */

class Chart {
  final List<Situation> situations = []
  final Map<Situation, List<Variable>> variables = [:]
  final Map<Situation, List<Assignment<Variable>>> __assignments = [:]

  Chart() {
    this([], [:], [:])
  }

  private Chart(List<Situation> situations, Map<Situation, List<Variable>> variables, Map<Situation, List<Assignment<Variable>>> __assignments) {
    this.situations = situations
    this.variables = variables
    this.__assignments = __assignments
  }

  List<Frame> frames(Situation situation) {
    variables[situation].collect { it.frame(this) }
  }

  List<Assignment<Frame>> allAssignments(Situation situation) {
    __assignments[situation].collect {
      def oldValue = it.value
      def newValue = oldValue instanceof String ? oldValue : ((Variable) oldValue).frame(this)
      Frame newFrame = it.frame.frame(this)
      new Assignment<Frame>(newFrame, it.property, newValue, it.rheme)
    }
  }

  List newSituation() {
    def result = new Situation('#' + (situations.size() + 1))
    Map<Situation, List<Variable>> newVars = variables + [(result): []]
    Map<Situation, List<Assignment<Variable>>> newAss = __assignments + [(result): []]
    List<Situation> newSitu = situations + [result]
    return [new Chart(newSitu, newVars, newAss), result]
  }

  List newFrame(Situation situation) {
    def result = new Variable(String.valueOf((char)(variables[situation].size() + (int)'A'.charAt(0))), situation)
    Map<Situation, List<Variable>> newVars = [:] + variables
    newVars[situation] = newVars[situation] + [result]
    return [new Chart(situations, newVars, __assignments), result]
  }

  Chart assign(Variable frame, String property, value, boolean rheme) {
    assert value instanceof String || value instanceof Variable
    assert frame
    Map<Situation, List<Assignment<Variable>>> newAsss = [:] + __assignments
    newAsss[frame.situation] = newAsss[frame.situation] + [new Assignment(frame, property, value, rheme)]
    return new Chart(situations, variables, newAsss)
  }

  String presentable() {
    situations.collect { it.presentable(this) }.join("\n--\n")
  }
}

class Situation extends Variable {

  Situation(String id) {
    super(id, null)
  }

  String presentable(Chart chart) {
    chart.__assignments[this].collect { def eq ->
      return "${eq.frame == (Situation) this ? 'this' : eq.frame.id}.$eq.property${eq.rheme ? ":=" : "=="}${eq.stringValue()}"
    }.join("\n")
  }

}

class Frame {
  final Variable var
  final Chart chart

  Frame(Variable var, Chart chart) {
    this.var = var
    this.chart = chart
  }

  String toString() {
    return "$var: ${chart.allAssignments(var.situation).findAll { it.frame == (Frame) this }}"
  }

  Frame f(String attr) {
    def v = allAssignments(attr)[0]?.value
    v instanceof Frame ? (Frame) v : null
  }

  String s(String attr) {
    def v = allAssignments(attr)[0]?.value
    v instanceof String ? (String) v : null
  }

  String getType() { s('type') }

  List<Assignment<Frame>> allAssignments(String attr) {
    return chart.allAssignments(var.situation).findAll { it.frame.var == var && it.property == attr }
  }

  boolean equals(o) {
    if (this.is(o)) return true;
    if (!(o instanceof Frame)) return false;

    Frame frame = (Frame) o;

    if (chart != frame.chart) return false;
    if (var != frame.var) return false;

    return true;
  }

  int hashCode() {
    int result;
    result = var.hashCode();
    result = 31 * result + chart.hashCode();
    return result;
  }
}

class Variable {
  final String id
  final Situation situation

  Variable(String id, Situation situation) {
    this.id = id
    this.situation = situation ?: (Situation) this
  }

  String toString() {
    return "$id in $situation.id"
  }

  Frame frame(Chart chart) {
    new Frame(this, chart)
  }

}

class Assignment<T> {
  final T frame
  final String property
  final Object value
  final boolean rheme

  Assignment(T frame, String property, def value, boolean rheme) {
    assert frame
    assert property
    this.frame = frame
    this.property = property
    this.value = value
    this.rheme = rheme
  }

  @Override
  String toString() {
    return "${frameId(frame)}.$property=${stringValue()}"
  }

  String stringValue() {
    return value instanceof String ? value : frameId(value)
  }

  private String frameId(value) {
    return value instanceof Variable ? ((Variable) value).id : ((Frame) value).var.id
  }

}
