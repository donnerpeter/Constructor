package cons3

/**
 * @author peter
 */
class Update {
  FList<Mite> mites

  Update(Mite... mites) {
    this(mites as List)
  }
  Update(List<Mite> mites) {
    this.mites = mites instanceof FList ? mites : FList.fromList(mites)
  }

  Update plus(Update update) {
    return addMites(update.mites.reverse() as Mite[])
  }
  Update plus(Map<Construction, Map> constructions) {
    return addMites((constructions.keySet() as List<Construction>).collect { it(constructions[it]) } as Mite[])
  }

  Update addCxt(Map newArgs, Construction name) {
    return addMites(name(newArgs))
  }

  Update addMites(Mite... mites) {
    return new Update(this.mites.prependAll(mites.findAll { !(it in this.mites) }))
  }

  ParsingState apply(ParsingState state) {
    return state.apply(mites.reverse())
  }
}
