package cons2

import junit.framework.TestCase

/**
 * @author peter
 */
class KharmsTest extends TestCase {

  public void test7or8() throws Exception {
    doTest "Удивительный случай случился со мной: я вдруг забыл, что идет раньше - 7 или 8",
            """
frame: sem=AMAZING
frame: sem=THING
frame ^2 ^1: sem=property_host
frame: sem=HAPPEN
frame ^1 ^3: sem=experiencer
frame: sem=I
frame ^3 ^1: sem=theme
frame: sem=I
frame: sem=SUDDENLY
frame: sem=FORGET
frame ^2 ^1: sem=mode
frame ^2 ^4: sem=experiencer
frame: sem=WHAT
frame: sem=COME_SCALARLY
frame ^5 ^1: sem=theme
frame ^2 ^3: sem=agent, wh_focus=true
frame: sem=EARLIER
frame ^1 ^4: sem=scalar_end
frame: sem=number7
frame: sem=OR
frame ^1 ^2: sem=conj_left
frame: sem=number8
frame ^3 ^1: sem=conj_right
"""
  }

  public void testKharmsTranslation() throws Exception {
    translate(new Russian(), new English(), "Удивительный случай случился со мной", "An amazing thing happened to me today")
  }

  private def doTest(String input, String expected) {
    def chart = new Parser(new Russian()).parse(input)
    assertEquals expected.trim() + "\n", chart.presentableResult().trim() + "\n"
  }

  private def doTranslationTest(String rus, String eng) {
    translate(new Russian(), new English(), rus, eng)
    translate(new English(), new Russian(), eng, rus)
  }

  private def translate(Language srcLanguage, Language dstLanguage, String src, String expected) {
    def chart = new Parser(srcLanguage).parse(src)
    def desired = new Transfer().transfer(chart)
    def dst = new Chart(dstLanguage)
    dstLanguage.generate(desired, dst)
    def actual = dst.phonString()
    if (expected != actual) {
      System.err.println "Original analysis:\n" + chart.presentableLog()
      System.err.println "-------------\nTransferred:\n" + dst.log.presentable(['phon', 'syn', 'sem', 'stem'])
      assertEquals expected, actual
    }
  }


}
