package cons2

import junit.framework.TestCase

/**
 * @author peter
 */
class KharmsTest extends TestCase {

  public void testSent1() throws Exception {
    doTest "Удивительный случай случился со мной: я вдруг забыл, что идет раньше - 7 или 8",
            """
frame: sem=AMAZING
frame: sem=THING
frame ^2 ^1: sem=property_host
frame: sem=HAPPEN
frame ^3 ^1: sem=experiencer
frame: sem=I
frame ^1 ^3: sem=theme
frame: sem=I
frame: sem=SUDDENLY
frame: sem=FORGET
frame ^1 ^9: sem=elaboration
frame ^4 ^2: sem=experiencer
frame ^4 ^3: sem=mode
frame: sem=WHAT
frame: sem=COME_SCALARLY
frame ^1 ^6: sem=theme
frame ^3 ^2: sem=agent, wh_focus=true
frame: sem=EARLIER
frame ^1 ^4: sem=scalar_end
frame: sem=number7
frame: sem=OR
frame ^1 ^8: sem=alternatives
frame ^3 ^2: sem=conj_left
frame: sem=number8
frame ^1 ^4: sem=conj_right
"""
  }

  public void testSent2() throws Exception {
    doTest "Я отправился к соседям и спросил их, что они думают по этому поводу",
            """
frame: sem=I
frame: sem=START_GO_TO
frame ^2 ^1: sem=agent
frame: sem=NEIGHBOURS
frame ^1 ^3: sem=theme
frame: sem=I
frame ^1 ^3: sem=with_respect_to
frame: sem=AND
frame: sem=ASK
frame ^8 ^2: sem=conj_left
frame ^2 ^3: sem=conj_right
frame ^11 ^3: sem=agent
frame: sem=THEY
frame ^1 ^5: sem=addressee
frame: sem=WHAT
frame: sem=THEY
frame: sem=THINK
frame ^1 ^9: sem=theme
frame ^4 ^2: sem=theme, wh_focus=true
frame ^4 ^3: sem=experiencer
frame: sem=THIS
frame: sem=MATTER
frame ^1 ^6: sem=topic
frame ^3 ^2: sem=determiner
"""
  }

  public void testSent3() throws Exception {
    doTest "Каково же было их и мое удивление, когда они вдруг обнаружили, что тоже не могут вспомнить порядок счета", """
frame: sem=HOW
frame: sem=BE
frame: sem=THEY
frame: sem=AND
frame ^2 ^1: sem=conj_left
frame: sem=I
frame ^1 ^3: sem=conj_right
frame: sem=SURPRISE
frame ^8 ^1: sem=degree, wh_focus=true
frame ^7 ^2: sem=with_respect_to
frame ^5 ^3: sem=with_respect_to
frame: sem=WHEN
frame: sem=THEY
frame: sem=SUDDENLY
frame: sem=DISCOVER
frame ^4 ^1: sem=time
frame ^2 ^8: sem=time
frame ^5 ^3: sem=experiencer
frame ^5 ^4: sem=mode
frame: sem=ALSO
frame: sem=CAN, neg=true
frame ^1 ^7: sem=theme
frame ^10 ^2: sem=experiencer
frame ^4 ^3: sem=mode
frame: sem=RECALL
frame ^1 ^5: sem=theme
frame ^14 ^2: sem=experiencer
frame: sem=ORDER
frame ^1 ^4: sem=theme
frame: sem=COUNTING
frame ^1 ^3: sem=with_respect_to
"""
  }

  public void testSent4() throws Exception {
    doTest "1,2,3,4,5 и 6  помнят, а дальше забыли", """
frame: sem=number1
frame: sem=number2
frame: sem=enumeration
frame ^3 ^1: sem=member
frame ^3 ^2: sem=member
frame: sem=number3
frame ^1 ^4: sem=member
frame: sem=number4
frame ^1 ^6: sem=member
frame: sem=number5
frame ^1 ^8: sem=member
frame: sem=AND
frame ^1 ^10: sem=connective
frame: sem=number6
frame ^1 ^12: sem=member
frame: sem=REMEMBER
frame ^14 ^1: sem=theme
frame: sem=THEY
frame ^1 ^3: sem=experiencer
frame: sem=BUT
frame ^5 ^1: sem=conj_left
frame: sem=NEXT
frame: sem=FORGET
frame ^1 ^4: sem=conj_right
frame: sem=COME_SCALARLY
frame ^4 ^1: sem=scalar_end
frame: sem=WHAT
frame ^1 ^3: sem=agent, wh_focus=true
frame ^4 ^6: sem=theme
frame: sem=THEY
frame ^1 ^8: sem=experiencer
"""
  }

  public void testSent3_4() throws Exception {
    doTest "Каково же было их и мое удивление, когда они вдруг обнаружили, что тоже не могут вспомнить порядок счета. " +
            "1,2,3,4,5 и 6 помнят, а дальше забыли.", """
frame: sem=HOW
frame: sem=BE
frame: sem=THEY
frame: sem=AND
frame ^2 ^1: sem=conj_left
frame: sem=I
frame ^1 ^3: sem=conj_right
frame: sem=SURPRISE
frame ^8 ^1: sem=degree, wh_focus=true
frame ^7 ^2: sem=with_respect_to
frame ^5 ^3: sem=with_respect_to
frame: sem=WHEN
frame: sem=THEY
frame: sem=SUDDENLY
frame: sem=DISCOVER
frame ^4 ^1: sem=time
frame ^2 ^8: sem=time
frame ^5 ^3: sem=experiencer
frame ^5 ^4: sem=mode
frame: sem=ALSO
frame: sem=CAN, neg=true
frame ^1 ^7: sem=theme
frame ^10 ^2: sem=experiencer
frame ^4 ^3: sem=mode
frame: sem=RECALL, sentence_end=dot
frame ^1 ^5: sem=theme
frame ^14 ^2: sem=experiencer
frame: sem=ORDER
frame ^1 ^4: sem=theme
frame: sem=COUNTING
frame ^1 ^3: sem=with_respect_to
frame: sem=number1
frame: sem=number2
frame: sem=enumeration
frame ^3 ^1: sem=member
frame ^3 ^2: sem=member
frame: sem=number3
frame ^1 ^4: sem=member
frame: sem=number4
frame ^1 ^6: sem=member
frame: sem=number5
frame ^1 ^8: sem=member
frame: sem=AND
frame ^1 ^10: sem=connective
frame: sem=number6
frame ^1 ^12: sem=member
frame: sem=REMEMBER
frame ^14 ^1: sem=theme
frame: sem=THEY
frame ^1 ^3: sem=experiencer
frame: sem=BUT
frame ^5 ^1: sem=conj_left
frame: sem=NEXT
frame: sem=FORGET, sentence_end=dot
frame ^1 ^4: sem=conj_right
frame: sem=COME_SCALARLY
frame ^4 ^1: sem=scalar_end
frame: sem=WHAT
frame ^1 ^3: sem=agent, wh_focus=true
frame ^4 ^6: sem=theme
frame: sem=THEY
frame ^1 ^8: sem=experiencer
"""
  }
  public void testSent5() throws Exception {
    doTest 'Мы все пошли в коммерческий магазин "Гастроном"', """
frame: sem=WE, quant=ALL
frame: sem=GO
frame ^2 ^1: sem=experiencer
frame: sem=COMMERCIAL
frame: sem=SHOP
frame ^1 ^4: sem=theme
frame ^3 ^2: sem=property_host
frame: sem=Гастроном
frame ^1 ^4: sem=name
"""
  }

  public void testTranslation1() throws Exception {
    translate(new Russian(), new English(),
            "Удивительный случай случился со мной: я вдруг забыл, что идет раньше - 7 или 8",
            "An amazing thing happened to me today, I suddenly forgot what comes first - 7 or 8")
  }

  public void testTranslation2() throws Exception {
    translate(new Russian(), new English(),
            "Я отправился к соседям и спросил их, что они думают по этому поводу",
            "I went to my neighbors and asked them about their opinion on this matter")
  }

  public void testTranslation3() throws Exception {
    translate(new Russian(), new English(),
            "Каково же было их и мое удивление, когда они вдруг обнаружили, что тоже не могут вспомнить порядок счета",
            "Great was their and my amazement, when they suddenly discovered, that they couldn't recall the counting order")
  }

  public void testTranslation4Single() throws Exception {
    translate(new Russian(), new English(),
            "1,2,3,4,5 и 6 помнят, а дальше забыли",
            "They remember 1, 2, 3, 4, 5 and 6, but forgot what comes next")
  }

  public void testTranslation3_4() throws Exception {
    translate(new Russian(), new English(),
            "Каково же было их и мое удивление, когда они вдруг обнаружили, что тоже не могут вспомнить порядок счета. "+
                    "1,2,3,4,5 и 6 помнят, а дальше забыли.",
            "Great was their and my amazement, when they suddenly discovered, that they couldn't recall the counting order. "+
                    "They remembered 1, 2, 3, 4, 5 and 6, but forgot what comes next.")
  }

  private def doTest(String input, String expected) {
    def chart = new Parser(new Russian()).parse(input)
    assertEquals expected.trim() + "\n", chart.presentableResult().trim() + "\n"
  }

  private def doTranslationTest(String rus, String eng) {
    translate(new Russian(), new English(), rus, eng)
    translate(new English(), new Russian(), eng, rus)
  }

  private def translate(Language srcLanguage, Language dstLanguage, String src, String expected) {
    def chart = new Parser(srcLanguage).parse(src)
    def desired = new Transfer().transfer(chart)
    def dst = new Chart(dstLanguage)
    dstLanguage.generate(desired, dst)
    def actual = dst.phonString()
    if (expected != actual) {
      System.err.println "Original analysis:\n" + chart.presentableLog()
      System.err.println "-------------\nTransferred:\n" + desired.log.presentable(['phon', 'syn', 'sem', 'stem'])
      assertEquals expected.replace(' ', '\n'), actual.replace(' ', '\n')
    }
  }


}
