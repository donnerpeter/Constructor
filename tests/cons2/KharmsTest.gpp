package cons2

import junit.framework.TestCase

/**
 * @author peter
 */
class KharmsTest extends TestCase {

  public void testSent1() throws Exception {
    doTest "Удивительный случай случился со мной: я вдруг забыл, что идет раньше - 7 или 8",
            """
frame: sem=AMAZING
frame: sem=THING
frame ^2 ^1: sem=property_host
frame: sem=HAPPEN
frame ^3 ^1: sem=experiencer
frame: sem=I
frame ^1 ^3: sem=theme
frame: sem=I
frame: sem=SUDDENLY
frame: sem=FORGET
frame ^1 ^9: sem=elaboration
frame ^4 ^2: sem=experiencer
frame ^4 ^3: sem=mode
frame: sem=WHAT
frame: sem=COME_SCALARLY
frame ^1 ^6: sem=theme
frame ^3 ^2: sem=agent, wh_focus=true
frame: sem=EARLIER
frame ^1 ^4: sem=scalar_end
frame: sem=number7
frame: sem=OR
frame ^1 ^8: sem=alternatives
frame ^3 ^2: sem=conj_left
frame: sem=number8
frame ^1 ^4: sem=conj_right
"""
  }

  public void testSent2() throws Exception {
    doTest "Я отправился к соседям и спросил их, что они думают по этому поводу",
            """
frame: sem=I
frame: sem=START_GO_TO
frame ^2 ^1: sem=agent
frame: sem=NEIGHBOURS
frame ^1 ^3: sem=theme
frame: sem=I
frame ^1 ^3: sem=with_respect_to
frame: sem=AND_THEN
frame: sem=ASK
frame ^8 ^2: sem=conj_left
frame ^2 ^3: sem=conj_right
frame ^11 ^3: sem=agent
frame: sem=THEY
frame ^1 ^5: sem=addressee
frame: sem=WHAT
frame: sem=THEY
frame: sem=THINK
frame ^1 ^9: sem=theme
frame ^4 ^2: sem=theme, wh_focus=true
frame ^4 ^3: sem=experiencer
frame: sem=THIS
frame: sem=MATTER
frame ^1 ^6: sem=topic
frame ^3 ^2: sem=determiner
"""
  }

  public void testTranslation1() throws Exception {
    translate(new Russian(), new English(),
            "Удивительный случай случился со мной: я вдруг забыл, что идет раньше - 7 или 8",
            "An amazing thing happened to me today, I suddenly forgot what comes first - 7 or 8")
  }

  public void testTranslation2() throws Exception {
    translate(new Russian(), new English(),
            "Я отправился к соседям и спросил их, что они думают по этому поводу",
            "I went to my neighbors and asked them about their opinion on this matter")
  }

  private def doTest(String input, String expected) {
    def chart = new Parser(new Russian()).parse(input)
    assertEquals expected.trim() + "\n", chart.presentableResult().trim() + "\n"
  }

  private def doTranslationTest(String rus, String eng) {
    translate(new Russian(), new English(), rus, eng)
    translate(new English(), new Russian(), eng, rus)
  }

  private def translate(Language srcLanguage, Language dstLanguage, String src, String expected) {
    def chart = new Parser(srcLanguage).parse(src)
    def desired = new Transfer().transfer(chart)
    def dst = new Chart(dstLanguage)
    dstLanguage.generate(desired, dst)
    def actual = dst.phonString()
    if (expected != actual) {
      System.err.println "Original analysis:\n" + chart.presentableLog()
      System.err.println "-------------\nTransferred:\n" + desired.log.presentable(['phon', 'syn', 'sem', 'stem'])
      assertEquals expected, actual
    }
  }


}
