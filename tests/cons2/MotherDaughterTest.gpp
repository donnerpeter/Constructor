package cons2

import junit.framework.TestCase

/**
 * @author peter
 */
class MotherDaughterTest extends TestCase {

  public void testMLD() throws Exception {
    doTest "мать любит дочь", """
frame: sem=mother
frame: sem=love
frame ^1 ^2: sem=experiencer
frame: sem=daughter
frame ^3 ^1: sem=theme
"""

    doEnglishTest "the mother loves the daughter", """
frame
frame: sem=mother, ==^1
frame: sem=love
frame ^1 ^2: sem=experiencer
frame
frame ^3 ^1: sem=theme
frame: sem=daughter, ==^2
"""
  }

  public void testMLDTrans() throws Exception {
    doTranslationTest "мать любит дочь", "the mother loves the daughter"
  }

  public void testDLMTrans() throws Exception {
    doTranslationTest "дочь любит мать", "the daughter loves the mother"
  }
  public void testDLM() throws Exception {
    doTest "дочь любит мать", """
frame: sem=daughter
frame: sem=love
frame ^1 ^2: sem=experiencer
frame: sem=mother
frame ^3 ^1: sem=theme
"""
  }

  public void testBnDLM() throws Exception {
    doTest "красивая дочь любит мать", """
frame: sem=beautiful
frame
frame ^2 ^1: sem=property_host
frame: sem=daughter, ==^2
frame: sem=love
frame ^1 ^2: sem=experiencer
frame: sem=mother
frame ^3 ^1: sem=theme
"""
  }

  public void testBnDLMTrans() throws Exception {
    doTranslationTest "красивая дочь любит мать", "the beautiful daughter loves the mother"
  }
  public void testDLBaM() throws Exception {
    doTest "дочь любит красивую мать", """
frame: sem=daughter
frame: sem=love
frame ^1 ^2: sem=experiencer
frame: sem=beautiful
frame
frame ^4 ^1: sem=theme
frame ^3 ^2: sem=property_host
frame: sem=mother, ==^3
"""
  }

  public void testDLBaMTrans() throws Exception {
    doTranslationTest "дочь любит красивую мать", "the daughter loves the beautiful mother"
  }

  public void testDLFTrans() throws Exception {
    doTranslationTest "дочь любит отца", "the daughter loves the father"
  }

  public void testFLDTrans() throws Exception {
    doTranslationTest "отец любит дочь", "the father loves the daughter"
  }

  public void testDLF() throws Exception {
    doTest "дочь любит отца", """
frame: sem=daughter
frame: sem=love
frame ^1 ^2: sem=experiencer
frame: sem=father
frame ^3 ^1: sem=theme
"""
  }

  public void testFLD() throws Exception {
    doTest "отец любит дочь", """
frame: sem=father
frame: sem=love
frame ^1 ^2: sem=experiencer
frame: sem=daughter
frame ^3 ^1: sem=theme
"""
  }

  public void testFaLD() throws Exception {
    doTest "отца любит дочь", """
frame: sem=father
frame: sem=love
frame ^1 ^2: sem=theme
frame: sem=daughter
frame ^3 ^1: sem=experiencer
"""
  }

  public void testBaMaLD() throws Exception {
    doTest "красивую мать любит дочь", """
frame: sem=beautiful
frame
frame ^2 ^1: sem=property_host
frame: sem=mother, ==^2
frame: sem=love
frame ^1 ^2: sem=theme
frame: sem=daughter
frame ^3 ^1: sem=experiencer
"""
  }
  
  public void testMaLBnD() throws Exception {
    doTest "мать любит красивая дочь", """
frame: sem=mother
frame: sem=love
frame ^1 ^2: sem=experiencer
frame: sem=beautiful
frame
frame ^2 ^1: sem=property_host
frame: sem=daughter, ==^2
^5: weaken
frame ^7 ^8: sem=theme
frame ^8 ^3: sem=experiencer
"""
  }

  public void testDaLFn() throws Exception {
    doTest "дочь любит отец", """
frame: sem=daughter
frame: sem=love
frame ^1 ^2: sem=experiencer
frame: sem=father
^2: weaken
frame ^4 ^5: sem=theme
frame ^5 ^3: sem=experiencer
"""
  }

  private def doTest(String input, String expected) {
    def chart = new Parser(new Russian()).parse(input)
    assertEquals expected.trim() + "\n", chart.presentable().trim() + "\n"
  }

  private def doTranslationTest(String rus, String eng) {
    translate(new Russian(), new English(), rus, eng)
    translate(new English(), new Russian(), eng, rus)
  }

  private def translate(Language srcLanguage, Language dstLanguage, String src, String expected) {
    def chart = new Parser(srcLanguage).parse(src)
    def desired = new Transfer().transfer(chart)
    def dst = new Chart(dstLanguage)
    dstLanguage.generate(desired, dst)
    def actual = dst.phonString()
    if (expected != actual) {
      println "Original analysis:\n" + chart.presentable()
      println "-------------\nTransferred:\n" + dst.log.presentable(['phon', 'syn', 'sem', 'stem'])
      assertEquals expected, actual
    }
  }

  private def doEnglishTest(String input, String expected) {
    def chart = new Parser(new English()).parse(input)
    assertEquals expected.trim() + "\n", chart.presentable().trim() + "\n"
  }

}
