package cons3

import junit.framework.TestCase

/**
 * @author peter
 */
class SonnetTest extends TestCase {

  public void testParse1() throws Exception {
    doParseTest("Удивительный случай случился со мной: я вдруг забыл, что идет раньше - 7 или 8", """
A.property=AMAZING
A.type=THING
B.type=HAPPEN
#1.time=PAST
B.arg1=A
B.experiencer=C
C.type=ME
#1.elaboration=#2
--
A.type=ME
B.type=FORGET
#2.time=PAST
B.arg1=A
B.manner=SUDDENLY
B.theme=#3
--
#3.questioned=A
#3.time=PRESENT
B.type=COME_SCALARLY
B.order=EARLIER
B.arg1=A
A.variants=C
D.type=7
D.number=true
C.member=D
E.type=8
E.number=true
C.conj=or
C.member=E
""")
  }

  static void doParseTest(String input, String expected) {
    def parser = new Parser()
    def result = parser.parse(input).presentable()
    if (expected.trim() != result) {
      println parser.log
      assertEquals expected.trim(), result
    }
  }

  public void testParse2() throws Exception {
    doParseTest "Я отправился к соседям и спросил их, что они думают по этому поводу", """
A.type=ME
B.type=GO_OFF
#1.time=PAST
B.arg1=A
B.goal=C
C.type=NEIGHBOURS
D.type=ASK
D.arg1=A
E.type=THEY
D.arg2=E
D.question=#2
--
#2.questioned=A
B.type=THEY
C.type=THINK
#2.time=PRESENT
C.arg1=B
C.arg2=A
D.determiner=THIS
D.type=MATTER
C.topic=D
"""
  }

  public void testParse3() throws Exception {
    doParseTest "Каково же было их и мое удивление, когда они вдруг обнаружили, что тоже не могут вспомнить порядок счета.", """
#1.exclamation=A
#1.time=PAST
B.type=THEY
C.member=B
C.conj=and
C.member=D
D.type=ME
E.degree=A
E.type=AMAZE
E.arg1=C
#1.whenCondition=#2
--
A.type=THEY
B.type=DISCOVER
#2.time=PAST
B.arg1=A
B.manner=SUDDENLY
B.theme=#3
--
A.type=ALSO
A.arg1=B
A.theme=C
C.negated=true
C.type=CAN
#3.time=PRESENT
B.type=THEY
D.type=RECALL
C.theme=D
E.type=ORDER
D.arg2=E
F.type=COUNTING
E.criterion=F
#3.dot=true
"""
  }

  public void testParse3_4() throws Exception {
    doParseTest "Каково же было их и мое удивление, когда они вдруг обнаружили, что тоже не могут вспомнить порядок счета. 1, 2, 3, 4, 5 и 6 помнят, а дальше забыли.", """
#1.exclamation=A
#1.time=PAST
B.type=THEY
C.member=B
C.conj=and
C.member=D
D.type=ME
E.degree=A
E.type=AMAZE
E.arg1=C
#1.whenCondition=#2
--
A.type=THEY
B.type=DISCOVER
#2.time=PAST
B.arg1=A
B.manner=SUDDENLY
B.theme=#3
--
A.type=ALSO
A.arg1=B
A.theme=C
C.negated=true
C.type=CAN
#3.time=PRESENT
B.type=THEY
D.type=RECALL
C.theme=D
E.type=ORDER
D.arg2=E
F.type=COUNTING
E.criterion=F
#3.dot=true
--
A.type=1
A.number=true
B.type=2
B.number=true
C.member=A
C.member=B
D.type=3
D.number=true
C.member=D
E.type=4
E.number=true
C.member=E
F.type=5
F.number=true
C.member=F
G.type=6
G.number=true
C.conj=and
C.member=G
H.type=REMEMBER
#4.time=PRESENT
H.arg2=C
I.type=THEY
H.arg1=I
#4.but=#5
--
A.type=FORGET
#5.time=PAST
B.type=NEXT
A.arg2=B
C.type=THEY
A.arg1=C
#5.dot=true
"""
  }

  public void testParse5() throws Exception {
    doParseTest 'Мы все пошли в коммерческий магазин "Гастроном", что на углу Знаменской и Бассейной улицы, и спросили кассиршу о нашем недоумении', """
A.type=WE
A.quantifier=ALL
B.type=GO
#1.time=PAST
B.arg1=A
B.goal=C
C.kind=COMMERCIAL
C.type=SHOP
C.name=гастроном
C.relative=#2
D.type=ASK
D.arg1=A
E.type=CASHIER
D.arg2=E
D.topic=F
G.type=WE
F.type=PREDICAMENT
F.arg1=G
--
#2.wh=A
A.location=B
B.type=CORNER
C.type=STREET
B.arg1=C
C.name=знаменская
D.member=C
D.conj=and
D.member=E
E.type=STREET
B.arg1=D
E.name=бассейная
"""
  }

  public void testParse6() throws Exception {
    doParseTest "Кассирша грустно улыбнулась, вынула изо рта маленький молоточек и, слегка подвигав носом, сказала:", """
A.type=CASHIER
B.type=SMILE
#1.time=PAST
B.arg1=A
B.manner=SADLY
C.type=TAKE_OUT
C.arg1=A
C.source=D
D.type=MOUTH
E.size=LITTLE
C.arg2=E
E.type=HAMMER
F.type=MOVE
F.background=perfect
F.manner=SLIGHTLY
G.type=NOSE
F.arg2=G
H.type=SAY
H.arg1=A
H.message=#2
"""
  }

  public void testParse7() throws Exception {
    doParseTest "По-моему, семь идет после восьми в том случае, когда восемь идет после семи", """
#1.opinion_of=A
A.type=OPINION
A.arg1=B
B.type=ME
C.type=7
#1.time=PRESENT
D.type=COME_SCALARLY
D.order=AFTER
D.arg1=C
E.type=8
D.anchor=E
#1.condition=F
F.determiner=THAT
F.type=CASE
F.whenCondition=#2
--
A.type=8
#2.time=PRESENT
B.type=COME_SCALARLY
B.order=AFTER
B.arg1=A
C.type=7
B.anchor=C
"""
  }

  public void testParse6_7() throws Exception {
    doParseTest """Кассирша грустно улыбнулась, вынула изо рта маленький молоточек и, слегка подвигав носом, сказала:
- По-моему, семь идет после восьми в том случае, когда восемь идет после семи""", """
A.type=CASHIER
B.type=SMILE
#1.time=PAST
B.arg1=A
B.manner=SADLY
C.type=TAKE_OUT
C.arg1=A
C.source=D
D.type=MOUTH
E.size=LITTLE
C.arg2=E
E.type=HAMMER
F.type=MOVE
F.background=perfect
F.manner=SLIGHTLY
G.type=NOSE
F.arg2=G
H.type=SAY
H.arg1=A
H.message=#2
--
#2.opinion_of=A
A.type=OPINION
A.arg1=B
B.type=ME
C.type=7
#2.time=PRESENT
D.type=COME_SCALARLY
D.order=AFTER
D.arg1=C
E.type=8
D.anchor=E
#2.condition=F
F.determiner=THAT
F.type=CASE
F.whenCondition=#3
--
A.type=8
#3.time=PRESENT
B.type=COME_SCALARLY
B.order=AFTER
B.arg1=A
C.type=7
B.anchor=C
"""
  }

  public void testParse8() throws Exception {
    doParseTest """Мы поблагодарили кассиршу и с радостью выбежали из магазина""", """
A.type=WE
B.type=THANK
#1.time=PAST
B.arg1=A
C.type=CASHIER
B.arg2=C
D.type=JOY
E.type=RUN_OUT
E.arg1=A
E.mood=D
E.source=F
F.type=SHOP
"""
  }


  public void testTranslate1() throws Exception {
    doTranslateTest "Удивительный случай случился со мной: я вдруг забыл, что идет раньше - 7 или 8",
                    "An amazing thing happened to me today, I suddenly forgot what comes first - 7 or 8"
  }

  public void testTranslate2() throws Exception {
    doTranslateTest "Я отправился к соседям и спросил их, что они думают по этому поводу",
                    "I went to my neighbors and asked them about their opinion on this matter"
  }

  public void testTranslate3() throws Exception {
    doTranslateTest "Каково же было их и мое удивление, когда они вдруг обнаружили, что тоже не могут вспомнить порядок счета.",
                    "Great was their and my amazement, when they suddenly discovered, that they couldn't recall the counting order."
  }

  public void testTranslate4() throws Exception {
    doTranslateTest "1, 2, 3, 4, 5 и 6 помнят, а дальше забыли.",
                    "They remember 1, 2, 3, 4, 5 and 6, but forgot what comes next."
  }

  public void testTranslate3_4() throws Exception {
    doTranslateTest "Каково же было их и мое удивление, когда они вдруг обнаружили, что тоже не могут вспомнить порядок счета. " +
                            "1, 2, 3, 4, 5 и 6 помнят, а дальше забыли.",
                    "Great was their and my amazement, when they suddenly discovered, that they couldn't recall the counting order. " +
                            "They remembered 1, 2, 3, 4, 5 and 6, but forgot what comes next."
  }

  public void testTranslate5() throws Exception {
    doTranslateTest 'Мы все пошли в коммерческий магазин "Гастроном", что на углу Знаменской и Бассейной улицы, и спросили кассиршу о нашем недоумении',
                    "We all went to a commercial grocery store, the one that's on the corner of Znamenskaya and Basseinaya streets to consult a cashier on our predicament"
  }

  public void testTranslate6() throws Exception {
    doTranslateTest 'Кассирша грустно улыбнулась, вынула изо рта маленький молоточек и, слегка подвигав носом, сказала:',
                    "The cashier gave us a sad smile, took a small hammer out of her mouth, and moving her nose slightly back and forth, she said:"
  }

  public void testTranslate7() throws Exception {
    doTranslateTest 'По-моему, семь идет после восьми в том случае, когда восемь идет после семи',
                    "In my opinion, a seven comes after an eight, only if an eight comes after a seven"
  }

  public void testTranslate6_7() throws Exception {
    doTranslateTest '''Кассирша грустно улыбнулась, вынула изо рта маленький молоточек и, слегка подвигав носом, сказала:
- По-моему, семь идет после восьми в том случае, когда восемь идет после семи''',
                    """The cashier gave us a sad smile, took a small hammer out of her mouth, and moving her nose slightly back and forth, she said:
- In my opinion, a seven comes after an eight, only if an eight comes after a seven"""
  }

  public void testTranslate8() throws Exception {
    doTranslateTest 'Мы поблагодарили кассиршу и с радостью выбежали из магазина',
                    "We thanked the cashier and ran cheerfully out of the store"
  }

  public void testParse9() throws Exception {
    doParseTest 'Но тут, вдумываясь в слова кассирши, мы опять приуныли, так как ее слова показались нам лишенными всякого смысла.', '''
#1.but=#2
--
#2.emphasis=true
A.type=THINK
A.background=present
A.theme=B
B.type=WORDS
C.type=CASHIER
B.author=C
D.type=WE
E.anchor=AGAIN
E.type=GET_SAD
#2.time=PAST
E.arg1=D
#2.reason=#3
--
A.type=SHE
B.type=WORDS
B.author=A
C.type=SEEM
#3.time=PAST
C.arg1=B
D.type=WE
E.type=LACK
C.theme=E
F.determiner=ANY
E.arg2=F
F.type=MEANING
#3.dot=true
'''
  }

  public void testTranslate9() throws Exception {
    doTranslateTest 'Но тут, вдумываясь в слова кассирши, мы опять приуныли, так как ее слова показались нам лишенными всякого смысла.',
            "But there, thinking carefully about cashier's words, we got sad again because her words were void of any meaning."
  }

  public void testParse10() throws Exception {
    doParseTest 'Что нам было делать?', '''
A.type=WE
#1.time=PAST
B.type=DO
B.arg2=C
B.arg1=A
#1.imperative=true
#1.questioned=C
'''
  }

  public void testTranslate10() throws Exception {
    doTranslateTest 'Что нам было делать?', 'What were we supposed to do?'
  }

  public void testParse11() throws Exception {
    doParseTest 'Мы пошли в Летний сад и стали там считать деревья', '''
A.type=WE
B.type=GO
#1.time=PAST
B.arg1=A
B.goal=C
C.type=GARDEN
C.name=Летний сад
D.type=BEGIN
D.arg1=A
E.type=COUNT
D.theme=E
F.type=TREES
E.arg2=F
'''
  }

  public void testTranslate11() throws Exception {
    doTranslateTest 'Мы пошли в Летний сад и стали там считать деревья',
                    'We went to the Summer Garden and started counting trees'
  }

  public void testParse12() throws Exception {
    doParseTest 'Но дойдя в счете до 6-ти, мы остановились и начали спорить: по мнению одних дальше следовало 7, по мнению других - 8', '''
#1.but=#2
--
A.type=COME_TO
A.background=perfect
A.domain=B
B.type=COUNTING
A.goal=C
C.type=6
D.type=WE
E.type=STOP
#2.time=PAST
E.arg1=D
F.type=BEGIN
F.arg1=D
G.type=ARGUE
F.theme=G
#2.elaboration=#3
--
A.type=OPINION
#3.opinion_of=A
B.type=SOME
A.arg1=B
#3.time=PAST
C.type=COME_SCALARLY
C.order=AFTER
C.arg1=D
D.type=7
D.number=true
#3.but=#4
--
A.type=OPINION
#4.opinion_of=A
B.type=OTHERS
A.arg1=B
C.type=ellipsis
<C>
D.type=COME_SCALARLY
D.order=AFTER
</C>
D.arg1=E
E.type=8
E.number=true
'''
  }

  public void testTranslate12() throws Exception {
    doTranslateTest 'Но дойдя в счете до 6-ти, мы остановились и начали спорить: по мнению одних дальше следовало 7, по мнению других - 8',
                    'But reaching a six in count, we stopped and started arguing: in the opinion of some, a 7 went next; but in opinion of others an 8 did'
  }

  public void testParse13() throws Exception {
    doParseTest "Мы спорили бы очень долго, но, по счастию тут со скамейки свалился какой-то ребенок и сломал себе обе челюсти", """
A.type=WE
B.type=ARGUE
#1.time=PAST
B.arg1=A
#1.mood=subjunctive
B.duration=LONG
#1.but=#2
--
A.type=LUCK
#2.emphasis=true
B.type=BENCH
C.type=FALL
#2.time=PAST
C.source=B
A.topic=C
D.determiner=SOME
C.arg1=D
D.type=CHILD
E.type=BREAK
E.arg1=D
F.quantifier=BOTH
E.arg2=F
F.arg1=D
F.type=JAW
"""
  }

  public void testTranslate13() throws Exception {
    doTranslateTest 'Мы спорили бы очень долго, но, по счастию тут со скамейки свалился какой-то ребенок и сломал себе обе челюсти',
                    'We were arguing for a long time, when by some sheer luck, a child fell off a bench and broke both of his jaws'
  }

  static void doTranslateTest(String input, String expected) {
    def parser = new Parser()
    def chart = parser.parse(input)
    def actual = new EnglishGenerator().generate(chart)
    if (actual != expected) {
      println chart.presentable()
      println "\nLog:\n\n$parser.log"
    }
    assertEquals expected, actual
  }
}
